{
	"name": "LoadMktDimDataSource_InsertUpdate_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CSVgenericWithParameter_ds",
						"type": "DatasetReference"
					},
					"name": "ReadSource"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGeneric_ds",
						"type": "DatasetReference"
					},
					"name": "DatamartDimDataSourceLkp"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLtableGenericWithParam_ds",
						"type": "DatasetReference"
					},
					"name": "TargetDim"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGenericWithParam_ds",
						"type": "DatasetReference"
					},
					"name": "ErrorTable"
				}
			],
			"transformations": [
				{
					"name": "SelectDimDataSourceLkp"
				},
				{
					"name": "DataTransformation"
				},
				{
					"name": "CheckDimensionRecordExist"
				},
				{
					"name": "AddAdditionalAudit"
				},
				{
					"name": "AlterRowInsertUpdate"
				},
				{
					"name": "CheckInputRecord"
				},
				{
					"name": "AddErrorDetail"
				},
				{
					"name": "RemoveBlankRow"
				},
				{
					"name": "GetNewOrModified"
				},
				{
					"name": "RemoveDuplicate"
				},
				{
					"name": "ReplaceNullToUndefined"
				}
			],
			"script": "parameters{\n\tGeneratedBatchDate as string,\n\tWorkbookName as string,\n\tWorksheetName as string,\n\tMasterPipelineName as string\n}\nsource(output(\n\t\t{Source Metric} as string,\n\t\t{Source Name} as string,\n\t\t{Source Type} as string,\n\t\tSource_Link as string,\n\t\tSource_Data_Type as string,\n\t\tData_Process_Type as string,\n\t\tSource_Status as string,\n\t\tFrequency as string,\n\t\tConfidence_Level as string,\n\t\t{Person Responsible} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> ReadSource\nsource(output(\n\t\tMetric_Short_Name as string,\n\t\tSource_Name as string,\n\t\tSource_Type as string,\n\t\tSource_Link as string,\n\t\tSource_Data_Type as string,\n\t\tData_Process_Type as string,\n\t\tSource_Status as string,\n\t\tFrequency as string,\n\t\tConfidence_Level as string,\n\t\tPerson_Responsible as string,\n\t\tInsert_DateTime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT\\n       [Metric_Short_Name]\\n      ,[Source_Name]\\n      ,[Source_Type]\\n      ,[Source_Link]\\n      ,[Source_Data_Type]\\n      ,[Data_Process_Type]\\n      ,[Source_Status]\\n      ,[Frequency]\\n      ,[Confidence_Level]\\n      ,[Person_Responsible]\\n      ,[Insert_DateTime]\\n  FROM [datamart].[Dim_Data_Source]',\n\tformat: 'query') ~> DatamartDimDataSourceLkp\nDatamartDimDataSourceLkp select(mapColumn(\n\t\tMetric_Short_Name_Lkp = Metric_Short_Name,\n\t\tSource_Name_Lkp = Source_Name,\n\t\tSource_Type_Lkp = Source_Type,\n\t\tSource_Link_Lkp = Source_Link,\n\t\tSource_Data_Type_Lkp = Source_Data_Type,\n\t\tData_Process_Type_Lkp = Data_Process_Type,\n\t\tSource_Status_Lkp = Source_Status,\n\t\tFrequency_Lkp = Frequency,\n\t\tConfidence_Level_Lkp = Confidence_Level,\n\t\tPerson_Responsible_Lkp = Person_Responsible,\n\t\tInsert_DateTime_Lkp = Insert_DateTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimDataSourceLkp\nReadSource derive(Source_File = concat($WorkbookName,'-', $WorksheetName),\n\t\tBatch_ID = replace(replace(replace($GeneratedBatchDate, \"-\", \"\"),\":\",\"\"),\" \",\"\"),\n\t\tProcess_Name = $MasterPipelineName) ~> DataTransformation\nRemoveDuplicate, SelectDimDataSourceLkp lookup(Species_Code == Species_Code_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> CheckDimensionRecordExist\nGetNewOrModified derive(InsertUpdateFlag = iif(isNull(Species_Code_Lkp), \"I\", \"U\"),\n\t\tInsert_DateTime = iif(isNull(Species_Code_Lkp), fromUTC(currentUTC(), 'Australia/Sydney'), Insert_DateTime_Lkp),\n\t\tUpdate_DateTime = iif(isNull(Species_Code_Lkp), toTimestamp(\"\"), fromUTC(currentUTC(), 'Australia/Sydney'))) ~> AddAdditionalAudit\nAddAdditionalAudit alterRow(insertIf(equals(InsertUpdateFlag,\"I\")),\n\tupdateIf(equals(InsertUpdateFlag,\"U\"))) ~> AlterRowInsertUpdate\nDataTransformation split(not(isNull({Source Metric})),\n\tdisjoint: false) ~> CheckInputRecord@(Valid, Invalid)\nRemoveBlankRow derive(Error_Desc = toString(\"Source Metric cannot be empty\"),\n\t\tInsert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney')) ~> AddErrorDetail\nCheckInputRecord@Invalid filter(not(isNull({Source Metric})) || not(isNull({Source Name})) || not(isNull({Source Type})) || not(isNull(Source_Link)) || \r\nnot(isNull(Source_Data_Type)) || not(isNull(Data_Process_Type)) || not(isNull(Source_Status)) || not(isNull(Frequency)) || \r\nnot(isNull(Confidence_Level)) || not(isNull({Person Responsible}))) ~> RemoveBlankRow\nCheckDimensionRecordExist filter(isNull(Species_Code_Lkp) || notEquals({Source Name}, Species_Lkp) || notEquals({Source Type}, Genus_Lkp) || notEquals(Source_Link, Species_Group_Lkp)) ~> GetNewOrModified\nReplaceNullToUndefined aggregate(groupBy(Species_Code = ERROR_FUNCTION(''),\n\t\t{Source Name},\n\t\t{Source Type},\n\t\tSource_Link,\n\t\tSource_Data_Type,\n\t\tData_Process_Type,\n\t\tSource_Status,\n\t\tFrequency,\n\t\tConfidence_Level,\n\t\t{Person Responsible},\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name),\n\tDuplicateCount = count()) ~> RemoveDuplicate\nCheckInputRecord@Valid derive({Source Name} = iifNull({Source Name}, \"Undefined\"),\n\t\t{Source Type} = iifNull({Source Type}, \"Undefined\"),\n\t\tSource_Link = iifNull(Source_Link, \"Undefined\"),\n\t\tSource_Data_Type = iifNull(Source_Data_Type, \"Undefined\"),\n\t\tData_Process_Type = iifNull(Data_Process_Type, \"Undefined\"),\n\t\tSource_Status = iifNull(Source_Status, \"Undefined\"),\n\t\tFrequency = iifNull(Frequency, \"Undefined\"),\n\t\tConfidence_Level = iifNull(Confidence_Level, \"Undefined\"),\n\t\t{Person Responsible} = iifNull({Person Responsible}, \"Undefined\")) ~> ReplaceNullToUndefined\nAlterRowInsertUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['Species_Code'],\n\tformat: 'table',\n\tmapColumn(\n\t\tSpecies_Code,\n\t\tSpecies = {Source Name},\n\t\tGenus = {Source Type},\n\t\tSpecies_Group = Source_Link,\n\t\tSource_File = Source_Data_Type,\n\t\tBatch_ID = Data_Process_Type,\n\t\tProcess_Name,\n\t\tInsert_DateTime,\n\t\tUpdate_DateTime\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TargetDim\nAddErrorDetail sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tMetric_Short_Name = {Source Metric},\n\t\tSource_Name = {Source Name},\n\t\tSource_Type = {Source Type},\n\t\tSource_Link,\n\t\tSource_Data_Type,\n\t\tData_Process_Type,\n\t\tSource_Status,\n\t\tFrequency,\n\t\tConfidence_Level,\n\t\tPerson_Responsible = {Person Responsible},\n\t\tSource_File,\n\t\tProcess_Name,\n\t\tError_Desc,\n\t\tInsert_Datetime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ErrorTable"
		}
	}
}