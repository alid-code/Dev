{
	"name": "LoadTxtToDBstaging_manual_forecast_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Forecast_Test_ds",
						"type": "DatasetReference"
					},
					"name": "LoadFromScrubbed"
				},
				{
					"dataset": {
						"referenceName": "SQLrelationasset_ds",
						"type": "DatasetReference"
					},
					"name": "GetAssetMaster"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "GetCPMCodes"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLStagingManualForecast",
						"type": "DatasetReference"
					},
					"name": "StagingDB"
				}
			],
			"transformations": [
				{
					"name": "SelectSourceColumns"
				},
				{
					"name": "LookupFundAndAsset"
				},
				{
					"name": "SelectFundColumns"
				},
				{
					"name": "LookupCPMCode"
				},
				{
					"name": "ConditionalSplitValidCPMCode"
				},
				{
					"name": "TransactionValidFundAsset"
				},
				{
					"name": "SelectInvalidFundAssetData"
				},
				{
					"name": "DerivedColumnValidationErrorFund"
				},
				{
					"name": "DerivedColumnValidationErrorGL"
				},
				{
					"name": "SelectInvalidCPMdata"
				},
				{
					"name": "SelectValidCPMdata"
				},
				{
					"name": "UnionAll"
				},
				{
					"name": "CheckVersionNotNull"
				},
				{
					"name": "DerivedInvalidNullVersion"
				},
				{
					"name": "SelectNullVersion"
				},
				{
					"name": "UnpivotForecast"
				},
				{
					"name": "CreditDebitType"
				}
			],
			"script": "source(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tForecast_Version as string,\n\t\tCPM_Code as string,\n\t\t{1/07/2021} as double,\n\t\t{1/07/2022} as double,\n\t\t{1/07/2023} as double,\n\t\t{1/07/2024} as double,\n\t\t{1/07/2025} as double,\n\t\t{1/07/2026} as double,\n\t\t{1/07/2027} as double,\n\t\t{1/07/2028} as double,\n\t\t{1/07/2029} as double,\n\t\t{1/07/2030} as double,\n\t\t{1/07/2031} as double,\n\t\t{1/07/2032} as double,\n\t\t{1/07/2033} as double,\n\t\t{1/07/2034} as double,\n\t\t{1/07/2035} as double,\n\t\t{1/07/2036} as double,\n\t\t{1/07/2037} as double,\n\t\t{1/07/2038} as double,\n\t\t{1/07/2039} as double,\n\t\t{1/07/2040} as double,\n\t\t{1/07/2041} as double,\n\t\t{1/07/2042} as double,\n\t\t{1/07/2043} as double,\n\t\t{1/07/2044} as double,\n\t\t{1/07/2045} as double,\n\t\t{1/07/2046} as double,\n\t\t{1/07/2047} as double,\n\t\t{1/07/2048} as double,\n\t\t{1/07/2049} as double,\n\t\t{1/07/2050} as double,\n\t\t{1/07/2051} as double,\n\t\t{1/07/2052} as double,\n\t\t{1/07/2053} as double,\n\t\t{1/07/2054} as double,\n\t\t{1/07/2055} as double,\n\t\t{1/07/2056} as double,\n\t\t{1/07/2057} as double,\n\t\t{1/07/2058} as double,\n\t\t{1/07/2059} as double,\n\t\t{1/07/2060} as double,\n\t\t{1/07/2061} as double,\n\t\t{1/07/2062} as double,\n\t\t{1/07/2063} as double,\n\t\t{1/07/2064} as double,\n\t\t{1/07/2065} as double,\n\t\t{1/07/2066} as double,\n\t\t{1/07/2067} as double,\n\t\t{1/07/2068} as double,\n\t\t{1/07/2069} as double,\n\t\t{1/07/2070} as double,\n\t\t{1/07/2071} as double,\n\t\t{1/07/2072} as double,\n\t\t{1/07/2073} as double,\n\t\t{1/07/2074} as double,\n\t\t{1/07/2075} as double,\n\t\t{1/07/2076} as double,\n\t\t{1/07/2077} as double,\n\t\t{1/07/2078} as double,\n\t\t{1/07/2079} as double,\n\t\t{1/07/2080} as double,\n\t\t{1/07/2081} as double,\n\t\t{1/07/2082} as double,\n\t\t{1/07/2083} as double,\n\t\t{1/07/2084} as double,\n\t\t{1/07/2085} as double,\n\t\t{1/07/2086} as double,\n\t\t{1/07/2087} as double,\n\t\t{1/07/2088} as double,\n\t\t{1/07/2089} as double,\n\t\t{1/07/2090} as double,\n\t\t{1/07/2091} as double,\n\t\t{1/07/2092} as double,\n\t\t{1/07/2093} as double,\n\t\t{1/07/2094} as double,\n\t\t{1/07/2095} as double,\n\t\t{1/07/2096} as double,\n\t\t{1/07/2097} as double,\n\t\t{1/07/2098} as double,\n\t\t{1/07/2099} as double,\n\t\t{1/07/2100} as double,\n\t\t{1/07/2101} as double,\n\t\t{1/07/2102} as double,\n\t\t{1/07/2103} as double,\n\t\t{1/07/2104} as double,\n\t\t{1/07/2105} as double,\n\t\t{1/07/2106} as double,\n\t\t{1/07/2107} as double,\n\t\t{1/07/2108} as double,\n\t\t{1/07/2109} as double,\n\t\t{1/07/2110} as double,\n\t\t{1/07/2111} as double,\n\t\t{1/07/2112} as double,\n\t\t{1/07/2113} as double,\n\t\t{1/07/2114} as double,\n\t\t{1/07/2115} as double,\n\t\t{1/07/2116} as double,\n\t\t{1/07/2117} as double,\n\t\t{1/07/2118} as double,\n\t\t{1/07/2119} as double,\n\t\t{1/07/2120} as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\twildcardPaths:['MAS_MNL_FORECAST_*']) ~> LoadFromScrubbed\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT [Asset_ID]\\n      ,[Fund_ID]\\n  FROM [relational].[Asset]\\n  WHERE [record_deleted_flag] = 0',\n\tformat: 'query') ~> GetAssetMaster\nsource(output(\n\t\tCPM_Code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT [CPM_Code]\\n  FROM [relational].[CPM_Codes]',\n\tformat: 'query') ~> GetCPMCodes\nCheckVersionNotNull@CompleteVersionName select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tCPM_Code,\n\t\tForecast_Version,\n\t\tForecast_Period,\n\t\tValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectSourceColumns\nSelectSourceColumns, SelectFundColumns lookup(Asset_ID == Relation_Asset_ID\n\t&& Fund_ID == Relation_Fund_ID,\n\tmultiple: true,\n\tbroadcast: 'auto')~> LookupFundAndAsset\nGetAssetMaster select(mapColumn(\n\t\tRelation_Asset_ID = Asset_ID,\n\t\tRelation_Fund_ID = Fund_ID\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectFundColumns\nTransactionValidFundAsset@ValidFundAsset, GetCPMCodes lookup(TransactionValidFundAsset@ValidFundAsset@CPM_Code == GetCPMCodes@CPM_Code,\n\tmultiple: true,\n\tbroadcast: 'auto')~> LookupCPMCode\nLookupCPMCode split(not(isNull(GetCPMCodes@CPM_Code)),\n\tdisjoint: false) ~> ConditionalSplitValidCPMCode@(ValidCPM, NotValidCPM)\nLookupFundAndAsset split(not(isNull(Relation_Fund_ID)),\n\tdisjoint: false) ~> TransactionValidFundAsset@(ValidFundAsset, InvalidFundAsset)\nDerivedColumnValidationErrorFund select(mapColumn(\n\t\tAsset_ID = Relation_Asset_ID,\n\t\tFund_ID = Relation_Fund_ID,\n\t\tCPM_Code,\n\t\tForecast_Version,\n\t\tForecast_Period,\n\t\tValue,\n\t\tValidation_Error\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectInvalidFundAssetData\nTransactionValidFundAsset@InvalidFundAsset derive(Validation_Error = toString('Invalid Fund or Asset'),\n\t\tDerived_Fund = iif(isNull(Fund_ID),toString('Invalid'),Fund_ID),\n\t\tDerived_Asset = iif(isNull(Asset_ID),toString('Invalid'),Asset_ID)) ~> DerivedColumnValidationErrorFund\nConditionalSplitValidCPMCode@NotValidCPM derive(Validation_Error = toString('Invalid CPM Code')) ~> DerivedColumnValidationErrorGL\nDerivedColumnValidationErrorGL select(mapColumn(\n\t\tAsset_ID = Relation_Asset_ID,\n\t\tFund_ID = Relation_Fund_ID,\n\t\tForecast_Version,\n\t\tForecast_Period,\n\t\tValue,\n\t\tCPM_Code = ConditionalSplitValidCPMCode@NotValidCPM@CPM_Code,\n\t\tValidation_Error\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectInvalidCPMdata\nConditionalSplitValidCPMCode@ValidCPM select(mapColumn(\n\t\tAsset_ID = Relation_Asset_ID,\n\t\tFund_ID = Relation_Fund_ID,\n\t\tCPM_Code = ConditionalSplitValidCPMCode@ValidCPM@CPM_Code,\n\t\tForecast_Version,\n\t\tForecast_Period,\n\t\tValue\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectValidCPMdata\nSelectValidCPMdata, SelectNullVersion, SelectInvalidFundAssetData, SelectInvalidCPMdata union(byName: true)~> UnionAll\nUnpivotForecast split(not(isNull(Forecast_Version)),\n\tdisjoint: false) ~> CheckVersionNotNull@(CompleteVersionName, NullVersionName)\nCheckVersionNotNull@NullVersionName derive(Validation_Error = toString('No Version Name Provided')) ~> DerivedInvalidNullVersion\nDerivedInvalidNullVersion select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tCPM_Code,\n\t\tForecast_Version,\n\t\tForecast_Period,\n\t\tValue,\n\t\tValidation_Error\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectNullVersion\nLoadFromScrubbed unpivot(output(\n\t\tForecast_Period as date,\n\t\tValue as double\n\t),\n\tungroupBy(Asset_ID,\n\t\tFund_ID,\n\t\tCPM_Code,\n\t\tForecast_Version),\n\tlateral: false,\n\tignoreNullPivots: true) ~> UnpivotForecast\nUnionAll derive(Credit_Debit = iif(toDecimal(Value)<0, 'Cr', 'Dr'),\n\t\tType = 'Manual') ~> CreditDebitType\nCreditDebitType sink(input(\n\t\tPeriod_Date as string,\n\t\tFund_ID as string,\n\t\tAsset_ID as string,\n\t\tCPM_Code as string,\n\t\tAmount as decimal(25,10),\n\t\tDebit_Credit as string,\n\t\tForecast_Type as string,\n\t\tVersion_name as string,\n\t\tvalidation_error as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tPeriod_Date = Forecast_Period,\n\t\tFund_ID,\n\t\tAsset_ID,\n\t\tCPM_Code,\n\t\tAmount = Value,\n\t\tDebit_Credit = Credit_Debit,\n\t\tForecast_Type = Type,\n\t\tVersion_name = Forecast_Version,\n\t\tvalidation_error = Validation_Error\n\t)) ~> StagingDB"
		}
	}
}