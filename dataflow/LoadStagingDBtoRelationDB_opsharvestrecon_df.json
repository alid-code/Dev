{
	"name": "LoadStagingDBtoRelationDB_opsharvestrecon_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SQLstagingopsharvestrecon_ds",
						"type": "DatasetReference"
					},
					"name": "StagingDB"
				},
				{
					"dataset": {
						"referenceName": "SQLrelationopsharvestrecon_ds",
						"type": "DatasetReference"
					},
					"name": "Relationalincident"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLrelationopsharvestrecon_ds",
						"type": "DatasetReference"
					},
					"name": "UpserttRow"
				}
			],
			"transformations": [
				{
					"name": "SelectStagingData"
				},
				{
					"name": "AddAuditColumns"
				},
				{
					"name": "GenerateRelationalChecksum"
				},
				{
					"name": "SelectRelationalData"
				},
				{
					"name": "GenerateStagingChecksum"
				},
				{
					"name": "CompareKeys"
				},
				{
					"name": "UnionNewAndExisting"
				},
				{
					"name": "SelectNewRecordData"
				},
				{
					"name": "AlterRowUpsert"
				},
				{
					"name": "ConvertDatesAndID"
				},
				{
					"name": "NewAndExistingIncident"
				},
				{
					"name": "ChangedAddAuditData"
				},
				{
					"name": "SelectChangeRecord"
				}
			],
			"script": "parameters{\n\tProcessName as string,\n\tFileName as string,\n\tEtl_Utc_Tag as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingDB\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tHarvest_ID as integer,\n\t\tReporting_Period as date,\n\t\tHarvest_Unit as integer,\n\t\tOperation_Type_Code as string,\n\t\tProduct_Code as string,\n\t\tSpecies_Code as string,\n\t\tTotal_Net_Stocked_Area_of_Harvest_Unit as decimal(19,4),\n\t\tPredicted_Harvested_GMT as decimal(19,4),\n\t\tPredicted_Revenue as decimal(19,4),\n\t\tPredicted_Stumpage as decimal(19,4),\n\t\tActual_Harvest_Commencement as date,\n\t\tActual_Date_of_Reconcilation as date,\n\t\tActual_Harvested_Net_Stocked_Area as decimal(19,4),\n\t\tActual_Harvested_GMT as decimal(19,4),\n\t\tActual_Revenue as decimal(19,4),\n\t\tPredicted_SE_Ex_Managers_Fees_Levys as decimal(19,4),\n\t\tPredicted_SE_Cartage as decimal(19,4),\n\t\tPredicted_SE_Harvesting as decimal(19,4),\n\t\tPredicted_SE_Roading_Capex_Maintanence as decimal(19,4),\n\t\tPredicted_SE_Other as decimal(19,4),\n\t\tActual_SE_Managers_Fees_Levys as decimal(19,4),\n\t\tActual_SE_Cartage as decimal(19,4),\n\t\tActual_SE_Harvesting as decimal(19,4),\n\t\tActual_SE_Roading_Capex_Maintanence as decimal(19,4),\n\t\tActual_SE_Other as decimal(19,4),\n\t\tInsert_Datetime as timestamp,\n\t\tUpdate_Datetime as timestamp,\n\t\tProcess_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Relationalincident\nGenerateStagingChecksum select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tIncident_Id,\n\t\tReporting_Period,\n\t\tIncident_Type_Code,\n\t\tIncident_Severity,\n\t\tIncident_Description,\n\t\tInvestigation_Undertaken,\n\t\tIncident_Findings,\n\t\tIncident_Date,\n\t\tStagingChecksum\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectStagingData\nSelectNewRecordData derive(insert_datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tprocess_name = concatWS('_',$ProcessName,$FileName)) ~> AddAuditColumns\nRelationalincident derive(RelationalChecksum = sha2(256, Reporting_Period,Incident_Type_Code,Incident_Severity,Incident_Description,Investigation_Undertaken,Incident_Findings,Incident_Date)) ~> GenerateRelationalChecksum\nGenerateRelationalChecksum select(mapColumn(\n\t\tRelation_Asset_ID = Asset_ID,\n\t\tRelation_Fund_ID = Fund_ID,\n\t\tRelation_Incident_Id = Incident_Id,\n\t\tRelation_Insert_Datetime = Insert_Datetime,\n\t\tRelation_RelationalChecksum = RelationalChecksum\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelationalData\nConvertDatesAndID derive(StagingChecksum = sha2(256, Reporting_Period,Incident_Type_Code,Incident_Severity,Incident_Description,Investigation_Undertaken,Incident_Findings,Incident_Date)) ~> GenerateStagingChecksum\nSelectStagingData, SelectRelationalData lookup(Asset_ID == Relation_Asset_ID\n\t&& Fund_ID == Relation_Fund_ID\n\t&& Incident_Id == Relation_Incident_Id,\n\tmultiple: true,\n\tbroadcast: 'none')~> CompareKeys\nAddAuditColumns, SelectChangeRecord union(byName: true)~> UnionNewAndExisting\nNewAndExistingIncident@NewIncident select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tIncident_Id,\n\t\tReporting_Period,\n\t\tIncident_Type_Code,\n\t\tIncident_Severity,\n\t\tIncident_Description,\n\t\tInvestigation_Undertaken,\n\t\tIncident_Findings,\n\t\tIncident_Date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectNewRecordData\nUnionNewAndExisting alterRow(upsertIf(true())) ~> AlterRowUpsert\nStagingDB derive(Reporting_Period = toDate(Reporting_Period, \"dd/MM/yyyy\"),\n\t\tIncident_Date = toTimestamp(Incident_Date, \"dd/MM/yyyy\"),\n\t\tIncident_Id = toInteger(Incident_Id)) ~> ConvertDatesAndID\nCompareKeys split(isNull(Relation_RelationalChecksum),\n\tStagingChecksum != Relation_RelationalChecksum,\n\tdisjoint: false) ~> NewAndExistingIncident@(NewIncident, ChangedIncident, ExistingNoChange)\nNewAndExistingIncident@ChangedIncident derive(update_datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tprocess_name = concatWS('_',$ProcessName,$FileName)) ~> ChangedAddAuditData\nChangedAddAuditData select(mapColumn(\n\t\tAsset_ID = Relation_Asset_ID,\n\t\tFund_ID = Relation_Fund_ID,\n\t\tIncident_Id = Relation_Incident_Id,\n\t\tReporting_Period,\n\t\tIncident_Type_Code,\n\t\tIncident_Severity,\n\t\tIncident_Description,\n\t\tInvestigation_Undertaken,\n\t\tIncident_Findings,\n\t\tIncident_Date,\n\t\tinsert_datetime = Relation_Insert_Datetime,\n\t\tupdate_datetime,\n\t\tprocess_name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectChangeRecord\nAlterRowUpsert sink(input(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tHarvest_ID as integer,\n\t\tReporting_Period as date,\n\t\tHarvest_Unit as integer,\n\t\tOperation_Type_Code as string,\n\t\tProduct_Code as string,\n\t\tSpecies_Code as string,\n\t\tTotal_Net_Stocked_Area_of_Harvest_Unit as decimal(19,4),\n\t\tPredicted_Harvested_GMT as decimal(19,4),\n\t\tPredicted_Revenue as decimal(19,4),\n\t\tPredicted_Stumpage as decimal(19,4),\n\t\tActual_Harvest_Commencement as date,\n\t\tActual_Date_of_Reconcilation as date,\n\t\tActual_Harvested_Net_Stocked_Area as decimal(19,4),\n\t\tActual_Harvested_GMT as decimal(19,4),\n\t\tActual_Revenue as decimal(19,4),\n\t\tPredicted_SE_Ex_Managers_Fees_Levys as decimal(19,4),\n\t\tPredicted_SE_Cartage as decimal(19,4),\n\t\tPredicted_SE_Harvesting as decimal(19,4),\n\t\tPredicted_SE_Roading_Capex_Maintanence as decimal(19,4),\n\t\tPredicted_SE_Other as decimal(19,4),\n\t\tActual_SE_Managers_Fees_Levys as decimal(19,4),\n\t\tActual_SE_Cartage as decimal(19,4),\n\t\tActual_SE_Harvesting as decimal(19,4),\n\t\tActual_SE_Roading_Capex_Maintanence as decimal(19,4),\n\t\tActual_SE_Other as decimal(19,4),\n\t\tInsert_Datetime as timestamp,\n\t\tUpdate_Datetime as timestamp,\n\t\tProcess_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['Asset_ID','Fund_ID','Incident_Id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tIncident_Id,\n\t\tReporting_Period,\n\t\tIncident_Type_Code,\n\t\tIncident_Severity,\n\t\tIncident_Description,\n\t\tInvestigation_Undertaken,\n\t\tIncident_Findings,\n\t\tIncident_Date,\n\t\tInsert_Datetime = insert_datetime,\n\t\tUpdate_Datetime = update_datetime,\n\t\tProcess_Name = process_name\n\t)) ~> UpserttRow"
		}
	}
}