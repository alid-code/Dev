{
	"name": "LoadMktDimProduct_InsertUpdate_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CSVgenericWithParameter_ds",
						"type": "DatasetReference"
					},
					"name": "ReadSource"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGeneric_ds",
						"type": "DatasetReference"
					},
					"name": "DatamartDimProductLkp"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGeneric_ds",
						"type": "DatasetReference"
					},
					"name": "DatamartSpeciesLkp"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGeneric_ds",
						"type": "DatasetReference"
					},
					"name": "RelationalChartOfAccountLkp"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLtableGenericWithParam_ds",
						"type": "DatasetReference"
					},
					"name": "TargetDim"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGenericWithParam_ds",
						"type": "DatasetReference"
					},
					"name": "ErrorTable"
				}
			],
			"transformations": [
				{
					"name": "SelectDimProductLkp"
				},
				{
					"name": "DataTransformation"
				},
				{
					"name": "CheckDimensionRecordExist"
				},
				{
					"name": "AddAdditionalAudit"
				},
				{
					"name": "AlterRowInsertUpdate"
				},
				{
					"name": "CheckInputRecord"
				},
				{
					"name": "AddErrorDetail"
				},
				{
					"name": "RemoveBlankRow"
				},
				{
					"name": "GetNewOrModified"
				},
				{
					"name": "RemoveDuplicate"
				},
				{
					"name": "ReplaceNullToUndefined"
				},
				{
					"name": "SelectDimSpeciesLkp"
				},
				{
					"name": "SelectRelationalCoaLkp"
				}
			],
			"script": "parameters{\n\tGeneratedBatchDate as string,\n\tWorkbookName as string,\n\tWorksheetName as string,\n\tMasterPipelineName as string\n}\nsource(output(\n\t\tProduct_Code as string,\n\t\tProduct_Type as string,\n\t\tProduct_Global_Grade as string,\n\t\tProduct_Desc as string,\n\t\tGL_Code as string,\n\t\tSpecies_Code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> ReadSource\nsource(output(\n\t\tProduct_Code as string,\n\t\tProduct_Type as string,\n\t\tProduct_Global_Grade as string,\n\t\tProduct_Desc as string,\n\t\tGL_Code as string,\n\t\tSpecies_Code as string,\n\t\tInsert_DateTime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT \\n       [Product_Code]\\n      ,[Product_Type]\\n      ,[Product_Global_Grade]\\n      ,[Product_Desc]\\n      ,[GL_Code]\\n      ,[Species_Code]\\n      ,[Insert_DateTime]\\n  FROM [datamart].[Dim_Product]',\n\tformat: 'query') ~> DatamartDimProductLkp\nsource(output(\n\t\tSpecies_Code as string,\n\t\tSpecies as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT \\n       [Species_Code]\\n      ,[Species]\\n  FROM [datamart].[Dim_Species]',\n\tformat: 'query') ~> DatamartSpeciesLkp\nsource(output(\n\t\tGL_Code as string,\n\t\tGL_Desc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT \\n       [GL_Code]\\n      ,[GL_Desc]\\n  FROM [relational].[Chart_of_Account] \\n  WHERE GL_Code != \\'\\' \\n  AND [record_deleted_flag] = 0\\n  AND [end_datetime] = \\'9999-12-31 00:00:00.000\\'',\n\tformat: 'query') ~> RelationalChartOfAccountLkp\nDatamartDimProductLkp select(mapColumn(\n\t\tProduct_Code_Lkp = Product_Code,\n\t\tProduct_Type_Lkp = Product_Type,\n\t\tProduct_Global_Grade_Lkp = Product_Global_Grade,\n\t\tProduct_Desc_Lkp = Product_Desc,\n\t\tGL_Code_Lkp = GL_Code,\n\t\tSpecies_Code_Lkp = Species_Code,\n\t\tInsert_DateTime_Lkp = Insert_DateTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimProductLkp\nReadSource derive(Source_File = concat($WorkbookName,'-', $WorksheetName),\n\t\tBatch_ID = replace(replace(replace($GeneratedBatchDate, \"-\", \"\"),\":\",\"\"),\" \",\"\"),\n\t\tProcess_Name = $MasterPipelineName) ~> DataTransformation\nRemoveDuplicate, SelectDimProductLkp lookup(Species_Code == Species_Code_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> CheckDimensionRecordExist\nGetNewOrModified derive(InsertUpdateFlag = iif(isNull(Species_Code_Lkp), \"I\", \"U\"),\n\t\tInsert_DateTime = iif(isNull(Species_Code_Lkp), fromUTC(currentUTC(), 'Australia/Sydney'), Insert_DateTime_Lkp),\n\t\tUpdate_DateTime = iif(isNull(Species_Code_Lkp), toTimestamp(\"\"), fromUTC(currentUTC(), 'Australia/Sydney'))) ~> AddAdditionalAudit\nAddAdditionalAudit alterRow(insertIf(equals(InsertUpdateFlag,\"I\")),\n\tupdateIf(equals(InsertUpdateFlag,\"U\"))) ~> AlterRowInsertUpdate\nDataTransformation split(not(isNull(Species_Code)),\n\tdisjoint: false) ~> CheckInputRecord@(Valid, Invalid)\nRemoveBlankRow derive(Error_Desc = toString(\"Species Code cannot be empty\"),\n\t\tInsert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney')) ~> AddErrorDetail\nCheckInputRecord@Invalid filter(not(isNull(Species_Code)) || not(isNull(Species_Desc)) || not(isNull(Genus)) || not(isNull(Species_Group))) ~> RemoveBlankRow\nCheckDimensionRecordExist filter(isNull(Species_Code_Lkp) || notEquals(Species_Desc, Species_Lkp) || notEquals(Genus, Genus_Lkp) || notEquals(Species_Group, Species_Group_Lkp)) ~> GetNewOrModified\nReplaceNullToUndefined aggregate(groupBy(Species_Code,\n\t\tSpecies_Desc,\n\t\tGenus,\n\t\tSpecies_Group,\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name),\n\tDuplicateCount = count()) ~> RemoveDuplicate\nCheckInputRecord@Valid derive(Species_Desc = iifNull(Species_Desc, \"Undefined\"),\n\t\tGenus = iifNull(Genus, \"Undefined\"),\n\t\tSpecies_Group = iifNull(Species_Group, \"Undefined\")) ~> ReplaceNullToUndefined\nDatamartSpeciesLkp select(mapColumn(\n\t\tSpecies_Code_Lkp = Species_Code,\n\t\tSpecies_Lkp = Species\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimSpeciesLkp\nRelationalChartOfAccountLkp select(mapColumn(\n\t\tGL_Code_Lkp = GL_Code,\n\t\tGL_Desc_Lkp = GL_Desc\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelationalCoaLkp\nAlterRowInsertUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['Species_Code'],\n\tformat: 'table',\n\tmapColumn(\n\t\tSpecies_Code,\n\t\tSpecies = Species_Desc,\n\t\tGenus,\n\t\tSpecies_Group,\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name,\n\t\tInsert_DateTime,\n\t\tUpdate_DateTime\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TargetDim\nAddErrorDetail sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tSpecies_Code,\n\t\tSpecies = Species_Desc,\n\t\tGenus,\n\t\tSpecies_Group,\n\t\tSource_File,\n\t\tProcess_Name,\n\t\tError_Desc,\n\t\tInsert_Datetime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ErrorTable"
		}
	}
}