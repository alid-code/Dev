{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DWH-NonProd-ADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOpsWorkbookSubMaster_Set1_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Sub Master job to orchestrate multiple pipelines run. Each pipeline correspond to one tab in the Excel workbook.",
				"activities": [
					{
						"name": "LoadAndUpdateCertificates",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ProcessWorkbookCertifications",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabCertificates_spl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"Certifications": {
									"value": "@pipeline().parameters.Certifications",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ProcessWorkbookTabTimberSales",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractTimberSales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabTimberSales_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"TimberSales": {
									"value": "@pipeline().parameters.TimberSales",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								},
								"MasterPipeline": {
									"value": "@pipeline().parameters.MasterPipeline",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteCertificatesAuditTable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[audit].[DeleteAuditTable]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "OPS_Certification_Error",
										"type": "Expression"
									},
									"type": "String"
								},
								"WorkBookName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DeleteTimberSalesAuditTable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[audit].[DeleteAuditTable]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "OPS_Timber_Sales_Error",
										"type": "Expression"
									},
									"type": "String"
								},
								"WorkBookName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadTimberSales",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ProcessWorkbookTabTimberSales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabTimberSales_spl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"TimberSales": {
									"value": "@pipeline().parameters.TimberSales",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExtractCertifications",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DeleteCertificatesAuditTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Asset_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fund_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Reporting_Period",
											"physicalType": "String"
										},
										"sink": {
											"name": "Reporting_Period",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Certification_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Validation Flag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Validation_Flag"
										}
									},
									{
										"source": {
											"name": "Certification Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_Type"
										}
									},
									{
										"source": {
											"name": "Certification Number",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_Number"
										}
									},
									{
										"source": {
											"name": "Next Audit Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Next_Audit_Date"
										}
									},
									{
										"source": {
											"name": "Certifying Body",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certifying_Body"
										}
									},
									{
										"source": {
											"name": "Certification Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_Date"
										}
									},
									{
										"source": {
											"name": "Certification End Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_End_Date"
										}
									},
									{
										"source": {
											"name": "Certified Entity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certified_Entity"
										}
									},
									{
										"source": {
											"name": "Number of Open Minor CARS",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Number_of_Open_Minor_CARS"
										}
									},
									{
										"source": {
											"name": "Number of Open Major CARS",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Number_of_Open_Major_CARS"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@pipeline().parameters.Certifications",
										"type": "Expression"
									},
									"Range": {
										"value": "@pipeline().parameters.CertificationsRange",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference",
								"parameters": {
									"ParquetFile": {
										"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.Certifications,'_',pipeline().parameters.CurrentQuarterDate,'_Extract')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ProcessWorkbookCertifications",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractCertifications",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabCertificates_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"Certifications": {
									"value": "@pipeline().parameters.Certifications",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								},
								"MasterPipeline": {
									"value": "@pipeline().parameters.MasterPipeline",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExtractTimberSales",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DeleteTimberSalesAuditTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Asset_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fund_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Reporting_Period",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Validation Flag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Validation_Flag"
										}
									},
									{
										"source": {
											"name": "Customer",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Domestic or Export",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Domestic_or_Export"
										}
									},
									{
										"source": {
											"name": "Species",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Species",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Product Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product_Type"
										}
									},
									{
										"source": {
											"name": "Delivery Point",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Delivery_Point"
										}
									},
									{
										"source": {
											"name": "Price Point",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Price_Point"
										}
									},
									{
										"source": {
											"name": "Sales Unit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales_Unit"
										}
									},
									{
										"source": {
											"name": "Sales Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales_Quantity"
										}
									},
									{
										"source": {
											"name": "Average Sales Price",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Average_Sales_Price"
										}
									},
									{
										"source": {
											"name": "Sales Revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales_Revenue"
										}
									},
									{
										"source": {
											"name": "Production Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Production_Cost"
										}
									},
									{
										"source": {
											"name": "Stumpage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Stumpage",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Unit Stumpage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Unit_Stumpage"
										}
									},
									{
										"source": {
											"name": "Currency",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Currency",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Month",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Month",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Budget Sales Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Sales_Quantity"
										}
									},
									{
										"source": {
											"name": "Budget Sales Revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Sales_Revenue"
										}
									},
									{
										"source": {
											"name": "Budget Production Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Production_Cost"
										}
									},
									{
										"source": {
											"name": "Budget Unit Stumpage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Unit_Stumpage"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@pipeline().parameters.TimberSales",
										"type": "Expression"
									},
									"Range": {
										"value": "@pipeline().parameters.TimberSalesRange",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference",
								"parameters": {
									"ParquetFile": {
										"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.TimberSales,'_',pipeline().parameters.CurrentQuarterDate,'_Extract')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteHarvestReconciliation",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[audit].[DeleteAuditTable]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "OPS_Harvest_Reconciliation_Error",
										"type": "Expression"
									},
									"type": "String"
								},
								"WorkBookName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExtractOperations",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DeleteOperations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Validation Flag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Validation_Flag",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Operation Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Operation_Type",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Area Treated",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Area_Treated",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Cost of Treatment",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Cost_of_Treatment",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Average Unit Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Average_Unit_Cost",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Budget Area Treated",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Area_Treated",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Budget Treatment Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Treatment_Cost",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Budget Unit Cost ",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Unit_Cost ",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "variation Area Treated",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "variation_Area_Treated",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "variation Treatment Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "variation_Treatment_Cost",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "variation Unit Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "variation_Unit_Cost",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Date Last Age Class Established",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Date_Last_Age_Class_Established",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Species Survived",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Species_Survived",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Survival rate of last age class established",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Survival_rate_of_last_age_class_established",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@pipeline().parameters.Operations",
										"type": "Expression"
									},
									"Range": {
										"value": "@pipeline().parameters.OperationsRange",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference",
								"parameters": {
									"ParquetFile": {
										"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.Operations,'_',pipeline().parameters.CurrentQuarterDate,'_Extract')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteOperations",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[audit].[DeleteAuditTable]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "OPS_Operation_Error",
										"type": "Expression"
									},
									"type": "String"
								},
								"WorkBookName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ProcessWorkbookOperations",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractOperations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabOperations_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"Operations": {
									"value": "@pipeline().parameters.Operations",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								},
								"MasterPipeline": {
									"value": "@pipeline().parameters.MasterPipeline",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LoadOperation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ProcessWorkbookOperations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabOperations_spl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"Operations": {
									"value": "@pipeline().parameters.Operations",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExtractHarvestReconcilliation",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DeleteHarvestReconciliation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Validation Flag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Validation_Flag",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Harvest_Unit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Harvest_Unit",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Harvest Operation Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Harvest_Operation_Type",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Product",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Species",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Species",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Total Net Stocked Area of Harvest Unit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Total_Net_Stocked_Area_of_Harvest_Unit",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Actual Harvest Commencement",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual_Harvest_Commencement",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Predicted Harvested Volume",
											"physicalType": "String"
										},
										"sink": {
											"name": "Predicted_Harvested_GMT",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Predicted Revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Predicted_Revenue",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Predicted Stumpage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Predicted_Stumpage",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Predicted Sales Expense -  Fees, Levies etc",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Predicted_Sales_Expense_Fees_Levies_etc",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Predicted Sales Expense Cartage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Predicted_Sales_Expense_Cartage",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Predicted Sales Expense Harvesting",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Predicted_Sales_Expense_Harvesting",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Predicted Sales Expense Roading Capex Maintenance",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Predicted_Sales_Expense_Roading_Capex_Maintenance",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Predicted Sales Expense Other",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Predicted_Sales_Expense_Other",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Actual Date of Reconciliation",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual_Date_of_Reconciliation",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Actual Revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual_Revenue",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Actual Harvested Volume",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual_Harvested_GMT",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Actual Harvested Net Stocked Area",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual_Harvested_Net_Stocked_Area",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Actual Sales Expense Managers Fees Levies",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual_Sales_Expense_Managers_Fees_Levies",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Actual Sales Expense Cartage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual_Sales_Expense_Cartage",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Actual Sales Expense Harvesting",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual_Sales_Expense_Harvesting",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Actual Sales Expense Roading Capex Maintenance",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual_Sales_Expense_Roading_Capex_Maintenance",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Actual Sales Expense Other",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Actual_Sales_Expense_Other",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@pipeline().parameters.HarvestReconcilliation",
										"type": "Expression"
									},
									"Range": {
										"value": "@pipeline().parameters.HarvestReconcilliationRange",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference",
								"parameters": {
									"ParquetFile": {
										"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.HarvestReconcilliation,'_',pipeline().parameters.CurrentQuarterDate,'_Extract')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ProcessWorkbookHarvestReconcilliation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractHarvestReconcilliation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabHarvestReconcilliation_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"HarvestReconcilliation": {
									"value": "@pipeline().parameters.HarvestReconcilliation",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								},
								"MasterPipeline": {
									"value": "@pipeline().parameters.MasterPipeline",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LoadHarvestReconciliation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ProcessWorkbookHarvestReconcilliation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabHarvestReconcilliation_spl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteContracts",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[audit].[DeleteAuditTable]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "OPS_Contract_Error",
										"type": "Expression"
									},
									"type": "String"
								},
								"WorkBookName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExtractContracts",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DeleteContracts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Contract_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Contract_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Reporting Period",
											"physicalType": "String"
										},
										"sink": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Validation Flag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Validation_Flag",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Execution Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Execution_Date",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Termination Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Termination_Date",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Contracted Party Company Name",
											"physicalType": "String"
										},
										"sink": {
											"name": "Contracted_Party_Company_Name",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Estimated Maximum Contract Value over the course of the contract",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Estimated_Maximum_Contract_Value_over_the_course_of_the_contract",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Contract Currency",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Contract_Currency",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Type of goods or services",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Type_of_goods_or_services",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Executed By Entity 1",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Executed_By_Entity_1",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Executed By Entity 2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Executed_By_Entity_2",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Executed By Entity 3",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Executed_By_Entity_3",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@pipeline().parameters.Contracts",
										"type": "Expression"
									},
									"Range": {
										"value": "@pipeline().parameters.ContractsRange",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference",
								"parameters": {
									"ParquetFile": {
										"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.Contracts,'_',pipeline().parameters.CurrentQuarterDate,'_Extract')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ProcessWorkbookContracts",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractContracts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabContracts_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"Contracts": {
									"value": "@pipeline().parameters.Contracts",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								},
								"MasterPipeline": {
									"value": "@pipeline().parameters.MasterPipeline",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LoadAndUpdateContract",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ProcessWorkbookContracts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabContracts_spl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"Contracts": {
									"value": "@pipeline().parameters.Contracts",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteStrategicProjects",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[audit].[DeleteAuditTable]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "OPS_Strategic_Project_Error",
										"type": "Expression"
									},
									"type": "String"
								},
								"WorkBookName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExtractStrategicProjects",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DeleteStrategicProjects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Project_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Project_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Validation Flag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Validation_Flag",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Primary Management Activity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Primary_Management_Activity",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Project Objectives",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Project_Objectives",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Expected Value Impact",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Expected_Value_Impact",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Deliverable",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Deliverable",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Deliverable Project Weighting",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Deliverable_Project_Weighting",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Deliverable Expected Completion Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Deliverable_Expected_Completion_Date",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Deliverable Planned Completion Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Deliverable_Planned_Completion_Date",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Current Progress % Complete",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Current_Progress_Percent_Complete",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@pipeline().parameters.StrategicProjects",
										"type": "Expression"
									},
									"Range": {
										"value": "@pipeline().parameters.StrategicProjectsRange",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference",
								"parameters": {
									"ParquetFile": {
										"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.StrategicProjects,'_',pipeline().parameters.CurrentQuarterDate,'_Extract')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ProcessWorkbookStrategicProjects",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractStrategicProjects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabStrategicProjects_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"StrategicProjects": {
									"value": "@pipeline().parameters.StrategicProjects",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								},
								"MasterPipeline": {
									"value": "@pipeline().parameters.MasterPipeline",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LoadAndUpdateStrategicProjects",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ProcessWorkbookStrategicProjects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabStrategicProjects_spl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"StrategicProjects": {
									"value": "@pipeline().parameters.StrategicProjects",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExtractAnswers",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DeleteAnswers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "UID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Attribute",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Attribute",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Answer_Number",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Answer_Number",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Text_Response",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Text_Response",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Numeric_Response",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Numeric_Response",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@pipeline().parameters.Answers",
										"type": "Expression"
									},
									"Range": {
										"value": "@pipeline().parameters.AnswersRange",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference",
								"parameters": {
									"ParquetFile": {
										"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.Answers,'_',pipeline().parameters.CurrentQuarterDate,'_Extract')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ProcessOpsWorkbookAnswers",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractAnswers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabAnswers_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"Answers": {
									"value": "@pipeline().parameters.Answers",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								},
								"MasterPipeline": {
									"value": "@pipeline().parameters.MasterPipeline",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteAnswers",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[audit].[DeleteAuditTable]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "OPS_Answers_Error",
										"type": "Expression"
									},
									"type": "String"
								},
								"WorkBookName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadAnswers",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ProcessOpsWorkbookAnswers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabAnswers_spl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"Answers": {
									"value": "@pipeline().parameters.Answers",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "InsertWorkbookWorksheetAnswers",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadAnswers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[audit].[InsertAuditWorkbookWorksheetListTable]",
							"storedProcedureParameters": {
								"AssetID": {
									"value": {
										"value": "@pipeline().parameters.Asset_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"CurrentQuarterDate": {
									"value": {
										"value": "@pipeline().parameters.CurrentQuarterDate",
										"type": "Expression"
									},
									"type": "String"
								},
								"FundID": {
									"value": {
										"value": "@pipeline().parameters.Fund_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"Workbook": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								},
								"Worksheet": {
									"value": {
										"value": "@pipeline().parameters.Answers",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "InsertWorkbookWorksheetStrategicProjects",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadAndUpdateStrategicProjects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[audit].[InsertAuditWorkbookWorksheetListTable]",
							"storedProcedureParameters": {
								"AssetID": {
									"value": {
										"value": "@pipeline().parameters.Asset_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"CurrentQuarterDate": {
									"value": {
										"value": "@pipeline().parameters.CurrentQuarterDate",
										"type": "Expression"
									},
									"type": "String"
								},
								"FundID": {
									"value": {
										"value": "@pipeline().parameters.Fund_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"Workbook": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								},
								"Worksheet": {
									"value": {
										"value": "@pipeline().parameters.StrategicProjects",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "InsertWorkbookWorksheetCertifications",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadAndUpdateCertificates",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[audit].[InsertAuditWorkbookWorksheetListTable]",
							"storedProcedureParameters": {
								"AssetID": {
									"value": {
										"value": "@pipeline().parameters.Asset_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"CurrentQuarterDate": {
									"value": {
										"value": "@pipeline().parameters.CurrentQuarterDate",
										"type": "Expression"
									},
									"type": "String"
								},
								"FundID": {
									"value": {
										"value": "@pipeline().parameters.Fund_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"Workbook": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								},
								"Worksheet": {
									"value": {
										"value": "@pipeline().parameters.Certifications",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "InsertWorkbookWorksheetContracts",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadAndUpdateContract",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[audit].[InsertAuditWorkbookWorksheetListTable]",
							"storedProcedureParameters": {
								"AssetID": {
									"value": {
										"value": "@pipeline().parameters.Asset_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"CurrentQuarterDate": {
									"value": {
										"value": "@pipeline().parameters.CurrentQuarterDate",
										"type": "Expression"
									},
									"type": "String"
								},
								"FundID": {
									"value": {
										"value": "@pipeline().parameters.Fund_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"Workbook": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								},
								"Worksheet": {
									"value": {
										"value": "@pipeline().parameters.Contracts",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "InsertWorkbookWorksheetOperations",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadOperation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[audit].[InsertAuditWorkbookWorksheetListTable]",
							"storedProcedureParameters": {
								"AssetID": {
									"value": {
										"value": "@pipeline().parameters.Asset_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"CurrentQuarterDate": {
									"value": {
										"value": "@pipeline().parameters.CurrentQuarterDate",
										"type": "Expression"
									},
									"type": "String"
								},
								"FundID": {
									"value": {
										"value": "@pipeline().parameters.Fund_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"Workbook": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								},
								"Worksheet": {
									"value": {
										"value": "@pipeline().parameters.Operations",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "InsertWorkbookWorksheetHarvestRecon",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadHarvestReconciliation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[audit].[InsertAuditWorkbookWorksheetListTable]",
							"storedProcedureParameters": {
								"AssetID": {
									"value": {
										"value": "@pipeline().parameters.Asset_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"CurrentQuarterDate": {
									"value": {
										"value": "@pipeline().parameters.CurrentQuarterDate",
										"type": "Expression"
									},
									"type": "String"
								},
								"FundID": {
									"value": {
										"value": "@pipeline().parameters.Fund_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"Workbook": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								},
								"Worksheet": {
									"value": {
										"value": "@pipeline().parameters.HarvestReconcilliation",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "InsertWorkbookWorksheetTimberSales",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadTimberSales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[audit].[InsertAuditWorkbookWorksheetListTable]",
							"storedProcedureParameters": {
								"AssetID": {
									"value": {
										"value": "@pipeline().parameters.Asset_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"CurrentQuarterDate": {
									"value": {
										"value": "@pipeline().parameters.CurrentQuarterDate",
										"type": "Expression"
									},
									"type": "String"
								},
								"FundID": {
									"value": {
										"value": "@pipeline().parameters.Fund_ID",
										"type": "Expression"
									},
									"type": "String"
								},
								"Workbook": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								},
								"Worksheet": {
									"value": {
										"value": "@pipeline().parameters.TimberSales",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Shasta Cascade Timberlands Test FIle.xlsx"
					},
					"CurrentQuarterDate": {
						"type": "string",
						"defaultValue": "2020-06-30"
					},
					"OtherSales": {
						"type": "string",
						"defaultValue": "Other Sales"
					},
					"MajorSevereIncidents": {
						"type": "string",
						"defaultValue": "Major Severe Incidents"
					},
					"RiskOpportunityRegister": {
						"type": "string",
						"defaultValue": "Risk Opportunity Register"
					},
					"Certifications": {
						"type": "string",
						"defaultValue": "Certifications"
					},
					"RelatedPartyTransactions": {
						"type": "string",
						"defaultValue": "Related Party Transactions"
					},
					"TimberSales": {
						"type": "string",
						"defaultValue": "Timber Sales"
					},
					"HarvestReconcilliation": {
						"type": "string",
						"defaultValue": "Harvest Reconcilliation"
					},
					"Operations": {
						"type": "string",
						"defaultValue": "Operations"
					},
					"Contracts": {
						"type": "string",
						"defaultValue": "Contracts"
					},
					"StrategicProjects": {
						"type": "string",
						"defaultValue": "Strategic Projects"
					},
					"CurrentRunDateTime": {
						"type": "string",
						"defaultValue": "2020-08-01"
					},
					"MasterUtcTag": {
						"type": "string",
						"defaultValue": "2020-08-28T06:05:53.4181322Z"
					},
					"MasterPipeline": {
						"type": "string",
						"defaultValue": "ProcessOpsWorkbookMaster_pl"
					},
					"OtherSalesRange": {
						"type": "string"
					},
					"MajorSevereIncidentsRange": {
						"type": "string"
					},
					"RiskOpportunityRegisterRange": {
						"type": "string"
					},
					"CertificationsRange": {
						"type": "string",
						"defaultValue": "A8:N99999"
					},
					"RelatedPartyTransactionsRange": {
						"type": "string"
					},
					"TimberSalesRange": {
						"type": "string",
						"defaultValue": "A8:W99999"
					},
					"HarvestReconcilliationRange": {
						"type": "string",
						"defaultValue": "A8:AA9999"
					},
					"OperationsRange": {
						"type": "string",
						"defaultValue": "A8:Q9999"
					},
					"ContractsRange": {
						"type": "string",
						"defaultValue": "A8:N9999"
					},
					"StrategicProjectsRange": {
						"type": "string",
						"defaultValue": "A8:M9999"
					},
					"Answers": {
						"type": "string",
						"defaultValue": "Answers_DWH_Export"
					},
					"AnswersRange": {
						"type": "string",
						"defaultValue": "A1:H99999"
					},
					"Asset_ID": {
						"type": "string",
						"defaultValue": "MAN"
					},
					"Fund_ID": {
						"type": "string",
						"defaultValue": "SCT"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadXlsxMajorSevereIncidents_Step1_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference"
							},
							"name": "SourceDataTab"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "RelationalOpsIncidentType"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "RelationalIncident"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOps_ds",
								"type": "DatasetReference"
							},
							"name": "TargetPersistentParquetInsert"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "ErrorTable"
						},
						{
							"dataset": {
								"referenceName": "SQLauditopsworkbookworksheetlist_ds",
								"type": "DatasetReference"
							},
							"name": "OpsWorkbookWorksheetList"
						},
						{
							"dataset": {
								"referenceName": "ParquetPersistentOps_ds",
								"type": "DatasetReference"
							},
							"name": "TargetPersistenParquetUpdate"
						}
					],
					"transformations": [
						{
							"name": "ValidateMandatoryColumns",
							"description": "ReportingDateCertificationIDValidateMsg is a test and should be considered as part of the conditional split Insert/Update activity"
						},
						{
							"name": "SegregateValidInvalidRows"
						},
						{
							"name": "SelectedColumnsOutputInsert"
						},
						{
							"name": "ConcatenateInvalidColumnsMessage"
						},
						{
							"name": "SelectedOutputColumnsError"
						},
						{
							"name": "GenerateRowNumber"
						},
						{
							"name": "ExcludeFirstRow"
						},
						{
							"name": "AggregateSetUniqueWorksheetAsset"
						},
						{
							"name": "SelectWorksheetAsset"
						},
						{
							"name": "SelectUniqueWorksheetAsset"
						},
						{
							"name": "DateTypeTransform"
						},
						{
							"name": "SelectIncidentTypeLkp"
						},
						{
							"name": "LookupIncidentType"
						},
						{
							"name": "SplitInsertAndUpdate",
							"description": "1. The condition assume that the records from the current reporting period are deleted first if any (asset id, fund id, current reporting period)\n2. Records where reporting period equal current reporting period (disregard certification id) are inserted/reinserted after delete in 1\n3. Remaining records are not from current reporting period and the certification ids must not be null. These are updated"
						},
						{
							"name": "SelectColumnsOutputUpdate"
						},
						{
							"name": "UpdateDatetimeValue"
						},
						{
							"name": "SelectIncidentLkp"
						},
						{
							"name": "LookupIncidents"
						},
						{
							"name": "FilterBlankAssetAndFund"
						}
					],
					"script": "parameters{\n\tMasterUtcTag as string (\"2020-08-28T06:05:53.4181322Z\"),\n\tCurrentRunDateTime as string (\"2020-08-01\"),\n\tWorkbookName as string (\"Wenita Forestry Products Q4 FY20 V2.xlsx\"),\n\tTabName as string (\"Major Severe Incidents\"),\n\tCurrentQuarterDate as string (\"2020-06-30\"),\n\tMasterPipeline as string\n}\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as string,\n\t\tIncident_Id as string,\n\t\tValidation_Flag as string,\n\t\tIncident_Type as string,\n\t\tCategory as string,\n\t\tIncident_Severity as string,\n\t\tIncident_Description as string,\n\t\tInvestigation_Undertaken as string,\n\t\tIncident_Findings as string,\n\t\tIncident_Date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1)) ~> SourceDataTab\nsource(output(\n\t\tIncident_Type_Code as string,\n\t\tIncident_Type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT Incident_Type_Code\\n      ,Incident_Type\\n  FROM relational.OPS_Incident_Type\\n  WHERE Active_YN = \\'Y\\'',\n\tformat: 'query',\n\tpartitionBy('hash', 1)) ~> RelationalOpsIncidentType\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as date,\n\t\tIncident_ID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT Asset_ID\\n      ,Fund_ID\\n      ,Reporting_Period\\n      ,Incident_ID\\n  FROM relational.OPS_Incident',\n\tformat: 'query') ~> RelationalIncident\nLookupIncidentType derive(IncidentTypeValidateMsg = iif(isNull(Incident_Type_Code_Lkp), \"Incident Type Lookup Error/\", \"\"),\n\t\tAssetReportingDateValidateMsg = iif(isNull(Asset_ID) || isNull(Fund_ID) || isNull(Reporting_Period), \"Invalid Asset or Reporting Period/\", \"\"),\n\t\tIncidentDateValidateMsg = iif(isNull(Incident_Date), \"Blank Incident Date/\", \"\"),\n\t\tReportingDateIncidentIDValidateMsg = iif(iif(CurrentReportingPeriod != Reporting_Period, true(), false()) && isNull(Incident_Id),\"Null Incident ID for non-current Reporting Period/\",\"\"),\n\t\tLkpRelationalIncidentIDValidateMsg = iif(not(isNull(Incident_ID_Lkp)),iif(equals(concat(Asset_ID_Lkp,Fund_ID_Lkp), concat(Asset_ID,Fund_ID)),\"\",\"Incident ID not belong to Asset/\"),\"\")) ~> ValidateMandatoryColumns\nValidateMandatoryColumns split(length(concatWS('',AssetReportingDateValidateMsg,\r\nLkpRelationalIncidentIDValidateMsg,\r\nIncidentTypeValidateMsg,\r\nIncidentDateValidateMsg,\r\nReportingDateIncidentIDValidateMsg)) == 0 && equals(Validation_Flag, \"1\"),\n\tdisjoint: false) ~> SegregateValidInvalidRows@(ValidRows, InvalidRows)\nSplitInsertAndUpdate@Insert select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tIncident_Id,\n\t\tIncident_Type_Code = Incident_Type_Code_Lkp,\n\t\tIncident_Severity,\n\t\tIncident_Description,\n\t\tInvestigation_Undertaken,\n\t\tIncident_Findings,\n\t\tIncident_Date,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tWork_Book,\n\t\tWork_Sheet,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedColumnsOutputInsert\nSegregateValidInvalidRows@InvalidRows derive(ConcatenatedMessage = concat(IncidentTypeValidateMsg, IncidentDateValidateMsg,AssetReportingDateValidateMsg,ReportingDateIncidentIDValidateMsg,LkpRelationalIncidentIDValidateMsg)) ~> ConcatenateInvalidColumnsMessage\nConcatenateInvalidColumnsMessage select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tIncident_Id,\n\t\tIncident_Type,\n\t\tIncident_Severity,\n\t\tIncident_Description,\n\t\tInvestigation_Undertaken,\n\t\tIncident_Findings,\n\t\tIncident_Date,\n\t\tInsert_Datetime,\n\t\tSource_File = Work_Book,\n\t\tSource_Sub_File = Work_Sheet,\n\t\tProcess_Name,\n\t\tError_Desc = ConcatenatedMessage\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedOutputColumnsError\nDateTypeTransform keyGenerate(output(RowNumber as long),\n\tstartAt: 1L,\n\tpartitionBy('hash', 1)) ~> GenerateRowNumber\nGenerateRowNumber filter(RowNumber > 1 &&\r\n(not(isNull(Incident_Type)) || not(isNull(Incident_Severity)) ||\r\nnot(isNull(Incident_Description)) || not(isNull(Incident_Findings)) || not(isNull(Incident_Date))\r\n)) ~> ExcludeFirstRow\nSelectWorksheetAsset aggregate(groupBy(Asset_ID,\n\t\tFund_ID,\n\t\tWork_Book,\n\t\tWork_Sheet),\n\tAggCount = count()) ~> AggregateSetUniqueWorksheetAsset\nExcludeFirstRow select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tWork_Book,\n\t\tWork_Sheet\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectWorksheetAsset\nFilterBlankAssetAndFund select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tWork_Book,\n\t\tWork_Sheet\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUniqueWorksheetAsset\nSourceDataTab derive(Incident_Id = toInteger(Incident_Id),\n\t\tReporting_Period = toDate(Reporting_Period),\n\t\tIncident_Date = toDate(Incident_Date),\n\t\tInsert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tUpdate_Datetime = toTimestamp('9999-12-31 00:00:00'),\n\t\tWork_Book = $WorkbookName,\n\t\tWork_Sheet = $TabName,\n\t\tProcess_Name = concatWS('-',$MasterPipeline,$WorkbookName,$TabName),\n\t\tCurrentReportingPeriod = toDate($CurrentQuarterDate)) ~> DateTypeTransform\nRelationalOpsIncidentType select(mapColumn(\n\t\tIncident_Type_Code_Lkp = Incident_Type_Code,\n\t\tIncident_Type_Lkp = Incident_Type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIncidentTypeLkp\nLookupIncidents, SelectIncidentTypeLkp lookup(Incident_Type == Incident_Type_Lkp,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(Incident_Type_Code_Lkp, false),\n\tbroadcast: 'auto')~> LookupIncidentType\nSegregateValidInvalidRows@ValidRows split(equals(Reporting_Period, CurrentReportingPeriod),\n\tdisjoint: false) ~> SplitInsertAndUpdate@(Insert, Update)\nUpdateDatetimeValue select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tIncident_Id,\n\t\tIncident_Type_Code = Incident_Type_Code_Lkp,\n\t\tIncident_Severity,\n\t\tIncident_Description,\n\t\tInvestigation_Undertaken,\n\t\tIncident_Findings,\n\t\tIncident_Date,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tWork_Book,\n\t\tWork_Sheet,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumnsOutputUpdate\nSplitInsertAndUpdate@Update derive(Update_Datetime = fromUTC(currentUTC(), 'Australia/Sydney')) ~> UpdateDatetimeValue\nRelationalIncident select(mapColumn(\n\t\tAsset_ID_Lkp = Asset_ID,\n\t\tFund_ID_Lkp = Fund_ID,\n\t\tReporting_Period_Lkp = Reporting_Period,\n\t\tIncident_ID_Lkp = Incident_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectIncidentLkp\nExcludeFirstRow, SelectIncidentLkp lookup(Incident_Id == Incident_ID_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIncidents\nAggregateSetUniqueWorksheetAsset filter(not(isNull(Asset_ID)) && not(isNull(Fund_ID))) ~> FilterBlankAssetAndFund\nSelectedColumnsOutputInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concatWS(\"_\", $WorkbookName, $TabName,$CurrentQuarterDate,'LoadReady'))],\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tIncident_Id,\n\t\tIncident_Type_Code,\n\t\tIncident_Severity,\n\t\tIncident_Description,\n\t\tInvestigation_Undertaken,\n\t\tIncident_Findings,\n\t\tIncident_Date,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tWork_Book,\n\t\tWork_Sheet,\n\t\tProcess_Name\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TargetPersistentParquetInsert\nSelectedOutputColumnsError sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tIncident_Id,\n\t\tIncident_Type,\n\t\tIncident_Severity,\n\t\tIncident_Description,\n\t\tInvestigation_Undertaken,\n\t\tIncident_Findings,\n\t\tIncident_Date,\n\t\tInsert_Datetime,\n\t\tSource_File,\n\t\tSource_Sub_File,\n\t\tProcess_Name,\n\t\tError_Desc\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ErrorTable\nSelectUniqueWorksheetAsset sink(input(\n\t\tWork_Book as string,\n\t\tWork_Sheet as string,\n\t\tAsset_Id as string,\n\t\tFund_Id as string,\n\t\tCurrentQuarterDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tWork_Book,\n\t\tWork_Sheet,\n\t\tAsset_Id = Asset_ID,\n\t\tFund_Id = Fund_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OpsWorkbookWorksheetList\nSelectColumnsOutputUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concatWS(\"_\", $WorkbookName, $TabName,$CurrentQuarterDate,'Update'))],\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tIncident_Id,\n\t\tIncident_Type_Code,\n\t\tIncident_Severity,\n\t\tIncident_Description,\n\t\tInvestigation_Undertaken,\n\t\tIncident_Findings,\n\t\tIncident_Date,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tWork_Book,\n\t\tWork_Sheet,\n\t\tProcess_Name\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TargetPersistenParquetUpdate"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadXlsxOperations_Step1_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference"
							},
							"name": "SourceDataTab"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "RelationalOperationType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOps_ds",
								"type": "DatasetReference"
							},
							"name": "TargetPersistentParquetInsert"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "ErrorTable"
						}
					],
					"transformations": [
						{
							"name": "ValidateMandatoryColumns",
							"description": "ReportingDateCertificationIDValidateMsg is a test and should be considered as part of the conditional split Insert/Update activity"
						},
						{
							"name": "SegregateValidInvalidRows"
						},
						{
							"name": "SelectedColumnsOutputInsert"
						},
						{
							"name": "ConcatenateInvalidColumnsMessage"
						},
						{
							"name": "SelectedOutputColumnsError"
						},
						{
							"name": "GenerateRowNumber"
						},
						{
							"name": "ExcludeFirstRow"
						},
						{
							"name": "DateTypeTransform"
						},
						{
							"name": "SelectOperationTypeLkp"
						},
						{
							"name": "LookupOperationType"
						}
					],
					"script": "parameters{\n\tMasterUtcTag as string,\n\tCurrentRunDateTime as string,\n\tWorkbookName as string,\n\tTabName as string,\n\tCurrentQuarterDate as string,\n\tMasterPipeline as string\n}\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as string,\n\t\tValidation_Flag as string,\n\t\tOperation_Type as string,\n\t\tArea_Treated as string,\n\t\tCost_of_Treatment as string,\n\t\tAverage_Unit_Cost as string,\n\t\tBudget_Area_Treated as string,\n\t\tBudget_Treatment_Cost as string,\n\t\tBudget_Unit_Cost as string,\n\t\tvariation_Area_Treated as string,\n\t\tvariation_Treatment_Cost as string,\n\t\tvariation_Unit_Cost as string,\n\t\tDate_Last_Age_Class_Established as string,\n\t\tSpecies_Survived as string,\n\t\tSurvival_rate_of_last_age_class_established as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1)) ~> SourceDataTab\nsource(output(\n\t\tOperation_Type_Code as string,\n\t\tOperation_Type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT [Operation_Type_Code]\\n      ,[Operation_Type]\\n  FROM [relational].[OPS_Operation_Type]\\nWHERE [Active_YN] = \\'Y\\'',\n\tformat: 'query',\n\tpartitionBy('hash', 1)) ~> RelationalOperationType\nLookupOperationType derive(OperationTypeValidateMsg = iif(isNull(Operation_Type_Code_Lkp), \"Operation Type/\", \"\"),\n\t\tAreaTreatedValidateMsg = iif(not(isNull(Area_Treated)),iif(not(isNull(Area_Treated_toDecimal)),\"\",\"Area Treated/\"),\"Area Treated/\"),\n\t\tAssetReportingDateValidateMsg = iif(isNull(Asset_ID) || isNull(Fund_ID) || isNull(Reporting_Period), \"Invalid Asset or Reporting Period/\", \"\")) ~> ValidateMandatoryColumns\nValidateMandatoryColumns split(length(concatWS('',OperationTypeValidateMsg, AreaTreatedValidateMsg,AssetReportingDateValidateMsg)) == 0,\n\tdisjoint: false) ~> SegregateValidInvalidRows@(ValidRows, InvalidRows)\nSegregateValidInvalidRows@ValidRows select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tOperation_Type_Code = Operation_Type_Code_Lkp,\n\t\tArea_Treated = Area_Treated_toDecimal,\n\t\tTreatment_Cost = Cost_of_Treatment,\n\t\tUnit_Cost = Average_Unit_Cost,\n\t\tBudget_Area_Treated,\n\t\tBudget_Treatment_Cost,\n\t\tBudget_Unit_Cost,\n\t\tLast_Age_Class_Date = Date_Last_Age_Class_Established,\n\t\tSpecies_Survived,\n\t\tLast_Age_Class_Survival_Rate = Survival_rate_of_last_age_class_established,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedColumnsOutputInsert\nSegregateValidInvalidRows@InvalidRows derive(ConcatenatedMessage = concat(OperationTypeValidateMsg,AreaTreatedValidateMsg,AssetReportingDateValidateMsg)) ~> ConcatenateInvalidColumnsMessage\nConcatenateInvalidColumnsMessage select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tOperation_Type,\n\t\tArea_Treated,\n\t\tTreatment_Cost = Cost_of_Treatment,\n\t\tUnit_Cost = Average_Unit_Cost,\n\t\tBudget_Area_Treated,\n\t\tBudget_Treatment_Cost,\n\t\tBudget_Unit_Cost,\n\t\tLast_Age_Class_Date = Date_Last_Age_Class_Established,\n\t\tSpecies_Survived,\n\t\tLast_Age_Class_Survival_Rate = Survival_rate_of_last_age_class_established,\n\t\tInsert_Datetime,\n\t\tSource_File = Work_Book,\n\t\tSource_Sub_File = Work_Sheet,\n\t\tProcess_Name,\n\t\tError_Desc = ConcatenatedMessage\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedOutputColumnsError\nDateTypeTransform keyGenerate(output(RowNumber as long),\n\tstartAt: 1L,\n\tpartitionBy('hash', 1)) ~> GenerateRowNumber\nGenerateRowNumber filter(RowNumber > 1 && \r\n(not(isNull(Operation_Type)) || not(isNull(Area_Treated)) || not(isNull(Cost_of_Treatment)) || \r\nnot(isNull(Budget_Area_Treated)) || not(isNull(Budget_Treatment_Cost)) || not(isNull(Date_Last_Age_Class_Established)) || not(isNull(Species_Survived)) || not(isNull(Survival_rate_of_last_age_class_established))\r\n)) ~> ExcludeFirstRow\nSourceDataTab derive(Insert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tUpdate_Datetime = toTimestamp('9999-12-31 00:00:00'),\n\t\tWork_Book = $WorkbookName,\n\t\tWork_Sheet = $TabName,\n\t\tProcess_Name = concatWS('-',$MasterPipeline,$WorkbookName,$TabName),\n\t\tCurrentReportingPeriod = toDate($CurrentQuarterDate),\n\t\tReporting_Period = toDate(Reporting_Period),\n\t\tArea_Treated_toDecimal = toDecimal(Area_Treated, 19, 4),\n\t\tCost_of_Treatment = toDecimal(Cost_of_Treatment, 19, 4),\n\t\tAverage_Unit_Cost = toDecimal(Average_Unit_Cost, 19, 4),\n\t\tDate_Last_Age_Class_Established = toDate(Date_Last_Age_Class_Established),\n\t\tSurvival_rate_of_last_age_class_established = toDecimal(Survival_rate_of_last_age_class_established, 5, 2),\n\t\tBudget_Area_Treated = toDecimal(Budget_Area_Treated, 19, 4),\n\t\tBudget_Treatment_Cost = toDecimal(Budget_Treatment_Cost, 19, 4),\n\t\tBudget_Unit_Cost = toDecimal(Budget_Unit_Cost, 19, 4)) ~> DateTypeTransform\nRelationalOperationType select(mapColumn(\n\t\tOperation_Type_Code_Lkp = Operation_Type_Code,\n\t\tOperation_Type_Lkp = Operation_Type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectOperationTypeLkp\nExcludeFirstRow, SelectOperationTypeLkp lookup(Operation_Type == Operation_Type_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupOperationType\nSelectedColumnsOutputInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concatWS(\"_\", $WorkbookName, $TabName,$CurrentQuarterDate,'LoadReady'))],\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tOperation_Type_Code,\n\t\tArea_Treated,\n\t\tTreatment_Cost,\n\t\tUnit_Cost,\n\t\tBudget_Area_Treated,\n\t\tBudget_Treatment_Cost,\n\t\tBudget_Unit_Cost,\n\t\tLast_Age_Class_Date,\n\t\tSpecies_Survived,\n\t\tLast_Age_Class_Survival_Rate,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TargetPersistentParquetInsert\nSelectedOutputColumnsError sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tOperation_Type,\n\t\tArea_Treated,\n\t\tTreatment_Cost,\n\t\tUnit_Cost,\n\t\tBudget_Area_Treated,\n\t\tBudget_Treatment_Cost,\n\t\tBudget_Unit_Cost,\n\t\tLast_Age_Class_Date,\n\t\tSpecies_Survived,\n\t\tLast_Age_Class_Survival_Rate,\n\t\tInsert_Datetime,\n\t\tSource_File,\n\t\tSource_Sub_File,\n\t\tProcess_Name,\n\t\tError_Desc\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ErrorTable"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadXlsxOtherSales_Step1_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference"
							},
							"name": "SourceDataTab"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOps_ds",
								"type": "DatasetReference"
							},
							"name": "TargetPersistentParquetInsert"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "ErrorTable"
						}
					],
					"transformations": [
						{
							"name": "ValidateMandatoryColumns",
							"description": "ReportingDateCertificationIDValidateMsg is a test and should be considered as part of the conditional split Insert/Update activity"
						},
						{
							"name": "SegregateValidInvalidRows"
						},
						{
							"name": "SelectedColumnsOutputInsert"
						},
						{
							"name": "ConcatenateInvalidColumnsMessage"
						},
						{
							"name": "SelectedOutputColumnsError"
						},
						{
							"name": "GenerateRowNumber"
						},
						{
							"name": "ExcludeFirstRowandEmpty"
						},
						{
							"name": "DataTypeTransformations"
						}
					],
					"script": "parameters{\n\tMasterUtcTag as string,\n\tCurrentRunDateTime as string,\n\tWorkbookName as string,\n\tTabName as string,\n\tCurrentQuarterDate as string,\n\tMasterPipeline as string\n}\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as string,\n\t\tValidation_Flag as string,\n\t\tSales_Type as string,\n\t\tSales_UOM as string,\n\t\tSales_Point as string,\n\t\tTotal_Units_Sold as string,\n\t\tTotal_Revenue as string,\n\t\tTotal_Sales_Costs as string,\n\t\tTotal_Net_Revenue as string,\n\t\tSales_Net_Revenue_Per_Unit as string,\n\t\tCurrency_Code as string,\n\t\tBudget_Units_Sold as string,\n\t\tBudget_Sales_Revenue as string,\n\t\tBudget_Sales_Costs as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1)) ~> SourceDataTab\nExcludeFirstRowandEmpty derive(Sales_Type_Validate_Msg = iif(isNull(Sales_Type),'Sales Type/',''),\n\t\tTotal_Revenue_Validate_Msg = iif(isNull(Total_Revenue_toDecimal),'Total_Revenue/',''),\n\t\tAssetReportingDateValidateMsg = iif(isNull(Asset_ID) || isNull(Fund_ID) || isNull(Reporting_Period), \"Invalid Asset or Reporting Period/\", \"\")) ~> ValidateMandatoryColumns\nValidateMandatoryColumns split(length(concatWS('',Sales_Type_Validate_Msg,Total_Revenue_Validate_Msg,AssetReportingDateValidateMsg)) == 0,\n\tdisjoint: false) ~> SegregateValidInvalidRows@(ValidRows, InvalidRows)\nSegregateValidInvalidRows@ValidRows select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tSales_Type,\n\t\tSales_UOM,\n\t\tSales_Point,\n\t\tTotal_Units_Sold,\n\t\tSales_revenue = Total_Revenue_toDecimal,\n\t\tSales_Cost = Total_Sales_Costs,\n\t\tSales_Net_Revenue = Total_Net_Revenue,\n\t\tSales_Net_Revenue_Per_Unit,\n\t\tCurrency_Code,\n\t\tBudget_Sales_Quantity = Budget_Units_Sold,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Sales_Costs,\n\t\tInsert_Datetime,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedColumnsOutputInsert\nSegregateValidInvalidRows@InvalidRows derive(ConcatenatedMessage = concat(Sales_Type_Validate_Msg,Total_Revenue_Validate_Msg,AssetReportingDateValidateMsg)) ~> ConcatenateInvalidColumnsMessage\nConcatenateInvalidColumnsMessage select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tSales_Type,\n\t\tSales_UOM,\n\t\tSales_Point,\n\t\tTotal_Units_Sold,\n\t\tSales_revenue = Total_Revenue,\n\t\tSales_Cost = Total_Sales_Costs,\n\t\tSales_Net_Revenue = Total_Net_Revenue,\n\t\tSales_Net_Revenue_Per_Unit,\n\t\tCurrency_Code,\n\t\tBudget_Sales_Quantity = Budget_Units_Sold,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Sales_Costs,\n\t\tInsert_Datetime,\n\t\tSource_File = Work_Book,\n\t\tSource_Sub_File = Work_Sheet,\n\t\tProcess_Name,\n\t\tError_Desc = ConcatenatedMessage\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedOutputColumnsError\nDataTypeTransformations keyGenerate(output(RowNumber as long),\n\tstartAt: 1L,\n\tpartitionBy('hash', 1)) ~> GenerateRowNumber\nGenerateRowNumber filter(RowNumber > 1 && \r\n(not(isNull(Sales_Type)) || not(isNull(Sales_UOM)) || not(isNull(Sales_Point)) || \r\nnot(isNull(Total_Units_Sold)) || not(isNull(Total_Revenue)) || not(isNull(Total_Sales_Costs)) || \r\nnot(isNull(Currency_Code)) || not(isNull(Budget_Units_Sold)) || \r\nnot(isNull(Budget_Sales_Revenue)) || not(isNull(Budget_Sales_Costs))\r\n)) ~> ExcludeFirstRowandEmpty\nSourceDataTab derive(Reporting_Period = toDate(Reporting_Period),\n\t\tInsert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tWork_Book = $WorkbookName,\n\t\tWork_Sheet = $TabName,\n\t\tProcess_Name = concatWS('-',$MasterPipeline,$WorkbookName,$TabName),\n\t\tCurrentReportingPeriod = toDate($CurrentQuarterDate),\n\t\tTotal_Units_Sold = toDecimal(Total_Units_Sold,19,4),\n\t\tTotal_Revenue_toDecimal = toDecimal(Total_Revenue,19,4),\n\t\tTotal_Sales_Costs = toDecimal(Total_Sales_Costs,19,4),\n\t\tTotal_Net_Revenue = toDecimal(Total_Net_Revenue,19,4),\n\t\tSales_Net_Revenue_Per_Unit = toDecimal(Sales_Net_Revenue_Per_Unit,19,4),\n\t\tBudget_Units_Sold = toDecimal(Budget_Units_Sold,19,4),\n\t\tBudget_Sales_Revenue = toDecimal(Budget_Sales_Revenue,19,4),\n\t\tBudget_Sales_Costs = toDecimal(Budget_Sales_Costs,19,4)) ~> DataTypeTransformations\nSelectedColumnsOutputInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concatWS(\"_\", $WorkbookName, $TabName,$CurrentQuarterDate,'LoadReady'))],\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tSales_Type,\n\t\tSales_UOM,\n\t\tSales_Point,\n\t\tTotal_Units_Sold,\n\t\tSales_revenue,\n\t\tSales_Cost,\n\t\tSales_Net_Revenue,\n\t\tSales_Net_Revenue_Per_Unit,\n\t\tCurrency_Code,\n\t\tBudget_Sales_Quantity,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Sales_Costs,\n\t\tInsert_Datetime,\n\t\tProcess_Name\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TargetPersistentParquetInsert\nSelectedOutputColumnsError sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tSales_Type,\n\t\tSales_UOM,\n\t\tSales_Point,\n\t\tTotal_Units_Sold,\n\t\tSales_revenue,\n\t\tSales_Cost,\n\t\tSales_Net_Revenue,\n\t\tSales_Net_Revenue_Per_Unit,\n\t\tCurrency_Code,\n\t\tBudget_Sales_Quantity,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Sales_Costs,\n\t\tInsert_Datetime,\n\t\tSource_File,\n\t\tSource_Sub_File,\n\t\tProcess_Name,\n\t\tError_Desc\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ErrorTable"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadXlsxRelatedPartyTrans_Step1_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference"
							},
							"name": "SourceDataTab"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOps_ds",
								"type": "DatasetReference"
							},
							"name": "TargetPersistentParquetInsert"
						},
						{
							"dataset": {
								"referenceName": "SQLauditopserror_RelatedPartyTrans_ds",
								"type": "DatasetReference"
							},
							"name": "ErrorTable"
						},
						{
							"dataset": {
								"referenceName": "SQLauditopsworkbookworksheetlist_ds",
								"type": "DatasetReference"
							},
							"name": "OpsWorkbookWorksheetList"
						}
					],
					"transformations": [
						{
							"name": "ValidateMandatoryColumns",
							"description": "ReportingDateCertificationIDValidateMsg is a test and should be considered as part of the conditional split Insert/Update activity"
						},
						{
							"name": "SegregateValidInvalidRows"
						},
						{
							"name": "SelectedColumnsOutputInsert"
						},
						{
							"name": "ConcatenateInvalidColumnsMessage"
						},
						{
							"name": "SelectedOutputColumnsError"
						},
						{
							"name": "GenerateRowNumber"
						},
						{
							"name": "ExcludeFirstRow"
						},
						{
							"name": "AggregateSetUniqueWorksheetAsset"
						},
						{
							"name": "SelectWorksheetAsset"
						},
						{
							"name": "SelectUniqueWorksheetAsset"
						},
						{
							"name": "DateTypeTransform"
						}
					],
					"script": "parameters{\n\tMasterUtcTag as string,\n\tCurrentRunDateTime as string,\n\tWorkbookName as string,\n\tTabName as string,\n\tCurrentQuarterDate as string,\n\tMasterPipeline as string\n}\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as string,\n\t\tValidation_Flag as string,\n\t\tReporting_Period2 as string,\n\t\tTransaction_Date as string,\n\t\tRelated_Parties_Involved as string,\n\t\tTransaction_Description as string,\n\t\tTransaction_Size_Value as string,\n\t\tHow_Managed as string,\n\t\tHow_does_the_transaction_benefit_both_parties as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1)) ~> SourceDataTab\nExcludeFirstRow derive(AssetReportingDateValidateMsg = iif(isNull(Asset_ID) || isNull(Fund_ID) || isNull(Reporting_Period), \"Invalid Asset or Reporting Period/\", \"\")) ~> ValidateMandatoryColumns\nValidateMandatoryColumns split(length(concatWS('',AssetReportingDateValidateMsg)) == 0,\n\tdisjoint: false) ~> SegregateValidInvalidRows@(ValidRows, InvalidRows)\nSegregateValidInvalidRows@ValidRows select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tValidation_Flag,\n\t\tTransaction_Date,\n\t\tRelated_Parties_Involved,\n\t\tTransaction_Description,\n\t\tTransaction_Size_Value,\n\t\tHow_Managed,\n\t\tHow_does_the_transaction_benefit_both_parties,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tWork_Book,\n\t\tWork_Sheet,\n\t\tProcess_Name,\n\t\tCurrentReportingPeriod,\n\t\tRowNumber,\n\t\tAssetReportingDateValidateMsg\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedColumnsOutputInsert\nSegregateValidInvalidRows@InvalidRows derive(ConcatenatedMessage = concat(AssetReportingDateValidateMsg)) ~> ConcatenateInvalidColumnsMessage\nConcatenateInvalidColumnsMessage select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tTransaction_Date,\n\t\tRelated_Parties_Involved,\n\t\tTransaction_Description,\n\t\tTransaction_Size_Value,\n\t\tHow_Managed,\n\t\tHow_does_the_transaction_benefit_both_parties,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tWork_Book,\n\t\tWork_Sheet,\n\t\tProcess_Name,\n\t\tCurrentReportingPeriod,\n\t\tRowNumber,\n\t\tAssetReportingDateValidateMsg,\n\t\tConcatenatedMessage\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedOutputColumnsError\nDateTypeTransform keyGenerate(output(RowNumber as long),\n\tstartAt: 1L,\n\tpartitionBy('hash', 1)) ~> GenerateRowNumber\nGenerateRowNumber filter(RowNumber > 1 &&\r\n(not(isNull(Transaction_Date)) || not(isNull(Related_Parties_Involved)) || not(isNull(Transaction_Description)) ||\r\nnot(isNull(Transaction_Size_Value)) || not(isNull(How_Managed)) || not(isNull(How_does_the_transaction_benefit_both_parties))\r\n)) ~> ExcludeFirstRow\nSelectWorksheetAsset aggregate(groupBy(Asset_ID,\n\t\tFund_ID,\n\t\tWork_Book,\n\t\tWork_Sheet),\n\tAggCount = count()) ~> AggregateSetUniqueWorksheetAsset\nExcludeFirstRow select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tWork_Book,\n\t\tWork_Sheet\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectWorksheetAsset\nAggregateSetUniqueWorksheetAsset select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tWork_Book,\n\t\tWork_Sheet\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectUniqueWorksheetAsset\nSourceDataTab derive(Insert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tUpdate_Datetime = toTimestamp('9999-12-31 00:00:00'),\n\t\tWork_Book = $WorkbookName,\n\t\tWork_Sheet = $TabName,\n\t\tProcess_Name = concatWS('-',$MasterPipeline,$WorkbookName,$TabName),\n\t\tCurrentReportingPeriod = toDate($CurrentQuarterDate),\n\t\tReporting_Period = toDate(Reporting_Period),\n\t\tTransaction_Date = toDate(Transaction_Date),\n\t\tRelated_Parties_Involved = Related_Parties_Involved,\n\t\tTransaction_Description = Transaction_Description,\n\t\tTransaction_Size_Value = toDecimal(Transaction_Size_Value, 19, 4),\n\t\tHow_Managed = How_Managed,\n\t\tHow_does_the_transaction_benefit_both_parties = How_does_the_transaction_benefit_both_parties) ~> DateTypeTransform\nSelectedColumnsOutputInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concatWS(\"_\", $WorkbookName, $TabName,$CurrentQuarterDate,'LoadReady'))],\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tValidation_Flag,\n\t\tTransaction_Date,\n\t\tRelated_Parties_Involved,\n\t\tTransaction_Description,\n\t\tTransaction_Size_Value,\n\t\tHow_Managed,\n\t\tHow_does_the_transaction_benefit_both_parties,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tWork_Book,\n\t\tWork_Sheet,\n\t\tProcess_Name,\n\t\tCurrentReportingPeriod,\n\t\tRowNumber,\n\t\tAssetReportingDateValidateMsg\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TargetPersistentParquetInsert\nSelectedOutputColumnsError sink(input(\n\t\tError_ID as long,\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tTransaction_ID as integer,\n\t\tReporting_Period as date,\n\t\tTransaction_Date as date,\n\t\tRelated_Parties_Involved as string,\n\t\tTransaction_Description as string,\n\t\tTransaction_Size as decimal(19,4),\n\t\tHow_Managed as string,\n\t\tMutual_Benefit as string,\n\t\tInsert_Datetime as timestamp,\n\t\tProcess_Name as string,\n\t\tSource_File as string,\n\t\tSource_Sub_File as string,\n\t\tError_Desc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tTransaction_Date,\n\t\tRelated_Parties_Involved,\n\t\tTransaction_Description,\n\t\tTransaction_Size = Transaction_Size_Value,\n\t\tHow_Managed,\n\t\tMutual_Benefit = How_does_the_transaction_benefit_both_parties,\n\t\tInsert_Datetime,\n\t\tProcess_Name,\n\t\tSource_File = Work_Book,\n\t\tSource_Sub_File = Work_Sheet,\n\t\tError_Desc = AssetReportingDateValidateMsg\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ErrorTable\nSelectUniqueWorksheetAsset sink(input(\n\t\tWork_Book as string,\n\t\tWork_Sheet as string,\n\t\tAsset_Id as string,\n\t\tFund_Id as string,\n\t\tCurrentQuarterDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tWork_Book,\n\t\tWork_Sheet,\n\t\tAsset_Id = Asset_ID,\n\t\tFund_Id = Fund_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OpsWorkbookWorksheetList"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadXlsxRiskOps_Step1_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference"
							},
							"name": "SourceDataTab"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "RelationalRiskOpsRegister"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOps_ds",
								"type": "DatasetReference"
							},
							"name": "TargetPersistentParquetInsert"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "ErrorTable"
						},
						{
							"dataset": {
								"referenceName": "ParquetPersistentOps_ds",
								"type": "DatasetReference"
							},
							"name": "TargetPersistenParquetUpdate"
						}
					],
					"transformations": [
						{
							"name": "ValidateMandatoryColumns",
							"description": "ReportingDateCertificationIDValidateMsg is a test and should be considered as part of the conditional split Insert/Update activity"
						},
						{
							"name": "SegregateValidInvalidRows"
						},
						{
							"name": "SelectedColumnsOutputInsert"
						},
						{
							"name": "ConcatenateInvalidColumnsMessage"
						},
						{
							"name": "SelectedOutputColumnsError"
						},
						{
							"name": "GenerateRowNumber"
						},
						{
							"name": "ExcludeFirstRowandEmpty"
						},
						{
							"name": "DateTypeTransform"
						},
						{
							"name": "SplitInsertAndUpdate",
							"description": "1. The condition assume that the records from the current reporting period are deleted first if any (asset id, fund id, current reporting period)\n2. Records where reporting period equal current reporting period (disregard certification id) are inserted/reinserted after delete in 1\n3. Remaining records are not from current reporting period and the certification ids must not be null. These are updated"
						},
						{
							"name": "SelectColumnsOutputUpdate"
						},
						{
							"name": "UpdateDatetimeValue"
						},
						{
							"name": "LookupRiskOp"
						},
						{
							"name": "SelectRiskOpsLookup"
						}
					],
					"script": "parameters{\n\tMasterUtcTag as string,\n\tCurrentRunDateTime as string,\n\tWorkbookName as string,\n\tTabName as string,\n\tCurrentQuarterDate as string,\n\tMasterPipeline as string\n}\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as string,\n\t\tRisk_Opp_ID as string,\n\t\tValidation_Flag as string,\n\t\tRisk_Sub_Class as string,\n\t\tRisk_Class as string,\n\t\tRisk_Description as string,\n\t\tActions_and_Controls as string,\n\t\tDate_Lodged as string,\n\t\tLikelihood as string,\n\t\tSeverity as string,\n\t\tInherent_Risk_Rating as string,\n\t\tEliminate_or_Mitigate as string,\n\t\tResidual_Likelihood as string,\n\t\tResidual_Severity as string,\n\t\tResidual_Risk_Rating as string,\n\t\tFuture_Controls as string,\n\t\tPerson_Responsible as string,\n\t\tDate_Closed as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1)) ~> SourceDataTab\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as date,\n\t\tRisk_Ops_Sub_Class_Code as string,\n\t\tRisk_Ops_Descripton as string,\n\t\tActions_Controls as string,\n\t\tDate_Lodged as date,\n\t\tLikelihood as short,\n\t\tSeverity as short,\n\t\tInherent_Risk_Rating as short,\n\t\tEliminate_Mitigate as string,\n\t\tResidual_Likelihood as short,\n\t\tResidual_Severity as short,\n\t\tResidual_Risk_Rating as short,\n\t\tFuture_Controls as string,\n\t\tPerson_Responsible as string,\n\t\tDate_Closed as date,\n\t\tQuarterly_Incidents as integer,\n\t\tRisk_Opps_Flag as string,\n\t\tInsert_Datetime as timestamp,\n\t\tRisk_Opp_ID as integer,\n\t\tRisk_Opp_Class as string,\n\t\tRisk_Opp_Sub_Class as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT [Asset_ID]\\n      ,[Fund_ID]\\n      ,[Reporting_Period]\\n      ,[Risk_Ops_Sub_Class_Code]\\n      ,[Risk_Ops_Descripton]\\n      ,[Actions_Controls]\\n      ,[Date_Lodged]\\n      ,[Likelihood]\\n      ,[Severity]\\n      ,[Inherent_Risk_Rating]\\n      ,[Eliminate_Mitigate]\\n      ,[Residual_Likelihood]\\n      ,[Residual_Severity]\\n      ,[Residual_Risk_Rating]\\n      ,[Future_Controls]\\n      ,[Person_Responsible]\\n      ,[Date_Closed]\\n      ,[Quarterly_Incidents]\\n      ,[Risk_Opps_Flag]\\n      ,[Insert_Datetime]\\n      ,[Risk_Opp_ID]\\n      ,[Risk_Opp_Class]\\n      ,[Risk_Opp_Sub_Class]\\n  FROM [relational].[OPS_Risk_Opportunity_Register]',\n\tformat: 'query') ~> RelationalRiskOpsRegister\nLookupRiskOp derive(Risk_Class_Validate_Msg = iif(isNull(Risk_Class),'Risk Class/',''),\n\t\tDate_Lodged_Validate_Msg = iif(isNull(Date_Lodged_toDate),'Date Lodged/',''),\n\t\tAssetReportingDateValidateMsg = iif(isNull(Asset_ID) || isNull(Fund_ID) || isNull(Reporting_Period), \"Invalid Asset or Reporting Period/\", \"\"),\n\t\tReportingDateContractIDValidateMsg = iif(iif(CurrentReportingPeriod != Reporting_Period, true(), false()) && isNull(Risk_Opp_ID),\"Null Contract ID for non-current Reporting Period/\",\"\"),\n\t\tLkpRelationalContractIDValidateMsg = iif(not(isNull(Risk_Opp_ID_Lkp)),\r\niif(equals(concat(Asset_ID_Lkp,Fund_ID_Lkp), concat(Asset_ID,Fund_ID)),\"\",\"Contract ID not belong to Asset/\"),\"\")) ~> ValidateMandatoryColumns\nValidateMandatoryColumns split(length(concatWS('',Risk_Class_Validate_Msg,Date_Lodged_Validate_Msg,AssetReportingDateValidateMsg,ReportingDateContractIDValidateMsg,LkpRelationalContractIDValidateMsg)) == 0,\n\tdisjoint: false) ~> SegregateValidInvalidRows@(ValidRows, InvalidRows)\nSplitInsertAndUpdate@Insert select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tRisk_Opp_Sub_Class = Risk_Sub_Class,\n\t\tRisk_Opp_Class = Risk_Class,\n\t\tRisk_Ops_Descripton = Risk_Description,\n\t\tActions_Controls = Actions_and_Controls,\n\t\tDate_Lodged = Date_Lodged_toDate,\n\t\tLikelihood,\n\t\tSeverity,\n\t\tInherent_Risk_Rating,\n\t\tEliminate_Mitigate = Eliminate_or_Mitigate,\n\t\tResidual_Likelihood,\n\t\tResidual_Severity,\n\t\tResidual_Risk_Rating,\n\t\tFuture_Controls,\n\t\tPerson_Responsible,\n\t\tDate_Closed,\n\t\tInsert_Datetime,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedColumnsOutputInsert\nSegregateValidInvalidRows@InvalidRows derive(ConcatenatedMessage = concat(Risk_Class_Validate_Msg,Date_Lodged_Validate_Msg,AssetReportingDateValidateMsg,ReportingDateContractIDValidateMsg,LkpRelationalContractIDValidateMsg)) ~> ConcatenateInvalidColumnsMessage\nConcatenateInvalidColumnsMessage select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tRisk_Opp_ID,\n\t\tRisk_Ops_Sub_Class = Risk_Sub_Class,\n\t\tRisk_Opp_Class = Risk_Class,\n\t\tRisk_Ops_Descripton = Risk_Description,\n\t\tActions_Controls = Actions_and_Controls,\n\t\tDate_Lodged,\n\t\tLikelihood,\n\t\tSeverity,\n\t\tInherent_Risk_Rating,\n\t\tEliminate_Mitigate = Eliminate_or_Mitigate,\n\t\tResidual_Likelihood,\n\t\tResidual_Severity,\n\t\tResidual_Risk_Rating,\n\t\tFuture_Controls,\n\t\tPerson_Responsible,\n\t\tDate_Closed,\n\t\tInsert_Datetime,\n\t\tSource_File = Work_Book,\n\t\tSource_Sub_File = Work_Sheet,\n\t\tProcess_Name,\n\t\tError_Desc = ConcatenatedMessage\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedOutputColumnsError\nDateTypeTransform keyGenerate(output(RowNumber as long),\n\tstartAt: 1L,\n\tpartitionBy('hash', 1)) ~> GenerateRowNumber\nGenerateRowNumber filter(RowNumber > 1 && \r\n(not(isNull(Risk_Sub_Class)) || not(isNull(Risk_Class)) || \r\nnot(isNull(Risk_Description)) || not(isNull(Actions_and_Controls)) || not(isNull(Date_Lodged)) || \r\nnot(isNull(Likelihood)) || not(isNull(Severity)) || not(isNull(Inherent_Risk_Rating)) || not(isNull(Eliminate_or_Mitigate)) || \r\nnot(isNull(Residual_Likelihood)) || not(isNull(Residual_Severity)) || not(isNull(Residual_Risk_Rating)) || \r\nnot(isNull(Future_Controls)) || not(isNull(Person_Responsible)) || not(isNull(Date_Closed))\r\n)) ~> ExcludeFirstRowandEmpty\nSourceDataTab derive(Risk_Opp_ID = toInteger(Risk_Opp_ID),\n\t\tReporting_Period = toDate(Reporting_Period),\n\t\tLikelihood = toShort(Likelihood),\n\t\tSeverity = toShort(Severity),\n\t\tInherent_Risk_Rating = toShort(Inherent_Risk_Rating),\n\t\tResidual_Likelihood = toShort(Residual_Likelihood),\n\t\tResidual_Severity = toShort(Residual_Severity),\n\t\tResidual_Risk_Rating = toShort(Residual_Risk_Rating),\n\t\tDate_Closed = toDate(Date_Closed),\n\t\tDate_Lodged_toDate = toDate(Date_Lodged),\n\t\tInsert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tUpdate_Datetime = toTimestamp('9999-12-31 00:00:00'),\n\t\tWork_Book = $WorkbookName,\n\t\tWork_Sheet = $TabName,\n\t\tProcess_Name = concatWS('-',$MasterPipeline,$WorkbookName,$TabName),\n\t\tCurrentReportingPeriod = toDate($CurrentQuarterDate)) ~> DateTypeTransform\nSegregateValidInvalidRows@ValidRows split(equals(Reporting_Period, CurrentReportingPeriod),\n\tdisjoint: false) ~> SplitInsertAndUpdate@(Insert, Update)\nUpdateDatetimeValue select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tRisk_Opp_ID,\n\t\tRisk_Opp_Sub_Class = Risk_Sub_Class,\n\t\tRisk_Opp_Class = Risk_Class,\n\t\tRisk_Ops_Descripton = Risk_Description,\n\t\tActions_Controls = Actions_and_Controls,\n\t\tDate_Lodged = Date_Lodged_toDate,\n\t\tLikelihood,\n\t\tSeverity,\n\t\tInherent_Risk_Rating,\n\t\tEliminate_Mitigate = Eliminate_or_Mitigate,\n\t\tResidual_Likelihood,\n\t\tResidual_Severity,\n\t\tResidual_Risk_Rating,\n\t\tFuture_Controls,\n\t\tPerson_Responsible,\n\t\tDate_Closed,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumnsOutputUpdate\nSplitInsertAndUpdate@Update derive(Update_Datetime = fromUTC(currentUTC(), 'Australia/Sydney')) ~> UpdateDatetimeValue\nExcludeFirstRowandEmpty, SelectRiskOpsLookup lookup(Risk_Opp_ID == Risk_Opp_ID_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRiskOp\nRelationalRiskOpsRegister select(mapColumn(\n\t\tAsset_ID_Lkp = Asset_ID,\n\t\tFund_ID_Lkp = Fund_ID,\n\t\tReporting_Period_Lkp = Reporting_Period,\n\t\tRisk_Ops_Sub_Class_Code_Lkp = Risk_Ops_Sub_Class_Code,\n\t\tRisk_Ops_Descripton_Lkp = Risk_Ops_Descripton,\n\t\tActions_Controls_Lkp = Actions_Controls,\n\t\tDate_Lodged_Lkp = Date_Lodged,\n\t\tLikelihood_Lkp = Likelihood,\n\t\tSeverity_Lkp = Severity,\n\t\tInherent_Risk_Rating_Lkp = Inherent_Risk_Rating,\n\t\tEliminate_Mitigate_Lkp = Eliminate_Mitigate,\n\t\tResidual_Likelihood_Lkp = Residual_Likelihood,\n\t\tResidual_Severity_Lkp = Residual_Severity,\n\t\tResidual_Risk_Rating_Lkp = Residual_Risk_Rating,\n\t\tFuture_Controls_Lkp = Future_Controls,\n\t\tPerson_Responsible_Lkp = Person_Responsible,\n\t\tDate_Closed_Lkp = Date_Closed,\n\t\tQuarterly_Incidents_Lkp = Quarterly_Incidents,\n\t\tRisk_Opps_Flag_Lkp = Risk_Opps_Flag,\n\t\tInsert_Datetime_Lkp = Insert_Datetime,\n\t\tRisk_Opp_ID_Lkp = Risk_Opp_ID,\n\t\tRisk_Opp_Class_Lkp = Risk_Opp_Class,\n\t\tRisk_Opp_Sub_Class_Lkp = Risk_Opp_Sub_Class\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRiskOpsLookup\nSelectedColumnsOutputInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concatWS(\"_\", $WorkbookName, $TabName,$CurrentQuarterDate,'LoadReady'))],\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tRisk_Opp_Sub_Class,\n\t\tRisk_Opp_Class,\n\t\tRisk_Ops_Descripton,\n\t\tActions_Controls,\n\t\tDate_Lodged,\n\t\tLikelihood,\n\t\tSeverity,\n\t\tInherent_Risk_Rating,\n\t\tEliminate_Mitigate,\n\t\tResidual_Likelihood,\n\t\tResidual_Severity,\n\t\tResidual_Risk_Rating,\n\t\tFuture_Controls,\n\t\tPerson_Responsible,\n\t\tDate_Closed,\n\t\tInsert_Datetime,\n\t\tProcess_Name\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TargetPersistentParquetInsert\nSelectedOutputColumnsError sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tRisk_Opp_ID,\n\t\tRisk_Ops_Sub_Class,\n\t\tRisk_Opp_Class,\n\t\tRisk_Ops_Descripton,\n\t\tActions_Controls,\n\t\tDate_Lodged,\n\t\tLikelihood,\n\t\tSeverity,\n\t\tInherent_Risk_Rating,\n\t\tEliminate_Mitigate,\n\t\tResidual_Likelihood,\n\t\tResidual_Severity,\n\t\tResidual_Risk_Rating,\n\t\tFuture_Controls,\n\t\tPerson_Responsible,\n\t\tDate_Closed,\n\t\tInsert_Datetime,\n\t\tSource_File,\n\t\tSource_Sub_File,\n\t\tProcess_Name,\n\t\tError_Desc\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ErrorTable\nSelectColumnsOutputUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concatWS(\"_\", $WorkbookName, $TabName,$CurrentQuarterDate,'Update'))],\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tRisk_Opp_ID,\n\t\tRisk_Opp_Sub_Class,\n\t\tRisk_Opp_Class,\n\t\tRisk_Ops_Descripton,\n\t\tActions_Controls,\n\t\tDate_Lodged,\n\t\tLikelihood,\n\t\tSeverity,\n\t\tInherent_Risk_Rating,\n\t\tEliminate_Mitigate,\n\t\tResidual_Likelihood,\n\t\tResidual_Severity,\n\t\tResidual_Risk_Rating,\n\t\tFuture_Controls,\n\t\tPerson_Responsible,\n\t\tDate_Closed,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TargetPersistenParquetUpdate"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadXlsxTimberSales_Step1_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference"
							},
							"name": "SourceDataTab"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "RelationalSpeciesType"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "RelationalSalesUnit"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "RelationalDeliveryPoint"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOps_ds",
								"type": "DatasetReference"
							},
							"name": "TargetPersistentParquetInsert"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "ErrorTable"
						}
					],
					"transformations": [
						{
							"name": "ValidateMandatoryColumns",
							"description": "ReportingDateCertificationIDValidateMsg is a test and should be considered as part of the conditional split Insert/Update activity"
						},
						{
							"name": "SegregateValidInvalidRows"
						},
						{
							"name": "SelectedColumnsOutputInsert"
						},
						{
							"name": "ConcatenateInvalidColumnsMessage"
						},
						{
							"name": "SelectedOutputColumnsError"
						},
						{
							"name": "GenerateRowNumber"
						},
						{
							"name": "ExcludeFirstRow"
						},
						{
							"name": "DateTypeTransform"
						},
						{
							"name": "SelectSpeciesTypeLkp"
						},
						{
							"name": "LookupSpeciesType"
						},
						{
							"name": "SelectSalesUnitLkp"
						},
						{
							"name": "LookupSalesUnit"
						},
						{
							"name": "SelectPricePointLkp"
						},
						{
							"name": "LookupPricePointFromDeliveryPoint"
						}
					],
					"script": "parameters{\n\tMasterUtcTag as string,\n\tCurrentRunDateTime as string,\n\tWorkbookName as string,\n\tTabName as string,\n\tCurrentQuarterDate as string,\n\tMasterPipeline as string\n}\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as string,\n\t\tValidation_Flag as string,\n\t\tCustomer as string,\n\t\tDomestic_or_Export as string,\n\t\tSpecies as string,\n\t\tProduct_Type as string,\n\t\tDelivery_Point as string,\n\t\tPrice_Point as string,\n\t\tSales_Unit as string,\n\t\tSales_Quantity as string,\n\t\tAverage_Sales_Price as string,\n\t\tSales_Revenue as string,\n\t\tProduction_Cost as string,\n\t\tStumpage as string,\n\t\tUnit_Stumpage as string,\n\t\tCurrency as string,\n\t\tMonth as string,\n\t\tBudget_Sales_Quantity as string,\n\t\tBudget_Sales_Revenue as string,\n\t\tBudget_Production_Cost as string,\n\t\tBudget_Unit_Stumpage as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1)) ~> SourceDataTab\nsource(output(\n\t\tSpecies_Code as string,\n\t\tSpecies as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT [Species_Code]\\n      ,[Species]\\n  FROM [relational].[OPS_Species_Type]\\n  WHERE [Active_YN] = \\'Y\\'',\n\tformat: 'query',\n\tpartitionBy('hash', 1)) ~> RelationalSpeciesType\nsource(output(\n\t\tSales_Unit_Code as string,\n\t\tSales_Unit as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT Sales_Unit_Code\\n      ,Sales_Unit\\n  FROM relational.OPS_Sales_Unit\\n  WHERE Active_YN = \\'Y\\'',\n\tformat: 'query') ~> RelationalSalesUnit\nsource(output(\n\t\tPrice_Point_Code as string,\n\t\tPrice_Point as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT Price_Point_Code\\n      ,Price_Point\\n  FROM relational.OPS_Price_Point\\n  WHERE Active_YN = \\'Y\\'',\n\tformat: 'query') ~> RelationalDeliveryPoint\nLookupPricePointFromDeliveryPoint derive(SpeciesTypeValidateMsg = iif(isNull(Species_Code_Lkp), \"Species/\", \"\"),\n\t\tSalesUnitValidateMsg = iif(isNull(Sales_Unit_Code_Lkp), \"Sales Unit/\", \"\"),\n\t\tAssetReportingDateValidateMsg = iif(isNull(Asset_ID) || isNull(Fund_ID) || isNull(Reporting_Period), \"Invalid Asset or Reporting Period/\", \"\"),\n\t\tDeliveryPointValidateMsg = iif(isNull(Price_Point_Code_Lkp), \"Delivery Point/\", \"\"),\n\t\tCustomerValidateMsg = iif(isNull(Customer),\"Customer/\",\"\"),\n\t\tDomesticExportValidateMsg = iif(isNull(Domestic_or_Export),\"Domestic or Export/\",\"\"),\n\t\tPricePointValidateMsg = iif(isNull(Delivery_Point),\"Price Point/\",\"\"),\n\t\tSalesQtyValidateMsg = iif(isNull(Sales_Quantity),\"Sales Quantity/\",\"\"),\n\t\tProductTypeValidateMsg = iif(isNull(Product_Type),\"Product Type/\",\"\")) ~> ValidateMandatoryColumns\nValidateMandatoryColumns split(length(concatWS('',SpeciesTypeValidateMsg,\r\nSalesUnitValidateMsg,\r\nAssetReportingDateValidateMsg,\r\nDeliveryPointValidateMsg,\r\nCustomerValidateMsg,\r\nDomesticExportValidateMsg,\r\nPricePointValidateMsg,\r\nSalesQtyValidateMsg,\r\nProductTypeValidateMsg)) == 0,\n\tdisjoint: false) ~> SegregateValidInvalidRows@(ValidRows, InvalidRows)\nSegregateValidInvalidRows@ValidRows select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tCustomer,\n\t\tDomestic_Export = Domestic_or_Export,\n\t\tProduct = Product_Type,\n\t\tDelivery_Point_Code = Delivery_Point,\n\t\tPrice_Point,\n\t\tSales_Quantity,\n\t\tAverage_Sales_Price,\n\t\tSales_Revenue,\n\t\tProduction_Cost,\n\t\tStumpage,\n\t\tUnit_Stumpage,\n\t\tCurrency_Code = Currency,\n\t\tSales_Month = Month,\n\t\tBudget_Sales_Quantity,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Production_Cost,\n\t\tBudget_Stumpage = Budget_Unit_Stumpage,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name,\n\t\tSales_Unit_Code = Sales_Unit_Code_Lkp,\n\t\tSpecies_Code = Species_Code_Lkp\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedColumnsOutputInsert\nSegregateValidInvalidRows@InvalidRows derive(ConcatenatedMessage = concat(SpeciesTypeValidateMsg,\r\nSalesUnitValidateMsg,\r\nAssetReportingDateValidateMsg,\r\nDeliveryPointValidateMsg,\r\nCustomerValidateMsg,\r\nDomesticExportValidateMsg,\r\nPricePointValidateMsg,\r\nSalesQtyValidateMsg,\r\nProductTypeValidateMsg)) ~> ConcatenateInvalidColumnsMessage\nConcatenateInvalidColumnsMessage select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tValidation_Flag,\n\t\tCustomer,\n\t\tDomestic_Export = Domestic_or_Export,\n\t\tSpecies,\n\t\tProduct = Product_Type,\n\t\tDelivery_Point_Code = Delivery_Point,\n\t\tPrice_Point,\n\t\tSales_Unit,\n\t\tSales_Quantity,\n\t\tAverage_Sales_Price,\n\t\tSales_Revenue,\n\t\tProduction_Cost,\n\t\tStumpage,\n\t\tUnit_Stumpage,\n\t\tCurrency_Code = Currency,\n\t\tSales_Month = Month,\n\t\tBudget_Sales_Quantity,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Production_Cost,\n\t\tBudget_Stumpage = Budget_Unit_Stumpage,\n\t\tInsert_Datetime,\n\t\tSource_File = Work_Book,\n\t\tSource_Sub_File = Work_Sheet,\n\t\tProcess_Name,\n\t\tError_Desc = ConcatenatedMessage\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedOutputColumnsError\nDateTypeTransform keyGenerate(output(RowNumber as long),\n\tstartAt: 1L,\n\tpartitionBy('hash', 1)) ~> GenerateRowNumber\nGenerateRowNumber filter(RowNumber > 1 && \r\n(not(isNull(Customer)) || not(isNull(Domestic_or_Export)) || not(isNull(Species)) || \r\nnot(isNull(Product_Type)) || not(isNull(Delivery_Point)) || not(isNull(Price_Point)) || \r\nnot(isNull(Sales_Unit)) || not(isNull(Sales_Quantity)) || not(isNull(Average_Sales_Price)) ||\r\nnot(isNull(Production_Cost)) || not(isNull(Currency)) || \r\nnot(isNull(Month)) || not(isNull(Budget_Sales_Quantity)) || not(isNull(Budget_Sales_Revenue)) || not(isNull(Budget_Production_Cost)) || \r\nnot(isNull(Budget_Unit_Stumpage))\r\n)) ~> ExcludeFirstRow\nSourceDataTab derive(Insert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tUpdate_Datetime = toTimestamp('9999-12-31 00:00:00'),\n\t\tWork_Book = $WorkbookName,\n\t\tWork_Sheet = $TabName,\n\t\tProcess_Name = concatWS('-',$MasterPipeline,$WorkbookName,$TabName),\n\t\tCurrentReportingPeriod = toDate($CurrentQuarterDate),\n\t\tReporting_Period = toDate(Reporting_Period),\n\t\tSales_Quantity = toDecimal(Sales_Quantity, 19, 4),\n\t\tSales_Revenue = toDecimal(Sales_Revenue, 19, 4),\n\t\tProduction_Cost = toDecimal(Production_Cost, 19, 4),\n\t\tStumpage = toDecimal(Stumpage, 19, 4),\n\t\tUnit_Stumpage = toDecimal(Unit_Stumpage, 19, 4),\n\t\tAverage_Sales_Price = toDecimal(Average_Sales_Price, 19, 4),\n\t\tBudget_Sales_Quantity = toDecimal(Budget_Sales_Quantity, 19, 4),\n\t\tBudget_Sales_Revenue = toDecimal(Budget_Sales_Revenue, 19, 4),\n\t\tBudget_Production_Cost = toDecimal(Budget_Production_Cost, 19, 4),\n\t\tBudget_Unit_Stumpage = toDecimal(Budget_Unit_Stumpage, 19, 4),\n\t\tPrice_Point = toDecimal(Price_Point, 19, 4),\n\t\tMonth = toDate(Month)) ~> DateTypeTransform\nRelationalSpeciesType select(mapColumn(\n\t\tSpecies_Code_Lkp = Species_Code,\n\t\tSpecies_Lkp = Species\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSpeciesTypeLkp\nLookupSalesUnit, SelectSpeciesTypeLkp lookup(Species == Species_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSpeciesType\nRelationalSalesUnit select(mapColumn(\n\t\tSales_Unit_Code_Lkp = Sales_Unit_Code,\n\t\tSales_Unit_Lkp = Sales_Unit\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesUnitLkp\nExcludeFirstRow, SelectSalesUnitLkp lookup(Sales_Unit == Sales_Unit_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesUnit\nRelationalDeliveryPoint select(mapColumn(\n\t\tPrice_Point_Code_Lkp = Price_Point_Code,\n\t\tPrice_Point_Lkp = Price_Point\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPricePointLkp\nLookupSpeciesType, SelectPricePointLkp lookup(Delivery_Point == Price_Point_Code_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupPricePointFromDeliveryPoint\nSelectedColumnsOutputInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concatWS(\"_\", $WorkbookName, $TabName,$CurrentQuarterDate,'LoadReady'))],\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tCustomer,\n\t\tDomestic_Export,\n\t\tProduct,\n\t\tDelivery_Point_Code,\n\t\tPrice_Point,\n\t\tSales_Quantity,\n\t\tAverage_Sales_Price,\n\t\tSales_Revenue,\n\t\tProduction_Cost,\n\t\tStumpage,\n\t\tUnit_Stumpage,\n\t\tCurrency_Code,\n\t\tSales_Month,\n\t\tBudget_Sales_Quantity,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Production_Cost,\n\t\tBudget_Stumpage,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name,\n\t\tSales_Unit_Code,\n\t\tSpecies_Code\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TargetPersistentParquetInsert\nSelectedOutputColumnsError sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tSpecies,\n\t\tCustomer,\n\t\tDomestic_Export,\n\t\tSales_Unit,\n\t\tSales_Quantity,\n\t\tSales_Revenue,\n\t\tProduction_Cost,\n\t\tStumpage,\n\t\tUnit_Stumpage,\n\t\tCurrency_Code,\n\t\tAverage_Sales_Price,\n\t\tBudget_Sales_Quantity,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Production_Cost,\n\t\tBudget_Stumpage,\n\t\tInsert_Datetime,\n\t\tProcess_Name,\n\t\tProduct,\n\t\tDelivery_Point_Code,\n\t\tPrice_Point,\n\t\tSales_Month,\n\t\tSource_File,\n\t\tSource_Sub_File,\n\t\tError_Desc\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ErrorTable"
				}
			},
			"dependsOn": []
		}
	]
}