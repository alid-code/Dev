{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DWH-NonProd-ADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ProcessTigermoth_ExpireForecastAssetRef_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetForecastAssetRef",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetEtlUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT VERSION_NAME, COUNT(*) AS TO_PROCESS\nFROM [relational].[Forecast_Asset_reference]\nWHERE record_deleted_flag = 0 AND IsProcessed = 0\nGROUP BY VERSION_NAME"
							},
							"dataset": {
								"referenceName": "SQLrelationfctrefasset_ds",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ProcessExpireForecastAssetRef",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetForecastAssetRef",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetForecastAssetRef').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SPexpire_Version",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[log].[Expire_Forecast_Asset_Ref]",
										"storedProcedureParameters": {
											"Version_Name": {
												"value": {
													"value": "@{item().VERSION_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQLdbConnection",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "SetEtlUtcTag",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Etl_Utc_Tag",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					}
				],
				"variables": {
					"Success_Fail_Header": {
						"type": "String",
						"defaultValue": "***SUCCESS***"
					},
					"Etl_Utc_Tag": {
						"type": "String",
						"defaultValue": "2019-10-22"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessTigermoth_ExpireForecastDataVersion_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetForecastDataVersion",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetEtlUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT VERSION_NAME, COUNT(*) AS TO_PROCESS\nFROM [relational].[Forecast_Asset_reference]\nWHERE record_deleted_flag = 0 AND IsProcessed = 0\nGROUP BY VERSION_NAME"
							},
							"dataset": {
								"referenceName": "SQLrelationfctrefasset_ds",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ProcessExpireForecastData",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetForecastDataVersion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetForecastDataVersion').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SPexpire_Version",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[log].[Expire_Forecast_Data]",
										"storedProcedureParameters": {
											"Version_Name": {
												"value": {
													"value": "@{item().VERSION_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQLdbConnection",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "SetEtlUtcTag",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Etl_Utc_Tag",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					}
				],
				"variables": {
					"Success_Fail_Header": {
						"type": "String",
						"defaultValue": "***SUCCESS***"
					},
					"Etl_Utc_Tag": {
						"type": "String",
						"defaultValue": "2019-10-22"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessTigermoth_LoadStagingToRelationDB_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadStagingDBtoRelationDB_forecastdata_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadStagingDBtoRelationDB_forecastdata_df",
								"type": "DataFlowReference",
								"parameters": {
									"ProcessName": {
										"value": "'@{pipeline().parameters.ProcessName}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.FileName}'",
										"type": "Expression"
									},
									"Etl_Utc_Tag": {
										"value": "'@{pipeline().parameters.Etl_Utc_Tag}'",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"parameters": {
					"ProcessName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/LoadStagingDBtoRelationDB_forecastdata_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessTigermoth_Master_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetUnprocessedForecastAsset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetEtlUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT COUNT(*) AS TO_PROCESS\nFROM [relational].[Forecast_Asset_reference]\nWHERE record_deleted_flag = 0 AND IsProcessed = 0"
							},
							"dataset": {
								"referenceName": "SQLrelationfctrefasset_ds",
								"type": "DatasetReference"
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "SetEtlUtcTag",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Etl_Utc_Tag",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CheckIfNeedToProcessAndReset",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetUnprocessedForecastAsset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('GetUnprocessedForecastAsset').output.firstRow.TO_PROCESS,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "TruncateTable_StagingForecastParam",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[log].[TruncateStagingTable]",
										"storedProcedureParameters": {
											"TableName": {
												"value": "Forecast_Param",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQLdbConnection",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "TruncateTable_StagingForecastData",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "TruncateTable_StagingForecastParam",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[log].[TruncateStagingTable]",
										"storedProcedureParameters": {
											"TableName": {
												"value": "Forecast_Data",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQLdbConnection",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "DeleteFiles_sourcelandingscrubbed",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "TruncateTable_StagingForecastData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DelimitedText_sourcelandingscrubbed_nofiledefined_ds",
											"type": "DatasetReference"
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false,
											"wildcardFileName": "TGR *"
										}
									}
								},
								{
									"name": "DeleteFiles_sourcelandingraw",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "DeleteFiles_sourcelandingscrubbed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DelimitedText_sourcelandingraw_nofiledefined_ds",
											"type": "DatasetReference"
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false,
											"wildcardFileName": "TGR *"
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckToProcessExtractTigermoth",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckIfNeedToProcessAndReset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('GetUnprocessedForecastAsset').output.firstRow.TO_PROCESS,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExtractDbToBlobAll",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ProcessTigermothBlob_ExtractDbToBlobAll_pl",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true
									}
								}
							]
						}
					},
					{
						"name": "CheckToProcessCopyEstateToDL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckToProcessExtractTigermoth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('GetUnprocessedForecastAsset').output.firstRow.TO_PROCESS,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CopyEstateToDL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ProcessTigermothBlob_CopyEstateToDL_pl",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true
									}
								}
							]
						}
					},
					{
						"name": "FailAndAbort_CheckAndReset",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CheckIfNeedToProcessAndReset",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
							"storedProcedureParameters": {
								"EtlUtcTag": {
									"value": {
										"value": "@variables('Etl_Utc_Tag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": "XXXXXXXXXX",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "FailAndAbort_ExtractTigermoth",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CheckToProcessExtractTigermoth",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
							"storedProcedureParameters": {
								"EtlUtcTag": {
									"value": {
										"value": "@variables('Etl_Utc_Tag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": "XXXXXXXXXX",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "FailAndAbort_CopyEstateToDL",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CheckToProcessCopyEstateToDL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
							"storedProcedureParameters": {
								"EtlUtcTag": {
									"value": {
										"value": "@variables('Etl_Utc_Tag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": "XXXXXXXXXX",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CheckToProcessConsolidateForestData",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckToProcessCopyEstateToDL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('GetUnprocessedForecastAsset').output.firstRow.TO_PROCESS,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "MergeConsolidatedToForecastData",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ProcessTigermothBlob_MergeConsolidate_stagingForecastData_pl",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true
									}
								}
							]
						}
					},
					{
						"name": "FailAndAbort_MergeConsolidated",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CheckToProcessConsolidateForestData",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
							"storedProcedureParameters": {
								"EtlUtcTag": {
									"value": {
										"value": "@variables('Etl_Utc_Tag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": "XXXXXXXXXX",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CheckToProcessOtherForestData",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckToProcessConsolidateForestData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('GetUnprocessedForecastAsset').output.firstRow.TO_PROCESS,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "MergeOtherToForecastData",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ProcessTigermothBlob_MergeOther_stagingForecastData_pl",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true
									}
								}
							]
						}
					},
					{
						"name": "FailAndAbort_MergeOther",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CheckToProcessOtherForestData",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
							"storedProcedureParameters": {
								"EtlUtcTag": {
									"value": {
										"value": "@variables('Etl_Utc_Tag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": "XXXXXXXXXX",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CheckToProcessParameterForestData",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckToProcessOtherForestData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('GetUnprocessedForecastAsset').output.firstRow.TO_PROCESS,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "MergeParameterToForecastData",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ProcessTigermothBlob_MergeParameter_stagingForecastParam_pl",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true
									}
								}
							]
						}
					},
					{
						"name": "FailAndAbort_MergeParameter",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CheckToProcessParameterForestData",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
							"storedProcedureParameters": {
								"EtlUtcTag": {
									"value": {
										"value": "@variables('Etl_Utc_Tag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": "XXXXXXXXXX",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CheckToExpireVersion",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckToProcessParameterForestData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('GetUnprocessedForecastAsset').output.firstRow.TO_PROCESS,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "PipelineExpireForecastDataVersion",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ProcessTigermoth_ExpireForecastDataVersion_pl",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true
									}
								}
							]
						}
					},
					{
						"name": "FailAndAbort_ExpireForecastData",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CheckToExpireVersion",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
							"storedProcedureParameters": {
								"EtlUtcTag": {
									"value": {
										"value": "@variables('Etl_Utc_Tag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": "XXXXXXXXXX",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CheckToInsertForecastData",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckToExpireVersion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('GetUnprocessedForecastAsset').output.firstRow.TO_PROCESS,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "PipelineLoadStagingToRelationalDB",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ProcessTigermoth_LoadStagingToRelationDB_pl",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ProcessName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileName": "spConsolidated_spOther",
											"Etl_Utc_Tag": {
												"value": "@variables('Etl_Utc_Tag')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "FailAndAbort_InsertForecastData",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CheckToInsertForecastData",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
							"storedProcedureParameters": {
								"EtlUtcTag": {
									"value": {
										"value": "@variables('Etl_Utc_Tag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": "XXXXXXXXXX",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CheckToReportForecastOffsetError",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckToInsertForecastData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('GetUnprocessedForecastAsset').output.firstRow.TO_PROCESS,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "PipelineForecastOffsetError",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ProcessTigermoth_Sendmail_OffsetError_pl",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Parent_DataFactory": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"Parent_Pipeline": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Success_Fail_Header": "***SUCCESS***"
										}
									}
								}
							]
						}
					},
					{
						"name": "FailAndAbort_ReportOffsetError",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CheckToReportForecastOffsetError",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
							"storedProcedureParameters": {
								"EtlUtcTag": {
									"value": {
										"value": "@variables('Etl_Utc_Tag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": "XXXXXXXXXX",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CheckToExpireAssetReferenceVersion",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckToReportForecastOffsetError",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('GetUnprocessedForecastAsset').output.firstRow.TO_PROCESS,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "PipelineExpireForecastAssetRefVersion",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ProcessTigermoth_ExpireForecastAssetRef_pl",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true
									}
								}
							]
						}
					},
					{
						"name": "FailAndAbort_ExpireAssetRefVersion",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CheckToExpireAssetReferenceVersion",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
							"storedProcedureParameters": {
								"EtlUtcTag": {
									"value": {
										"value": "@variables('Etl_Utc_Tag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": "XXXXXXXXXX",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CheckToReportCompletion",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckToExpireAssetReferenceVersion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('GetUnprocessedForecastAsset').output.firstRow.TO_PROCESS,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "PipelineTigermothSendmail_Completion",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ProcessTigermothSendmail_Completion_pl",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Parent_DataFactory": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"Parent_Pipeline": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Success_Fail_Header": "***SUCCESS***"
										}
									}
								}
							]
						}
					}
				],
				"variables": {
					"Success_Fail_Header": {
						"type": "String",
						"defaultValue": "***SUCCESS***"
					},
					"Etl_Utc_Tag": {
						"type": "String",
						"defaultValue": "2019-10-22"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ProcessTigermoth_ExpireForecastDataVersion_pl')]",
				"[concat(variables('factoryId'), '/pipelines/ProcessTigermoth_LoadStagingToRelationDB_pl')]",
				"[concat(variables('factoryId'), '/pipelines/ProcessTigermoth_ExpireForecastAssetRef_pl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadStagingDBtoRelationDB_adjustment_n_actual_dfx')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "NOTE:This DF only cater for INSERT. There is no Update to Expire for consideration The branch containing \"UpdateSelectForExpire\" kept for reference only",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQLstagingadjustment_ds",
								"type": "DatasetReference"
							},
							"name": "StagingDB"
						},
						{
							"dataset": {
								"referenceName": "SQLrelationcoatrxcommon_ds",
								"type": "DatasetReference"
							},
							"name": "RelationDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText_adjustment_loadready_ds",
								"type": "DatasetReference"
							},
							"name": "InsertUpdateRecords"
						}
					],
					"transformations": [
						{
							"name": "StatgingAddChecksum"
						},
						{
							"name": "LookupRelationalStream"
						},
						{
							"name": "RelationalAddChecksum"
						},
						{
							"name": "ConditionalSplitNewOrExpire"
						},
						{
							"name": "RelationRenameColumns"
						},
						{
							"name": "SelectNewStagingRow"
						},
						{
							"name": "AddAuditColumns"
						},
						{
							"name": "UpdateAddAuditAttributes"
						},
						{
							"name": "AddExpiredAttributes"
						},
						{
							"name": "UpdateSelectForInsert"
						},
						{
							"name": "UnionForDB"
						},
						{
							"name": "UpdateSelectForExpire"
						},
						{
							"name": "SelectOutput"
						}
					],
					"script": "\nparameters{\n\tProcessName as string,\n\tFileName as string,\n\tEtl_Utc_Tag as string\n}\nsource(output(\n\t\tTrx_Code as string,\n\t\tFund_ID as string,\n\t\tAsset_ID as string,\n\t\tGL_Code as string,\n\t\tCash_Flow_Code as string,\n\t\tDebit_Credit as string,\n\t\tTrx_Date as timestamp,\n\t\tTrx_Desc as string,\n\t\tTrx_Type as string,\n\t\tTrx_Amount as decimal(18,2),\n\t\tvalidation_error as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingDB\nsource(output(\n\t\tTrx_ID as long,\n\t\tTrx_Code as string,\n\t\tFund_ID as string,\n\t\tAsset_ID as string,\n\t\tGL_Code as string,\n\t\tCash_Flow_Code as string,\n\t\tDebit_Credit as string,\n\t\tTrx_Type as string,\n\t\tTrx_Date as timestamp,\n\t\tTrx_Desc as string,\n\t\tTrx_Amount as decimal(18,2),\n\t\tUpdate_datetime as timestamp,\n\t\trecord_deleted_flag as integer,\n\t\tprocess_name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT [Trx_ID]\\n      ,[Trx_Code]\\n      ,[Fund_ID]\\n      ,[Asset_ID]\\n      ,[GL_Code]\\n      ,[Cash_Flow_Code]\\n      ,[Debit_Credit]\\n      ,[Trx_Type]\\n      ,[Trx_Date]\\n      ,[Trx_Desc]\\n      ,[Trx_Amount]\\n      ,[Update_datetime]\\n      ,[record_deleted_flag]\\n      ,[process_name]\\n  FROM [relational].[COA_Transactions]\\n  WHERE [Trx_Type] != \\'Actual\\'\\n  AND[record_deleted_flag] = 0',\n\tformat: 'query') ~> RelationDB\nStagingDB derive(StagingChecksum = sha2(256, Trx_Code,Fund_ID,Asset_ID,GL_Code,Cash_Flow_Code,Trx_Type,Trx_Date,Trx_Desc,Debit_Credit,Trx_Amount)) ~> StatgingAddChecksum\nStatgingAddChecksum, RelationRenameColumns lookup(StagingChecksum == Relation_RelationalChecksum,\n\tbroadcast: 'none')~> LookupRelationalStream\nRelationDB derive(RelationalChecksum = sha2(256, Trx_Code,Fund_ID,Asset_ID,GL_Code,Cash_Flow_Code,Trx_Type,Trx_Date,Trx_Desc,Debit_Credit,Trx_Amount)) ~> RelationalAddChecksum\nLookupRelationalStream split(isNull(Relation_RelationalChecksum),\n\tDebit_Credit!=Relation_Debit_Credit || Trx_Amount!=Relation_Trx_Amount,\n\tdisjoint: false) ~> ConditionalSplitNewOrExpire@(StagingNewRow, StagingChangedRow, IgnoreNoChange)\nRelationalAddChecksum select(mapColumn(\n\t\tRelation_Trx_ID = Trx_ID,\n\t\tRelation_Trx_Code = Trx_Code,\n\t\tRelation_Fund_ID = Fund_ID,\n\t\tRelation_Asset_ID = Asset_ID,\n\t\tRelation_GL_Code = GL_Code,\n\t\tRelation_Cash_Flow_Code = Cash_Flow_Code,\n\t\tRelation_Debit_Credit = Debit_Credit,\n\t\tRelation_Trx_Type = Trx_Type,\n\t\tRelation_Trx_Date = Trx_Date,\n\t\tRelation_Trx_Desc = Trx_Desc,\n\t\tRelation_Trx_Amount = Trx_Amount,\n\t\tRelation_Update_datetime = Update_datetime,\n\t\tRelation_record_deleted_flag = record_deleted_flag,\n\t\tRelation_process_name = process_name,\n\t\tRelation_RelationalChecksum = RelationalChecksum\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> RelationRenameColumns\nConditionalSplitNewOrExpire@StagingNewRow select(mapColumn(\n\t\tTrx_Code,\n\t\tFund_ID,\n\t\tAsset_ID,\n\t\tGL_Code,\n\t\tCash_Flow_Code,\n\t\tDebit_Credit,\n\t\tTrx_Date,\n\t\tTrx_Desc,\n\t\tTrx_Type,\n\t\tTrx_Amount\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectNewStagingRow\nSelectNewStagingRow derive(Update_datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\trecord_deleted_flag = toInteger(0),\n\t\tprocess_name = concatWS('-',$ProcessName,$FileName),\n\t\tinsert_update_flag = toString('I'),\n\t\tTrx_ID = toLong(null())) ~> AddAuditColumns\nConditionalSplitNewOrExpire@StagingChangedRow derive(Update_datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\trecord_deleted_flag = toInteger(0),\n\t\tprocess_name = concatWS('-', $ProcessName, $FileName),\n\t\tinsert_update_flag = toString('I'),\n\t\tTrx_ID = toLong(null())) ~> UpdateAddAuditAttributes\nConditionalSplitNewOrExpire@StagingChangedRow derive(record_deleted_flag = toInteger(1),\n\t\tinsert_update_flag = toString('U')) ~> AddExpiredAttributes\nUpdateAddAuditAttributes select(mapColumn(\n\t\tTrx_Code,\n\t\tFund_ID,\n\t\tAsset_ID,\n\t\tGL_Code,\n\t\tDebit_Credit,\n\t\tTrx_Type,\n\t\tTrx_Date,\n\t\tTrx_Desc,\n\t\tTrx_Amount,\n\t\tCash_Flow_Code,\n\t\tUpdate_datetime,\n\t\trecord_deleted_flag,\n\t\tprocess_name,\n\t\tTrx_ID,\n\t\tinsert_update_flag\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectForInsert\nAddAuditColumns union(byName: true)~> UnionForDB\nAddExpiredAttributes select(mapColumn(\n\t\tTrx_Code = Relation_Trx_Code,\n\t\tFund_ID = Relation_Fund_ID,\n\t\tAsset_ID = Relation_Asset_ID,\n\t\tGL_Code = Relation_GL_Code,\n\t\tCash_Flow_Code = Relation_Cash_Flow_Code,\n\t\tDebit_Credit = Relation_Debit_Credit,\n\t\tTrx_Type = Relation_Trx_Type,\n\t\tTrx_Date = Relation_Trx_Date,\n\t\tTrx_Desc = Relation_Trx_Desc,\n\t\tTrx_Amount = Relation_Trx_Amount,\n\t\tprocess_name = Relation_process_name,\n\t\tUpdate_datetime = Relation_Update_datetime,\n\t\trecord_deleted_flag,\n\t\tTrx_ID = Relation_Trx_ID,\n\t\tinsert_update_flag\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectForExpire\nUnionForDB select(mapColumn(\n\t\tTrx_Code,\n\t\tFund_ID,\n\t\tAsset_ID,\n\t\tGL_Code,\n\t\tCash_Flow_Code,\n\t\tDebit_Credit,\n\t\tTrx_Date,\n\t\tTrx_Desc,\n\t\tTrx_Type,\n\t\tTrx_Amount,\n\t\tTrx_ID,\n\t\tUpdate_datetime,\n\t\trecord_deleted_flag,\n\t\tprocess_name,\n\t\tinsert_update_flag\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectOutput\nSelectOutput sink(input(\n\t\tTrx_Code as string,\n\t\tFund_ID as string,\n\t\tAsset_ID as string,\n\t\tGL_Code as string,\n\t\tCash_Flow_Code as string,\n\t\tDebit_Credit as string,\n\t\tTrx_Date as string,\n\t\tTrx_Desc as string,\n\t\tTrx_Type as string,\n\t\tTrx_Amount as string,\n\t\tTrx_ID as string,\n\t\tUpdate_datetime as string,\n\t\trecord_deleted_flag as string,\n\t\tprocess_name as string,\n\t\tinsert_update_flag as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['AdjustmentLoadReadyFile.txt'],\n\tmapColumn(\n\t\tTrx_Code,\n\t\tFund_ID,\n\t\tAsset_ID,\n\t\tGL_Code,\n\t\tCash_Flow_Code,\n\t\tDebit_Credit,\n\t\tTrx_Date,\n\t\tTrx_Desc,\n\t\tTrx_Type,\n\t\tTrx_Amount,\n\t\tTrx_ID,\n\t\tUpdate_datetime,\n\t\trecord_deleted_flag,\n\t\tprocess_name,\n\t\tinsert_update_flag\n\t),\n\tpartitionBy('hash', 1)) ~> InsertUpdateRecords"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadStagingDBtoRelationDB_forecastdata_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQLstagingasset_ds",
								"type": "DatasetReference"
							},
							"name": "StagingDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLrelationforecastdata_ds",
								"type": "DatasetReference"
							},
							"name": "InsertUpdateRow"
						}
					],
					"transformations": [
						{
							"name": "SelectNewStagingRow"
						},
						{
							"name": "AddAuditColumns"
						},
						{
							"name": "AlterRowInsert"
						}
					],
					"script": "\nparameters{\n\tProcessName as string,\n\tFileName as string,\n\tEtl_Utc_Tag as string\n}\nsource(output(\n\t\tPeriod_Date as timestamp,\n\t\tFund_ID as string,\n\t\tAsset_ID as string,\n\t\tStatus as string,\n\t\tProduct as string,\n\t\tGL_Code as string,\n\t\tCash_Flow_Code as string,\n\t\tPerpetual_Amount as decimal(25,10),\n\t\tCurrent_Amount as decimal(25,10),\n\t\tFuture_Amount as decimal(25,10),\n\t\tDebit_Credit as string,\n\t\tForecast_Type as string,\n\t\tVersion_name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT \\n --REF.ASSET_OFFSET AS REF_ASSET_OFFSET , PAR.ASSET_OFFSET AS PAR_ASSET_OFFSET, PAR.DESC_YEAR, DAT.PERIOD,\\n CASE WHEN REF.ASSET_OFFSET = PAR.ASSET_OFFSET \\n          THEN DATEADD(YEAR,CAST(DAT.PERIOD AS INT)-(CAST(REF.ASSET_OFFSET AS INT)-CAST(PAR.ASSET_OFFSET AS INT))-1,CAST(CONCAT(PAR.DESC_YEAR,\\'-01-01\\') AS DATETIME)) \\n          ELSE DATEADD(YEAR,CAST(DAT.PERIOD AS INT)-(CAST(REF.ASSET_OFFSET AS INT)-CAST(PAR.ASSET_OFFSET AS INT)),CAST(CONCAT(PAR.DESC_YEAR,\\'-01-01\\') AS DATETIME)) \\n END AS Period_Date,\\n REF.FUND_ID AS Fund_ID,\\n REF.ASSET_ID AS Asset_ID,\\n DAT.STATUS AS Status, \\n DAT.PRODUCT AS Product, \\n CASE WHEN PRD.GL_CODE IS NULL THEN \\'IGNORE\\' ELSE PRD.GL_CODE END AS GL_Code,\\n CAST(NULL AS VARCHAR(100)) AS Cash_Flow_Code,\\n ABS(( CAST(CAST(DAT.CURENT_AMOUNT AS FLOAT) + CAST(DAT.FUTURE_AMOUNT AS FLOAT) AS DECIMAL(25,10)) )) AS Perpetual_Amount,\\n CAST(CAST(DAT.CURENT_AMOUNT AS FLOAT) AS DECIMAL(25,10)) AS Current_Amount, \\n CAST(CAST(DAT.FUTURE_AMOUNT AS FLOAT) AS DECIMAL(25,10)) AS Future_Amount,\\n CASE WHEN ( CAST(CAST(DAT.CURENT_AMOUNT AS FLOAT) + CAST(DAT.FUTURE_AMOUNT AS FLOAT) AS DECIMAL(25,10)) ) >= 0 THEN \\'DR\\' ElSE \\'CR\\' END AS Debit_Credit,\\n \\'Forecast\\' AS Forecast_Type,\\n REF.VERSION_NAME AS Version_name\\nFROM RELATIONAL.FORECAST_ASSET_REFERENCE REF\\nJOIN STAGING.FORECAST_PARAM PAR\\nON REF.FUND_ID = PAR.FUND_ID AND REF.ASSET_ID = PAR.ASSET_ID AND REF.VERSION_NAME = PAR.VERSION_NAME \\nJOIN STAGING.FORECAST_DATA DAT\\nON REF.FUND_ID = DAT.FUND_ID AND REF.ASSET_ID = DAT.ASSET_ID AND REF.VERSION_NAME = DAT.VERSION_NAME \\nLEFT JOIN RELATIONAL.FORECAST_GL_PRODUCT_MAP PRD\\nON DAT.FUND_ID = PRD.FUND_ID AND DAT.ASSET_ID = PRD.ASSET_ID AND DAT.STATUS = PRD.STATUS AND DAT.PRODUCT = PRD.Product AND PRD.RECORD_DELETED_FLAG = 0\\nWHERE REF.ISPROCESSED = 0 AND REF.RECORD_DELETED_FLAG = 0 \\nAND DAT.STATUS != \\'\\' AND DAT.STATUS IS NOT NULL\\nAND CAST(REF.ASSET_OFFSET AS INT) >= CAST(PAR.ASSET_OFFSET AS INT)\\nAND CAST(DAT.PERIOD AS INT) >= CASE WHEN (CAST(REF.ASSET_OFFSET AS INT) - CAST(PAR.ASSET_OFFSET AS INT)) = 0 \\n    THEN 1 ELSE (CAST(REF.ASSET_OFFSET AS INT) - CAST(PAR.ASSET_OFFSET AS INT)) END',\n\tformat: 'query') ~> StagingDB\nStagingDB select(mapColumn(\n\t\tPeriod_Date,\n\t\tFund_ID,\n\t\tAsset_ID,\n\t\tStatus,\n\t\tProduct,\n\t\tGL_Code,\n\t\tCash_Flow_Code,\n\t\tPerpetual_Amount,\n\t\tCurrent_Amount,\n\t\tFuture_Amount,\n\t\tDebit_Credit,\n\t\tForecast_Type,\n\t\tVersion_name\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectNewStagingRow\nSelectNewStagingRow derive(Update_datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\trecord_deleted_flag = toInteger(0),\n\t\tprocess_name = concatWS('_',$ProcessName,$FileName)) ~> AddAuditColumns\nAddAuditColumns alterRow(insertIf(record_deleted_flag==toInteger(0))) ~> AlterRowInsert\nAlterRowInsert sink(input(\n\t\tPeriod_Date as timestamp,\n\t\tFund_ID as string,\n\t\tAsset_ID as string,\n\t\tStatus as string,\n\t\tProduct as string,\n\t\tGL_Code as string,\n\t\tCash_Flow_Code as string,\n\t\tPerpetual_Amount as decimal(25,10),\n\t\tCurrent_Amount as decimal(25,10),\n\t\tFuture_Amount as decimal(25,10),\n\t\tDebit_Credit as string,\n\t\tForecast_Type as string,\n\t\tVersion_name as string,\n\t\tUpdate_datetime as timestamp,\n\t\trecord_deleted_flag as integer,\n\t\tprocess_name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['Asset_ID','Fund_ID'],\n\tformat: 'table',\n\tmapColumn(\n\t\tPeriod_Date,\n\t\tFund_ID,\n\t\tAsset_ID,\n\t\tStatus,\n\t\tProduct,\n\t\tGL_Code,\n\t\tCash_Flow_Code,\n\t\tPerpetual_Amount,\n\t\tCurrent_Amount,\n\t\tFuture_Amount,\n\t\tDebit_Credit,\n\t\tForecast_Type,\n\t\tVersion_name,\n\t\tUpdate_datetime,\n\t\trecord_deleted_flag,\n\t\tprocess_name\n\t)) ~> InsertUpdateRow"
				}
			},
			"dependsOn": []
		}
	]
}