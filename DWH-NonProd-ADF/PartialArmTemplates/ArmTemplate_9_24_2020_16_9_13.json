{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DWH-NonProd-ADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktMasterFactMarket_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MasterUtcTag",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "MasterUtcTag",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyWorksheetToCsvFile",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "MoveFIleFromFileshareToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Source Metric",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Source Metric",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Period Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Period Date",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Species Common Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Species Common Name",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Product Common Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product Common Name",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Currency",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Currency",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "UOM",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UOM",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Market",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Market",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Delivery Point",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Delivery Point",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Indicator",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Indicator",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Type",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Basis",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Basis",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Origin Port Country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Origin Port Country",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Origin Port Region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Origin Port Region",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Origin Port",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Origin Port",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Destination Port Country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Destination Port Country",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Destination Port Region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Destination Port Region",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Destination Port",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Destination Port",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Vessel Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Vessel Name",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Low",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Low",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "High",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "High",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Average",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Average",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Spot",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Spot",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Comment",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Comment",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@variables('WorksheetName')",
										"type": "Expression"
									},
									"Range": {
										"value": "@variables('WorksheetRange')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CSVgenericWithParameter_ds",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@variables('ScrubbedFileName')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "TruncateAuditTable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyWorksheetToCsvFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[audit].[TruncateAuditTable]",
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "@variables('ShortErrorTableName')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ProcessFact",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "TruncateAuditTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktUpdateFactMarket_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"WorksheetName": {
									"value": "@variables('WorksheetName')",
									"type": "Expression"
								},
								"GeneratedBatchDate": {
									"value": "@variables('GenerateBatchDate')",
									"type": "Expression"
								},
								"MasterPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"ScrubbedFileName": {
									"value": "@variables('ScrubbedFileName')",
									"type": "Expression"
								},
								"DimSchemaName": {
									"value": "@variables('DimSchemaName')",
									"type": "Expression"
								},
								"ShortFactTableName": {
									"value": "@variables('ShortFactTableName')",
									"type": "Expression"
								},
								"ErrorSchemaName": {
									"value": "@variables('ErrorSchemaName')",
									"type": "Expression"
								},
								"ShortErrorTableName": {
									"value": "@variables('ShortErrorTableName')",
									"type": "Expression"
								},
								"Product_Group": {
									"value": "@pipeline().parameters.Product_Group",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GenerateBatchDate",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "MasterUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "GenerateBatchDate",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcnow(),'AUS Eastern Standard Time'),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyToSourceArchive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessFact",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToSourceArchive_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat(substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CopyToSourceArchiveFailed",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessFact",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToSourceArchive_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat(substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CopyToDataLake",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyToSourceArchive",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToDatalake_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat('manual/',substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteFromSourceLandingScrubbed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyToDataLake",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingScrubbed_ds",
								"type": "DatasetReference"
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"prefix": {
									"value": "@{variables('ScrubbedFileName')}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingScrubbedFailed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyToSourceArchiveFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingScrubbed_ds",
								"type": "DatasetReference"
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"prefix": {
									"value": "@{variables('ScrubbedFileName')}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingScrubbed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingRawFailed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingScrubbedFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "UpdateSourceRegisterFailed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingRawFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[SourceRegisterTableInsert]",
							"storedProcedureParameters": {
								"ArchiveContainer": {
									"value": {
										"value": "sourcearchive",
										"type": "Expression"
									},
									"type": "String"
								},
								"Comment": {
									"value": {
										"value": "Pipeline Failed",
										"type": "Expression"
									},
									"type": "String"
								},
								"DatalakeContainer": {
									"value": {
										"value": "nonfinancial",
										"type": "Expression"
									},
									"type": "String"
								},
								"EtlUtcTag": {
									"value": {
										"value": "@variables('MasterUtcTag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputDate": {
									"value": {
										"value": "@variables('GenerateBatchDate')",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputMethod": {
									"value": {
										"value": "manual",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": {
										"value": "ABORT",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceContainer": {
									"value": {
										"value": "sourcelandingraw",
										"type": "Expression"
									},
									"type": "String"
								},
								"TargetContainer": {
									"value": {
										"value": "sourcelandingscrubbed",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UpdateSourceRegisterTable",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingRaw",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktUpdateSourceRegister_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": {
									"value": "@variables('ErrorTableName')",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@variables('MasterUtcTag')",
									"type": "Expression"
								},
								"MasterPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"GenerateBatchDate": {
									"value": "@variables('GenerateBatchDate')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendFinalEmail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UpdateSourceRegisterTable",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailOK_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": {
									"value": "@variables('ErrorTableName')",
									"type": "Expression"
								},
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "MoveFIleFromFileshareToBlob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SendEmailFileReceivedConfirmation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryDataSourceFileshareMktDataDir_MoveFile_ds",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryDataDestinationBlob_MoveFile_ds",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SendEmailFileReceivedConfirmation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GenerateBatchDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailFileReceived_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendMailMoveFileFailed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "MoveFIleFromFileshareToBlob",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailCopyFailed_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendMailCopyFileFailed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CopyWorksheetToCsvFile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailCopyFailed_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendMailLoadFailed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UpdateSourceRegisterFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailFinalFailedMsg_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"emailAddress": {
						"type": "string",
						"defaultValue": "weiyin.leow@asggroup.com.au"
					},
					"WorkbookName": {
						"type": "string",
						"defaultValue": "MarketInfoFact.xlsx"
					},
					"Product_Group": {
						"type": "string",
						"defaultValue": "Timber"
					}
				},
				"variables": {
					"WorksheetName": {
						"type": "String",
						"defaultValue": "MarketInfoFact"
					},
					"WorksheetRange": {
						"type": "String",
						"defaultValue": "A8:Y99999"
					},
					"GenerateBatchDate": {
						"type": "String"
					},
					"MasterUtcTag": {
						"type": "String"
					},
					"ErrorTableName": {
						"type": "String",
						"defaultValue": "[[audit].[Fact_Market_Info_Error]"
					},
					"ShortErrorTableName": {
						"type": "String",
						"defaultValue": "Fact_Market_Info_Error"
					},
					"ScrubbedFileName": {
						"type": "String",
						"defaultValue": "MKTINFO_FACT_MARKET_Extract.csv"
					},
					"DimSchemaName": {
						"type": "String",
						"defaultValue": "datamart"
					},
					"ShortFactTableName": {
						"type": "String",
						"defaultValue": "Fact_Market_Info"
					},
					"ErrorSchemaName": {
						"type": "String",
						"defaultValue": "audit"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ProcessMktUpdateFactMarket_pl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktUpdateFactMarket_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Pass2_ProcessAndPopulate_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Pass1_InsertNewSpeciesProductDims_df",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadMktFactMarket_Pass2_ProcessAndPopulate_df",
								"type": "DataFlowReference",
								"parameters": {
									"GeneratedBatchDate": {
										"value": "'@{pipeline().parameters.GeneratedBatchDate}'",
										"type": "Expression"
									},
									"WorkbookName": {
										"value": "'@{pipeline().parameters.WorkbookName}'",
										"type": "Expression"
									},
									"WorksheetName": {
										"value": "'@{pipeline().parameters.WorksheetName}'",
										"type": "Expression"
									},
									"MasterPipelineName": {
										"value": "'@{pipeline().parameters.MasterPipelineName}'",
										"type": "Expression"
									},
									"Product_Group": {
										"value": "'@{pipeline().parameters.Product_Group}'",
										"type": "Expression"
									},
									"DimSchemaName": {
										"value": "'@{pipeline().parameters.DimSchemaName}'",
										"type": "Expression"
									},
									"ErrorSchemaName": {
										"value": "'@{pipeline().parameters.ErrorSchemaName}'",
										"type": "Expression"
									},
									"ShortFactTableName": {
										"value": "'@{pipeline().parameters.ShortFactTableName}'",
										"type": "Expression"
									},
									"ShortErrorTableName": {
										"value": "'@{pipeline().parameters.ShortErrorTableName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReadSource": {
										"FileName": {
											"value": "@pipeline().parameters.ScrubbedFileName",
											"type": "Expression"
										}
									},
									"FactErrorTable": {
										"Schema": {
											"value": "@pipeline().parameters.ErrorSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortErrorTableName",
											"type": "Expression"
										}
									},
									"TargetFactInsert": {
										"Schema": {
											"value": "@pipeline().parameters.DimSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortFactTableName",
											"type": "Expression"
										}
									},
									"TargetFactDelete": {
										"Schema": {
											"value": "@pipeline().parameters.DimSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortFactTableName",
											"type": "Expression"
										}
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "Pass1_InsertNewSpeciesProductDims_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadMktFactMarket_Pass1_InsertNewSpeciesProductDims_df",
								"type": "DataFlowReference",
								"parameters": {
									"GeneratedBatchDate": {
										"value": "'@{pipeline().parameters.GeneratedBatchDate}'",
										"type": "Expression"
									},
									"WorkbookName": {
										"value": "'@{pipeline().parameters.WorkbookName}'",
										"type": "Expression"
									},
									"WorksheetName": {
										"value": "'@{pipeline().parameters.WorksheetName}'",
										"type": "Expression"
									},
									"MasterPipelineName": {
										"value": "'@{pipeline().parameters.MasterPipelineName}'",
										"type": "Expression"
									},
									"Product_Group": {
										"value": "'@{pipeline().parameters.Product_Group}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReadSource": {
										"FileName": {
											"value": "@pipeline().parameters.ScrubbedFileName",
											"type": "Expression"
										}
									},
									"InsertNewSpeciesDim": {
										"Schema": {
											"value": "@pipeline().parameters.DimSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "Dim_Species",
											"type": "Expression"
										}
									},
									"InsertNewProductDim": {
										"Schema": {
											"value": "@pipeline().parameters.DimSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "Dim_Product",
											"type": "Expression"
										}
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"parameters": {
					"WorkbookName": {
						"type": "string"
					},
					"WorksheetName": {
						"type": "string"
					},
					"GeneratedBatchDate": {
						"type": "string"
					},
					"MasterPipelineName": {
						"type": "string"
					},
					"ScrubbedFileName": {
						"type": "string"
					},
					"DimSchemaName": {
						"type": "string"
					},
					"ShortFactTableName": {
						"type": "string"
					},
					"ErrorSchemaName": {
						"type": "string"
					},
					"ShortErrorTableName": {
						"type": "string"
					},
					"Product_Group": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/LoadMktFactMarket_Pass2_ProcessAndPopulate_df')]",
				"[concat(variables('factoryId'), '/dataflows/LoadMktFactMarket_Pass1_InsertNewSpeciesProductDims_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOpsWorkbookExtractExcelToParguet_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Sub Master job to orchestrate multiple pipelines run. Each pipeline correspond to one tab in the Excel workbook.",
				"activities": [
					{
						"name": "PipelineMajorSevereIncidents",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineRiskOpportunityRegister",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineRelatedPartyTransactions",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineHarvestReconcilliation",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineOperations",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineContracts",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineStrategicProjects",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "ExtractCertifications",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Asset_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fund_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Reporting_Period",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Certification_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Validation Flag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Validation_Flag"
										}
									},
									{
										"source": {
											"name": "Certification Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_Type"
										}
									},
									{
										"source": {
											"name": "Certification Number",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_Number"
										}
									},
									{
										"source": {
											"name": "Next Audit Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Next_Audit_Date"
										}
									},
									{
										"source": {
											"name": "Certifying Body",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certifying_Body"
										}
									},
									{
										"source": {
											"name": "Certification Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_Date"
										}
									},
									{
										"source": {
											"name": "Certification End Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_End_Date"
										}
									},
									{
										"source": {
											"name": "Certified Entity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certified_Entity"
										}
									},
									{
										"source": {
											"name": "Number of Open Minor CARS",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Number_of_Open_Minor_CARS"
										}
									},
									{
										"source": {
											"name": "Number of Open Major CARS",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Number_of_Open_Major_CARS"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@pipeline().parameters.Certifications",
										"type": "Expression"
									},
									"Range": {
										"value": "@pipeline().parameters.CertificationsRange",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference",
								"parameters": {
									"ParquetFile": {
										"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.Certifications,'_',pipeline().parameters.CurrentQuarterDate,'_Extract')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ExtractTimberSales",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Asset_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fund_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Reporting_Period",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Validation Flag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Validation_Flag"
										}
									},
									{
										"source": {
											"name": "Customer",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Domestic or Export",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Domestic_or_Export"
										}
									},
									{
										"source": {
											"name": "Species",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Species",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Product Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product_Type"
										}
									},
									{
										"source": {
											"name": "Delivery Point",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Delivery_Point"
										}
									},
									{
										"source": {
											"name": "Price Point",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Price_Point"
										}
									},
									{
										"source": {
											"name": "Sales Unit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales_Unit"
										}
									},
									{
										"source": {
											"name": "Sales Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales_Quantity"
										}
									},
									{
										"source": {
											"name": "Average Sales Price",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Average_Sales_Price"
										}
									},
									{
										"source": {
											"name": "Sales Revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales_Revenue"
										}
									},
									{
										"source": {
											"name": "Production Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Production_Cost"
										}
									},
									{
										"source": {
											"name": "Stumpage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Stumpage",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Unit Stumpage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Unit_Stumpage"
										}
									},
									{
										"source": {
											"name": "Currency",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Currency",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Month",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Month",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Budget Sales Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Sales_Quantity"
										}
									},
									{
										"source": {
											"name": "Budget Sales Revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Sales_Revenue"
										}
									},
									{
										"source": {
											"name": "Budget Production Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Production_Cost"
										}
									},
									{
										"source": {
											"name": "Budget Unit Stumpage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Unit_Stumpage"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@pipeline().parameters.TimberSales",
										"type": "Expression"
									},
									"Range": {
										"value": "@pipeline().parameters.TimberSalesRange",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference",
								"parameters": {
									"ParquetFile": {
										"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.TimberSales,'_',pipeline().parameters.CurrentQuarterDate,'_Extract')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ExtractOtherSales",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Asset_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fund_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Reporting_Period",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Validation Flag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Validation_Flag"
										}
									},
									{
										"source": {
											"name": "Customer",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Domestic or Export",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Domestic_or_Export"
										}
									},
									{
										"source": {
											"name": "Species",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Species",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Product Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product_Type"
										}
									},
									{
										"source": {
											"name": "Delivery Point",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Delivery_Point"
										}
									},
									{
										"source": {
											"name": "Price Point",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Price_Point"
										}
									},
									{
										"source": {
											"name": "Sales Unit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales_Unit"
										}
									},
									{
										"source": {
											"name": "Sales Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales_Quantity"
										}
									},
									{
										"source": {
											"name": "Average Sales Price",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Average_Sales_Price"
										}
									},
									{
										"source": {
											"name": "Sales Revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales_Revenue"
										}
									},
									{
										"source": {
											"name": "Production Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Production_Cost"
										}
									},
									{
										"source": {
											"name": "Stumpage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Stumpage",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Unit Stumpage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Unit_Stumpage"
										}
									},
									{
										"source": {
											"name": "Currency",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Currency",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Month",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Month",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Budget Sales Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Sales_Quantity"
										}
									},
									{
										"source": {
											"name": "Budget Sales Revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Sales_Revenue"
										}
									},
									{
										"source": {
											"name": "Budget Production Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Production_Cost"
										}
									},
									{
										"source": {
											"name": "Budget Unit Stumpage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Unit_Stumpage"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@pipeline().parameters.OtherSales",
										"type": "Expression"
									},
									"Range": {
										"value": "@pipeline().parameters.OtherSalesRange",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference",
								"parameters": {
									"ParquetFile": {
										"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.OtherSales,'_',pipeline().parameters.CurrentQuarterDate,'_Extract')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"concurrency": 15,
				"parameters": {
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Wenita Forestry Products Q4 FY20 V2.xlsx"
					},
					"CurrentQuarterDate": {
						"type": "string",
						"defaultValue": "2020-06-30"
					},
					"OtherSales": {
						"type": "string",
						"defaultValue": "Other Sales"
					},
					"MajorSevereIncidents": {
						"type": "string",
						"defaultValue": "Major Severe Incidents"
					},
					"RiskOpportunityRegister": {
						"type": "string",
						"defaultValue": "Risk Opportunity Register"
					},
					"Certifications": {
						"type": "string",
						"defaultValue": "Certifications"
					},
					"RelatedPartyTransactions": {
						"type": "string",
						"defaultValue": "Related Party Transactions"
					},
					"TimberSales": {
						"type": "string",
						"defaultValue": "Timber Sales"
					},
					"HarvestReconcilliation": {
						"type": "string",
						"defaultValue": "Harvest Reconcilliation"
					},
					"Operations": {
						"type": "string",
						"defaultValue": "Operations"
					},
					"Contracts": {
						"type": "string",
						"defaultValue": "Contracts"
					},
					"StrategicProjects": {
						"type": "string",
						"defaultValue": "Strategic Projects"
					},
					"CurrentRunDateTime": {
						"type": "string",
						"defaultValue": "2020-08-01"
					},
					"MasterUtcTag": {
						"type": "string",
						"defaultValue": "2020-08-28T06:05:53.4181322Z"
					},
					"MasterPipeline": {
						"type": "string",
						"defaultValue": "ProcessOpsWorkbookMaster_pl"
					},
					"OtherSalesRange": {
						"type": "string"
					},
					"MajorSevereIncidentsRange": {
						"type": "string"
					},
					"RiskOpportunityRegisterRange": {
						"type": "string"
					},
					"CertificationsRange": {
						"type": "string",
						"defaultValue": "A6:N99999"
					},
					"RelatedPartyTransactionsRange": {
						"type": "string"
					},
					"TimberSalesRange": {
						"type": "string",
						"defaultValue": "A6:W99999"
					},
					"HarvestReconcilliationRange": {
						"type": "string"
					},
					"OperationsRange": {
						"type": "string"
					},
					"ContractsRange": {
						"type": "string"
					},
					"StrategicProjectsRange": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadMktFactMarket_Pass1_InsertNewSpeciesProductDims_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CSVgenericWithParameter_ds",
								"type": "DatasetReference"
							},
							"name": "ReadSource"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "DatamartDimProductLkp"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "DatamartDimSpeciesLkp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "InsertNewSpeciesDim"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "InsertNewProductDim"
						}
					],
					"transformations": [
						{
							"name": "SelectDimProductLkp"
						},
						{
							"name": "DataTransformation"
						},
						{
							"name": "SelectDimSpeciesLkp"
						},
						{
							"name": "LookupDimSpecies"
						},
						{
							"name": "LookupDimProduct"
						},
						{
							"name": "FilterProcessGroup"
						},
						{
							"name": "GetUniqueSpicesProductCombination"
						},
						{
							"name": "SplitSpeciesProductDetails"
						},
						{
							"name": "SelectSpeciesOutput"
						},
						{
							"name": "SelectProductOutput"
						},
						{
							"name": "AddPoductDetails"
						},
						{
							"name": "RemoveBlankSpeciesProduct"
						},
						{
							"name": "DerivedSpeciesDetails"
						}
					],
					"script": "parameters{\n\tGeneratedBatchDate as string,\n\tWorkbookName as string,\n\tWorksheetName as string,\n\tMasterPipelineName as string,\n\tProduct_Group as string\n}\nsource(output(\n\t\t{Source Metric} as string,\n\t\t{Period Date} as string,\n\t\tCountry as string,\n\t\tRegion as string,\n\t\t{Species Common Name} as string,\n\t\t{Product Common Name} as string,\n\t\tCurrency as string,\n\t\tUOM as string,\n\t\tMarket as string,\n\t\t{Delivery Point} as string,\n\t\tIndicator as string,\n\t\tType as string,\n\t\tBasis as string,\n\t\t{Origin Port Country} as string,\n\t\t{Origin Port Region} as string,\n\t\t{Origin Port} as string,\n\t\t{Destination Port Country} as string,\n\t\t{Destination Port Region} as string,\n\t\t{Destination Port} as string,\n\t\t{Vessel Name} as string,\n\t\tLow as string,\n\t\tHigh as string,\n\t\tAverage as string,\n\t\tSpot as string,\n\t\tComment as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ReadSource\nsource(output(\n\t\tProduct_Id as integer,\n\t\tProduct_Code as string,\n\t\tProduct_Type as string,\n\t\tProduct_Global_Grade as string,\n\t\tProduct_Common_Name as string,\n\t\tProduct_Desc as string,\n\t\tProduct_Group as string,\n\t\tGL_Code as string,\n\t\tSpecies_Common_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT [Product_Id]\\n      ,[Product_Code]\\n      ,[Product_Type]\\n      ,[Product_Global_Grade]\\n      ,[Product_Common_Name]\\n      ,[Product_Desc]\\n      ,[Product_Group]\\n      ,[GL_Code]\\n      ,[Species_Common_Name]\\nFROM [datamart].[Dim_Product]\\nWHERE [Product_Id] != -1',\n\tformat: 'query') ~> DatamartDimProductLkp\nsource(output(\n\t\tSpecies_ID as integer,\n\t\tSpecies_Code as string,\n\t\tGenus as string,\n\t\tSpecies as string,\n\t\tSpecies_Common_Name as string,\n\t\tSpecies_Group as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT [Species_ID]\\n      ,[Species_Code]\\n      ,[Genus]\\n      ,[Species]\\n      ,[Species_Common_Name]\\n      ,[Species_Group]\\n  FROM [datamart].[Dim_Species]\\nWHERE [Species_ID] != -1',\n\tformat: 'query') ~> DatamartDimSpeciesLkp\nFilterProcessGroup select(mapColumn(\n\t\tProduct_Id_Lkp = Product_Id,\n\t\tProduct_Code_Lkp = Product_Code,\n\t\tProduct_Type_Lkp = Product_Type,\n\t\tProduct_Global_Grade_Lkp = Product_Global_Grade,\n\t\tProduct_Common_Name_Lkp = Product_Common_Name,\n\t\tProduct_Desc_Lkp = Product_Desc,\n\t\tProduct_Group_Lkp = Product_Group,\n\t\tGL_Code_Lkp = GL_Code,\n\t\tProduct_Species_Common_Name_Lkp = Species_Common_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimProductLkp\nGetUniqueSpicesProductCombination derive(Source_File = concat($WorkbookName,'-', $WorksheetName),\n\t\tBatch_ID = replace(replace(replace($GeneratedBatchDate, \"-\", \"\"),\":\",\"\"),\" \",\"\"),\n\t\tProcess_Name = $MasterPipelineName,\n\t\tInsert_DateTime = fromUTC(currentUTC(), 'Australia/Sydney')) ~> DataTransformation\nDatamartDimSpeciesLkp select(mapColumn(\n\t\tSpecies_ID_Lkp = Species_ID,\n\t\tSpecies_Code_Lkp = Species_Code,\n\t\tGenus_Lkp = Genus,\n\t\tSpecies_Lkp = Species,\n\t\tSpecies_Common_Name_Lkp = Species_Common_Name,\n\t\tSpecies_Group_Lkp = Species_Group\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimSpeciesLkp\nDataTransformation, SelectDimSpeciesLkp lookup({Species Common Name} == Species_Common_Name_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDimSpecies\nLookupDimSpecies, SelectDimProductLkp lookup({Product Common Name} == Product_Common_Name_Lkp\n\t&& {Species Common Name} == Product_Species_Common_Name_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDimProduct\nDatamartDimProductLkp filter(Product_Group == $Product_Group) ~> FilterProcessGroup\nRemoveBlankSpeciesProduct aggregate(groupBy({Species Common Name},\n\t\t{Product Common Name}),\n\tUniqueCount = count()) ~> GetUniqueSpicesProductCombination\nLookupDimProduct split(isNull(Species_ID_Lkp),\n\tisNull(Product_Id_Lkp) || (not(isNull(Species_ID_Lkp)) && not(isNull(Product_Id_Lkp)) && notEquals(Species_Common_Name_Lkp, Product_Species_Common_Name_Lkp)),\n\tdisjoint: true) ~> SplitSpeciesProductDetails@(Species, Product)\nDerivedSpeciesDetails select(mapColumn(\n\t\tSpecies_Code,\n\t\tGenus,\n\t\tSpecies,\n\t\tSpecies_Common_Name = {Species Common Name},\n\t\tSpecies_Group,\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name,\n\t\tInsert_DateTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSpeciesOutput\nAddPoductDetails select(mapColumn(\n\t\tProduct_Code,\n\t\tProduct_Type,\n\t\tProduct_Global_Grade,\n\t\tProduct_Common_Name = {Product Common Name},\n\t\tProduct_Desc,\n\t\tProduct_Group,\n\t\tGL_Code,\n\t\tSpecies_Common_Name = {Species Common Name},\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name,\n\t\tInsert_DateTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectProductOutput\nSplitSpeciesProductDetails@Product derive(Product_Group = $Product_Group,\n\t\tProduct_Code = 'Undefined',\n\t\tProduct_Type = 'Undefined',\n\t\tProduct_Global_Grade = 'Undefined',\n\t\tProduct_Desc = 'Undefined',\n\t\tGL_Code = 'Undefined') ~> AddPoductDetails\nReadSource filter(not(isNull({Species Common Name})) && not(isNull({Product Common Name}))) ~> RemoveBlankSpeciesProduct\nSplitSpeciesProductDetails@Species derive(Species_Code = 'Undefined',\n\t\tGenus = 'Undefined',\n\t\tSpecies = 'Undefined',\n\t\tSpecies_Group = 'Undefined') ~> DerivedSpeciesDetails\nSelectSpeciesOutput sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tSpecies_Code,\n\t\tGenus,\n\t\tSpecies,\n\t\tSpecies_Common_Name,\n\t\tSpecies_Group,\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name,\n\t\tInsert_DateTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> InsertNewSpeciesDim\nSelectProductOutput sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tProduct_Code,\n\t\tProduct_Type,\n\t\tProduct_Global_Grade,\n\t\tProduct_Common_Name,\n\t\tProduct_Desc,\n\t\tProduct_Group,\n\t\tGL_Code,\n\t\tSpecies_Common_Name,\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name,\n\t\tInsert_DateTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> InsertNewProductDim"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadMktFactMarket_Pass2_ProcessAndPopulate_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CSVgenericWithParameter_ds",
								"type": "DatasetReference"
							},
							"name": "ReadSource"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "DatamartDimProductLkp"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "DatamartDimSpeciesLkp"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "DatamartDimDataSource"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "DatamartDimTypePartial"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "DatamartDimRegion"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "RelationalDateDimension"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "DatamartDimUom"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "DatamartDimDeliveryPoint"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "DatamartDimCurrency"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "DatamartDimIndicator"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "DatamartDimType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "FactErrorTable"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "TargetFactInsert"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "TargetFactDelete"
						}
					],
					"transformations": [
						{
							"name": "SelectDimProductLkp"
						},
						{
							"name": "DataTransformation"
						},
						{
							"name": "CheckInputRecord"
						},
						{
							"name": "SelectDimSpeciesLkp"
						},
						{
							"name": "LookupDimSpecies"
						},
						{
							"name": "LookupDimCurrency"
						},
						{
							"name": "SelectDimDataSourceLkp"
						},
						{
							"name": "SelectDimTypePartialLkp"
						},
						{
							"name": "SelectDimRegionLkp"
						},
						{
							"name": "SelectDateDimensionLkp"
						},
						{
							"name": "SelectDimUomLkp"
						},
						{
							"name": "SelectDimDeliverPointLkp"
						},
						{
							"name": "SelectDimCurrencyLkp"
						},
						{
							"name": "SelectDimIndicatorLkp"
						},
						{
							"name": "LookupDimProduct"
						},
						{
							"name": "LookupDimDataSource"
						},
						{
							"name": "LookupDateDimension"
						},
						{
							"name": "LookupDimUom"
						},
						{
							"name": "LookupDimDeliveryPoint"
						},
						{
							"name": "LookupDimIndicator"
						},
						{
							"name": "LookupDimRegionUseCountryRegionKeys"
						},
						{
							"name": "LookupDimRegionUseCountryKey"
						},
						{
							"name": "RenameRegionLkpAddCR"
						},
						{
							"name": "RenameRegionLkpAddCO"
						},
						{
							"name": "LookupOriginPort"
						},
						{
							"name": "RenameOriginPortLkpColumnsAddOP"
						},
						{
							"name": "LookupDestinationPort"
						},
						{
							"name": "RenameDestinationPortAddDP"
						},
						{
							"name": "LookupTypeDimensionPartial"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "DataTransformation2"
						},
						{
							"name": "Unpivot"
						},
						{
							"name": "SelectDimTypeLkp"
						},
						{
							"name": "LookupDimType"
						},
						{
							"name": "SelectOutput"
						},
						{
							"name": "DataTransformation3"
						},
						{
							"name": "FilterInvalidRows"
						},
						{
							"name": "DerivedErrorMessage"
						},
						{
							"name": "CombinedErrMsg"
						},
						{
							"name": "SelectErrorOutput"
						},
						{
							"name": "FilterProcessGroup"
						},
						{
							"name": "RemoveInvalidType"
						},
						{
							"name": "GetFactBusinessKeys"
						},
						{
							"name": "SelectDeleteColumns"
						},
						{
							"name": "AlterRowDelete"
						}
					],
					"script": "parameters{\n\tGeneratedBatchDate as string,\n\tWorkbookName as string,\n\tWorksheetName as string,\n\tMasterPipelineName as string,\n\tProduct_Group as string,\n\tDimSchemaName as string,\n\tErrorSchemaName as string,\n\tShortFactTableName as string,\n\tShortErrorTableName as string\n}\nsource(output(\n\t\t{Source Metric} as string,\n\t\t{Period Date} as string,\n\t\tCountry as string,\n\t\tRegion as string,\n\t\t{Species Common Name} as string,\n\t\t{Product Common Name} as string,\n\t\tCurrency as string,\n\t\tUOM as string,\n\t\tMarket as string,\n\t\t{Delivery Point} as string,\n\t\tIndicator as string,\n\t\tType as string,\n\t\tBasis as string,\n\t\t{Origin Port Country} as string,\n\t\t{Origin Port Region} as string,\n\t\t{Origin Port} as string,\n\t\t{Destination Port Country} as string,\n\t\t{Destination Port Region} as string,\n\t\t{Destination Port} as string,\n\t\t{Vessel Name} as string,\n\t\tLow as string,\n\t\tHigh as string,\n\t\tAverage as string,\n\t\tSpot as string,\n\t\tComment as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ReadSource\nsource(output(\n\t\tProduct_Id as integer,\n\t\tProduct_Code as string,\n\t\tProduct_Type as string,\n\t\tProduct_Global_Grade as string,\n\t\tProduct_Common_Name as string,\n\t\tProduct_Desc as string,\n\t\tProduct_Group as string,\n\t\tGL_Code as string,\n\t\tSpecies_Common_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT [Product_Id]\\n      ,[Product_Code]\\n      ,[Product_Type]\\n      ,[Product_Global_Grade]\\n      ,[Product_Common_Name]\\n      ,[Product_Desc]\\n      ,[Product_Group]\\n      ,[GL_Code]\\n      ,[Species_Common_Name]\\nFROM [datamart].[Dim_Product]\\nWHERE [Product_Id] != -1',\n\tformat: 'query') ~> DatamartDimProductLkp\nsource(output(\n\t\tSpecies_ID as integer,\n\t\tSpecies_Code as string,\n\t\tGenus as string,\n\t\tSpecies as string,\n\t\tSpecies_Common_Name as string,\n\t\tSpecies_Group as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT [Species_ID]\\n      ,[Species_Code]\\n      ,[Genus]\\n      ,[Species]\\n      ,[Species_Common_Name]\\n      ,[Species_Group]\\n  FROM [datamart].[Dim_Species]\\nWHERE [Species_ID] != -1',\n\tformat: 'query') ~> DatamartDimSpeciesLkp\nsource(output(\n\t\tData_Source_Id as integer,\n\t\tMetric_Short_Name as string,\n\t\tSource_Name as string,\n\t\tSource_Type as string,\n\t\tSource_Link as string,\n\t\tSource_Data_Type as string,\n\t\tData_Process_Type as string,\n\t\tSource_Status as string,\n\t\tFrequency as string,\n\t\tConfidence_Level as string,\n\t\tPerson_Responsible as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT [Data_Source_Id]\\n      ,[Metric_Short_Name]\\n      ,[Source_Name]\\n      ,[Source_Type]\\n      ,[Source_Link]\\n      ,[Source_Data_Type]\\n      ,[Data_Process_Type]\\n      ,[Source_Status]\\n      ,[Frequency]\\n      ,[Confidence_Level]\\n      ,[Person_Responsible]\\nFROM [datamart].[Dim_Data_Source]\\nWHERE [Data_Source_Id] != -1',\n\tformat: 'query') ~> DatamartDimDataSource\nsource(output(\n\t\tType as string,\n\t\tBasis as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT\\n       [Type]\\n      ,[Basis]\\nFROM [datamart].[Dim_Type]\\nWHERE [Type_ID] != -1',\n\tformat: 'query') ~> DatamartDimTypePartial\nsource(output(\n\t\tRegion_ID as integer,\n\t\tCountry_Code as string,\n\t\tCountry as string,\n\t\tRegion_Code as string,\n\t\tRegion as string,\n\t\tPort_Loc as string,\n\t\tLong as decimal(20,15),\n\t\tLat as decimal(20,15)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT [Region_ID]\\n      ,[Country_Code]\\n      ,[Country]\\n      ,[Region_Code]\\n      ,[Region]\\n      ,[Port_Loc]\\n      ,[Long]\\n      ,[Lat]\\nFROM [datamart].[Dim_Region]\\nWHERE [Region_ID] != -1',\n\tformat: 'query') ~> DatamartDimRegion\nsource(output(\n\t\tDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT [Date]\\nFROM [relational].[DateDimension]',\n\tformat: 'query') ~> RelationalDateDimension\nsource(output(\n\t\tUOM_ID as integer,\n\t\tUOM_Name as string,\n\t\tUOM_Desc as string,\n\t\tUOM_Type as string,\n\t\tUOM_Long_Desc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT [UOM_ID]\\n      ,[UOM_Name]\\n      ,[UOM_Desc]\\n      ,[UOM_Type]\\n      ,[UOM_Long_Desc]\\nFROM [datamart].[Dim_UOM]\\nWHERE [UOM_ID] != -1',\n\tformat: 'query') ~> DatamartDimUom\nsource(output(\n\t\tDelivery_Point_ID as integer,\n\t\tDeliver_Point_Code as string,\n\t\tDelivery_Point as string,\n\t\tDelivery_Point_Desc as string,\n\t\tDelivery_Point_Long_Desc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT [Delivery_Point_ID]\\n      ,[Deliver_Point_Code]\\n      ,[Delivery_Point]\\n      ,[Delivery_Point_Desc]\\n      ,[Delivery_Point_Long_Desc]\\nFROM [datamart].[Dim_Delivery_Point]\\nWHERE [Delivery_Point_ID] != -1',\n\tformat: 'query') ~> DatamartDimDeliveryPoint\nsource(output(\n\t\tCurrency_ID as integer,\n\t\tCurrency_Code as string,\n\t\tCurrency_Name as string,\n\t\tCurrency_Numeric_Code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT [Currency_ID]\\n      ,[Currency_Code]\\n      ,[Currency_Name]\\n      ,[Currency_Numeric_Code]\\nFROM [datamart].[Dim_Currency]\\nWHERE [Currency_ID] != -1',\n\tformat: 'query') ~> DatamartDimCurrency\nsource(output(\n\t\tIndicator_Id as integer,\n\t\tIndicator_Code as string,\n\t\tIndicator_Desc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT [Indicator_Id]\\n      ,[Indicator_Code]\\n      ,[Indicator_Desc]\\nFROM [datamart].[Dim_Indicator]\\nWHERE [Indicator_Id] != -1',\n\tformat: 'query') ~> DatamartDimIndicator\nsource(output(\n\t\tType_ID as integer,\n\t\tType as string,\n\t\tBasis as string,\n\t\tPrice_Point as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT [Type_ID]\\n      ,[Type]\\n      ,[Basis]\\n      ,[Price_Point]\\nFROM [datamart].[Dim_Type]\\nWHERE [Type_ID] != -1',\n\tformat: 'query') ~> DatamartDimType\nFilterProcessGroup select(mapColumn(\n\t\tProduct_Id_Lkp = Product_Id,\n\t\tProduct_Code_Lkp = Product_Code,\n\t\tProduct_Type_Lkp = Product_Type,\n\t\tProduct_Global_Grade_Lkp = Product_Global_Grade,\n\t\tProduct_Common_Name_Lkp = Product_Common_Name,\n\t\tProduct_Desc_Lkp = Product_Desc,\n\t\tProduct_Group_Lkp = Product_Group,\n\t\tGL_Code_Lkp = GL_Code,\n\t\tProduct_Species_Common_Name_Lkp = Species_Common_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimProductLkp\nReadSource derive(Source_File = concat($WorkbookName,'-', $WorksheetName),\n\t\tBatch_ID = replace(replace(replace($GeneratedBatchDate, \"-\", \"\"),\":\",\"\"),\" \",\"\"),\n\t\tProcess_Name = $MasterPipelineName,\n\t\t{Period Date} = toDate({Period Date}),\n\t\tCountry_Redefined_For_Lkp = iifNull(Country, \"Undefined\"),\n\t\tRegion_Redefined_For_Lkp = iifNull(Region, \"Undefined\"),\n\t\tInsert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney')) ~> DataTransformation\nRenameDestinationPortAddDP split(not(isNull(DateDimension_Date_Lkp)) && \r\nnot(isNull(Data_Source_Id_Lkp)) && \r\n( not(isNull(Species_ID_Lkp)) && not(isNull(Product_Id_Lkp)) && equals({Species Common Name}, Product_Species_Common_Name_Lkp) ) && \r\n( not(isNull(Region_ID_Lkp_CR)) || ( isNull(Region) && not(isNull(Region_ID_Lkp_CO)) ) ) && \r\n( not(isNull(Type_Lkp)) && not(isNull(Basis_Lkp)) ) && \r\n\r\n\r\n( isNull(Currency) || not(isNull(Currency_ID_Lkp)) ) && \r\n( isNull(UOM) || not(isNull(UOM_ID_Lkp)) ) && \r\n( isNull({Delivery Point}) || not(isNull(Delivery_Point_ID_Lkp)) ) &&\r\n( isNull(Indicator) || not(isNull(Indicator_Id_Lkp))) &&\r\n( (isNull({Origin Port Country}) && isNull({Origin Port Region}) && isNull({Origin Port})) || not(isNull(Region_ID_Lkp_OP)) ) &&\r\n( (isNull({Destination Port Country}) && isNull({Destination Port Region}) && isNull({Destination Port})) || not(isNull(Region_ID_Lkp_DP)) ),\n\tdisjoint: false) ~> CheckInputRecord@(Valid, Invalid)\nDatamartDimSpeciesLkp select(mapColumn(\n\t\tSpecies_ID_Lkp = Species_ID,\n\t\tSpecies_Code_Lkp = Species_Code,\n\t\tGenus_Lkp = Genus,\n\t\tSpecies_Lkp = Species,\n\t\tSpecies_Common_Name_Lkp = Species_Common_Name,\n\t\tSpecies_Group_Lkp = Species_Group\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimSpeciesLkp\nDataTransformation, SelectDimSpeciesLkp lookup({Species Common Name} == Species_Common_Name_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDimSpecies\nLookupTypeDimensionPartial, SelectDimCurrencyLkp lookup(Currency == Currency_Code_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDimCurrency\nDatamartDimDataSource select(mapColumn(\n\t\tData_Source_Id_Lkp = Data_Source_Id,\n\t\tMetric_Short_Name_Lkp = Metric_Short_Name,\n\t\tSource_Name_Lkp = Source_Name,\n\t\tSource_Type_Lkp = Source_Type,\n\t\tSource_Link_Lkp = Source_Link,\n\t\tSource_Data_Type_Lkp = Source_Data_Type,\n\t\tData_Process_Type_Lkp = Data_Process_Type,\n\t\tSource_Status_Lkp = Source_Status,\n\t\tFrequency_Lkp = Frequency,\n\t\tConfidence_Level_Lkp = Confidence_Level,\n\t\tPerson_Responsible_Lkp = Person_Responsible\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimDataSourceLkp\nDatamartDimTypePartial select(mapColumn(\n\t\tType_Lkp = Type,\n\t\tBasis_Lkp = Basis\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimTypePartialLkp\nDatamartDimRegion select(mapColumn(\n\t\tRegion_ID_Lkp = Region_ID,\n\t\tCountry_Code_Lkp = Country_Code,\n\t\tCountry_Lkp = Country,\n\t\tRegion_Code_Lkp = Region_Code,\n\t\tRegion_Lkp = Region,\n\t\tPort_Loc_Lkp = Port_Loc,\n\t\tLong_Lkp = Long,\n\t\tLat_Lkp = Lat\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimRegionLkp\nRelationalDateDimension select(mapColumn(\n\t\tDateDimension_Date_Lkp = Date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDateDimensionLkp\nDatamartDimUom select(mapColumn(\n\t\tUOM_ID_Lkp = UOM_ID,\n\t\tUOM_Name_Lkp = UOM_Name,\n\t\tUOM_Desc_Lkp = UOM_Desc,\n\t\tUOM_Type_Lkp = UOM_Type,\n\t\tUOM_Long_Desc_Lkp = UOM_Long_Desc\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimUomLkp\nDatamartDimDeliveryPoint select(mapColumn(\n\t\tDelivery_Point_ID_Lkp = Delivery_Point_ID,\n\t\tDeliver_Point_Code_Lkp = Deliver_Point_Code,\n\t\tDelivery_Point_Lkp = Delivery_Point,\n\t\tDelivery_Point_Desc_Lkp = Delivery_Point_Desc,\n\t\tDelivery_Point_Long_Desc_Lkp = Delivery_Point_Long_Desc\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimDeliverPointLkp\nDatamartDimCurrency select(mapColumn(\n\t\tCurrency_ID_Lkp = Currency_ID,\n\t\tCurrency_Code_Lkp = Currency_Code,\n\t\tCurrency_Name_Lkp = Currency_Name,\n\t\tCurrency_Numeric_Code_Lkp = Currency_Numeric_Code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimCurrencyLkp\nDatamartDimIndicator select(mapColumn(\n\t\tIndicator_Id_Lkp = Indicator_Id,\n\t\tIndicator_Code_Lkp = Indicator_Code,\n\t\tIndicator_Desc_Lkp = Indicator_Desc\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimIndicatorLkp\nLookupDimSpecies, SelectDimProductLkp lookup({Product Common Name} == Product_Common_Name_Lkp\n\t&& {Species Common Name} == Product_Species_Common_Name_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDimProduct\nRenameRegionLkpAddCO, SelectDimDataSourceLkp lookup({Source Metric} == Metric_Short_Name_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDimDataSource\nLookupDimDataSource, SelectDateDimensionLkp lookup({Period Date} == DateDimension_Date_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDateDimension\nLookupDimCurrency, SelectDimUomLkp lookup(UOM == UOM_Name_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDimUom\nLookupDimUom, SelectDimDeliverPointLkp lookup({Delivery Point} == Delivery_Point_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDimDeliveryPoint\nLookupDimDeliveryPoint, SelectDimIndicatorLkp lookup(Indicator == Indicator_Desc_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDimIndicator\nLookupDimProduct, SelectDimRegionLkp lookup(Country_Redefined_For_Lkp == Country_Lkp\n\t&& Region_Redefined_For_Lkp == Region_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDimRegionUseCountryRegionKeys\nRenameRegionLkpAddCR, SelectDimRegionLkp lookup(Country_Redefined_For_Lkp == Country_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDimRegionUseCountryKey\nLookupDimRegionUseCountryRegionKeys select(mapColumn(\n\t\t{Source Metric},\n\t\t{Period Date},\n\t\tCountry,\n\t\tRegion,\n\t\t{Species Common Name},\n\t\t{Product Common Name},\n\t\tCurrency,\n\t\tUOM,\n\t\tMarket,\n\t\t{Delivery Point},\n\t\tIndicator,\n\t\tType,\n\t\tBasis,\n\t\t{Origin Port Country},\n\t\t{Origin Port Region},\n\t\t{Origin Port},\n\t\t{Destination Port Country},\n\t\t{Destination Port Region},\n\t\t{Destination Port},\n\t\t{Vessel Name},\n\t\tLow,\n\t\tHigh,\n\t\tAverage,\n\t\tSpot,\n\t\tComment,\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name,\n\t\tInsert_Datetime,\n\t\tCountry_Redefined_For_Lkp,\n\t\tRegion_Redefined_For_Lkp,\n\t\tSpecies_ID_Lkp,\n\t\tSpecies_Code_Lkp,\n\t\tGenus_Lkp,\n\t\tSpecies_Lkp,\n\t\tSpecies_Common_Name_Lkp,\n\t\tSpecies_Group_Lkp,\n\t\tProduct_Id_Lkp,\n\t\tProduct_Code_Lkp,\n\t\tProduct_Type_Lkp,\n\t\tProduct_Global_Grade_Lkp,\n\t\tProduct_Common_Name_Lkp,\n\t\tProduct_Desc_Lkp,\n\t\tProduct_Group_Lkp,\n\t\tGL_Code_Lkp,\n\t\tProduct_Species_Common_Name_Lkp,\n\t\tRegion_ID_Lkp_CR = Region_ID_Lkp,\n\t\tCountry_Code_Lkp_CR = Country_Code_Lkp,\n\t\tCountry_Lkp_CR = Country_Lkp,\n\t\tRegion_Code_Lkp_CR = Region_Code_Lkp,\n\t\tRegion_Lkp_CR = Region_Lkp,\n\t\tPort_Loc_Lkp_CR = Port_Loc_Lkp,\n\t\tLong_Lkp_CR = Long_Lkp,\n\t\tLat_Lkp_CR = Lat_Lkp\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameRegionLkpAddCR\nLookupDimRegionUseCountryKey select(mapColumn(\n\t\t{Source Metric},\n\t\t{Period Date},\n\t\tCountry,\n\t\tRegion,\n\t\t{Species Common Name},\n\t\t{Product Common Name},\n\t\tCurrency,\n\t\tUOM,\n\t\tMarket,\n\t\t{Delivery Point},\n\t\tIndicator,\n\t\tType,\n\t\tBasis,\n\t\t{Origin Port Country},\n\t\t{Origin Port Region},\n\t\t{Origin Port},\n\t\t{Destination Port Country},\n\t\t{Destination Port Region},\n\t\t{Destination Port},\n\t\t{Vessel Name},\n\t\tLow,\n\t\tHigh,\n\t\tAverage,\n\t\tSpot,\n\t\tComment,\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name,\n\t\tInsert_Datetime,\n\t\tCountry_Redefined_For_Lkp,\n\t\tRegion_Redefined_For_Lkp,\n\t\tSpecies_ID_Lkp,\n\t\tSpecies_Code_Lkp,\n\t\tGenus_Lkp,\n\t\tSpecies_Lkp,\n\t\tSpecies_Common_Name_Lkp,\n\t\tSpecies_Group_Lkp,\n\t\tProduct_Id_Lkp,\n\t\tProduct_Code_Lkp,\n\t\tProduct_Type_Lkp,\n\t\tProduct_Global_Grade_Lkp,\n\t\tProduct_Common_Name_Lkp,\n\t\tProduct_Desc_Lkp,\n\t\tProduct_Group_Lkp,\n\t\tGL_Code_Lkp,\n\t\tProduct_Species_Common_Name_Lkp,\n\t\tRegion_ID_Lkp_CR,\n\t\tCountry_Code_Lkp_CR,\n\t\tCountry_Lkp_CR,\n\t\tRegion_Code_Lkp_CR,\n\t\tRegion_Lkp_CR,\n\t\tPort_Loc_Lkp_CR,\n\t\tLong_Lkp_CR,\n\t\tLat_Lkp_CR,\n\t\tRegion_ID_Lkp_CO = Region_ID_Lkp,\n\t\tCountry_Code_Lkp_CO = Country_Code_Lkp,\n\t\tCountry_Lkp_CO = Country_Lkp,\n\t\tRegion_Code_Lkp_CO = Region_Code_Lkp,\n\t\tRegion_Lkp_CO = Region_Lkp,\n\t\tPort_Loc_Lkp_CO = Port_Loc_Lkp,\n\t\tLong_Lkp_CO = Long_Lkp,\n\t\tLat_Lkp_CO = Lat_Lkp\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameRegionLkpAddCO\nLookupDimIndicator, SelectDimRegionLkp lookup({Origin Port Country} == Country_Code_Lkp\n\t&& {Destination Port Region} == Region_Code_Lkp\n\t&& {Origin Port} == Port_Loc_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupOriginPort\nLookupOriginPort select(mapColumn(\n\t\t{Source Metric},\n\t\t{Period Date},\n\t\tCountry,\n\t\tRegion,\n\t\t{Species Common Name},\n\t\t{Product Common Name},\n\t\tCurrency,\n\t\tUOM,\n\t\tMarket,\n\t\t{Delivery Point},\n\t\tIndicator,\n\t\tType,\n\t\tBasis,\n\t\t{Origin Port Country},\n\t\t{Origin Port Region},\n\t\t{Origin Port},\n\t\t{Destination Port Country},\n\t\t{Destination Port Region},\n\t\t{Destination Port},\n\t\t{Vessel Name},\n\t\tLow,\n\t\tHigh,\n\t\tAverage,\n\t\tSpot,\n\t\tComment,\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name,\n\t\tInsert_Datetime,\n\t\tCountry_Redefined_For_Lkp,\n\t\tRegion_Redefined_For_Lkp,\n\t\tSpecies_ID_Lkp,\n\t\tSpecies_Code_Lkp,\n\t\tGenus_Lkp,\n\t\tSpecies_Lkp,\n\t\tSpecies_Common_Name_Lkp,\n\t\tSpecies_Group_Lkp,\n\t\tProduct_Id_Lkp,\n\t\tProduct_Code_Lkp,\n\t\tProduct_Type_Lkp,\n\t\tProduct_Global_Grade_Lkp,\n\t\tProduct_Common_Name_Lkp,\n\t\tProduct_Desc_Lkp,\n\t\tProduct_Group_Lkp,\n\t\tGL_Code_Lkp,\n\t\tProduct_Species_Common_Name_Lkp,\n\t\tRegion_ID_Lkp_CR,\n\t\tCountry_Code_Lkp_CR,\n\t\tCountry_Lkp_CR,\n\t\tRegion_Code_Lkp_CR,\n\t\tRegion_Lkp_CR,\n\t\tPort_Loc_Lkp_CR,\n\t\tLong_Lkp_CR,\n\t\tLat_Lkp_CR,\n\t\tRegion_ID_Lkp_CO,\n\t\tCountry_Code_Lkp_CO,\n\t\tCountry_Lkp_CO,\n\t\tRegion_Code_Lkp_CO,\n\t\tRegion_Lkp_CO,\n\t\tPort_Loc_Lkp_CO,\n\t\tLong_Lkp_CO,\n\t\tLat_Lkp_CO,\n\t\tData_Source_Id_Lkp,\n\t\tMetric_Short_Name_Lkp,\n\t\tSource_Name_Lkp,\n\t\tSource_Type_Lkp,\n\t\tSource_Link_Lkp,\n\t\tSource_Data_Type_Lkp,\n\t\tData_Process_Type_Lkp,\n\t\tSource_Status_Lkp,\n\t\tFrequency_Lkp,\n\t\tConfidence_Level_Lkp,\n\t\tPerson_Responsible_Lkp,\n\t\tDateDimension_Date_Lkp,\n\t\tType_Lkp,\n\t\tBasis_Lkp,\n\t\tCurrency_ID_Lkp,\n\t\tCurrency_Code_Lkp,\n\t\tCurrency_Name_Lkp,\n\t\tCurrency_Numeric_Code_Lkp,\n\t\tUOM_ID_Lkp,\n\t\tUOM_Name_Lkp,\n\t\tUOM_Desc_Lkp,\n\t\tUOM_Type_Lkp,\n\t\tUOM_Long_Desc_Lkp,\n\t\tDelivery_Point_ID_Lkp,\n\t\tDeliver_Point_Code_Lkp,\n\t\tDelivery_Point_Lkp,\n\t\tDelivery_Point_Desc_Lkp,\n\t\tDelivery_Point_Long_Desc_Lkp,\n\t\tIndicator_Id_Lkp,\n\t\tIndicator_Code_Lkp,\n\t\tIndicator_Desc_Lkp,\n\t\tRegion_ID_Lkp_OP = Region_ID_Lkp,\n\t\tCountry_Code_Lkp_OP = Country_Code_Lkp,\n\t\tCountry_Lkp_OP = Country_Lkp,\n\t\tRegion_Code_Lkp_OP = Region_Code_Lkp,\n\t\tRegion_Lkp_OP = Region_Lkp,\n\t\tPort_Loc_Lkp_OP = Port_Loc_Lkp,\n\t\tLong_Lkp_OP = Long_Lkp,\n\t\tLat_Lkp_OP = Lat_Lkp\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameOriginPortLkpColumnsAddOP\nRenameOriginPortLkpColumnsAddOP, SelectDimRegionLkp lookup({Destination Port Country} == Country_Code_Lkp\n\t&& {Destination Port Region} == Region_Code_Lkp\n\t&& {Destination Port} == Port_Loc_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDestinationPort\nLookupDestinationPort select(mapColumn(\n\t\t{Source Metric},\n\t\t{Period Date},\n\t\tCountry,\n\t\tRegion,\n\t\t{Species Common Name},\n\t\t{Product Common Name},\n\t\tCurrency,\n\t\tUOM,\n\t\tMarket,\n\t\t{Delivery Point},\n\t\tIndicator,\n\t\tType,\n\t\tBasis,\n\t\t{Origin Port Country},\n\t\t{Origin Port Region},\n\t\t{Origin Port},\n\t\t{Destination Port Country},\n\t\t{Destination Port Region},\n\t\t{Destination Port},\n\t\t{Vessel Name},\n\t\tLow,\n\t\tHigh,\n\t\tAverage,\n\t\tSpot,\n\t\tComment,\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name,\n\t\tInsert_Datetime,\n\t\tCountry_Redefined_For_Lkp,\n\t\tRegion_Redefined_For_Lkp,\n\t\tSpecies_ID_Lkp,\n\t\tSpecies_Code_Lkp,\n\t\tGenus_Lkp,\n\t\tSpecies_Lkp,\n\t\tSpecies_Common_Name_Lkp,\n\t\tSpecies_Group_Lkp,\n\t\tProduct_Id_Lkp,\n\t\tProduct_Code_Lkp,\n\t\tProduct_Type_Lkp,\n\t\tProduct_Global_Grade_Lkp,\n\t\tProduct_Common_Name_Lkp,\n\t\tProduct_Desc_Lkp,\n\t\tProduct_Group_Lkp,\n\t\tGL_Code_Lkp,\n\t\tProduct_Species_Common_Name_Lkp,\n\t\tRegion_ID_Lkp_CR,\n\t\tCountry_Code_Lkp_CR,\n\t\tCountry_Lkp_CR,\n\t\tRegion_Code_Lkp_CR,\n\t\tRegion_Lkp_CR,\n\t\tPort_Loc_Lkp_CR,\n\t\tLong_Lkp_CR,\n\t\tLat_Lkp_CR,\n\t\tRegion_ID_Lkp_CO,\n\t\tCountry_Code_Lkp_CO,\n\t\tCountry_Lkp_CO,\n\t\tRegion_Code_Lkp_CO,\n\t\tRegion_Lkp_CO,\n\t\tPort_Loc_Lkp_CO,\n\t\tLong_Lkp_CO,\n\t\tLat_Lkp_CO,\n\t\tData_Source_Id_Lkp,\n\t\tMetric_Short_Name_Lkp,\n\t\tSource_Name_Lkp,\n\t\tSource_Type_Lkp,\n\t\tSource_Link_Lkp,\n\t\tSource_Data_Type_Lkp,\n\t\tData_Process_Type_Lkp,\n\t\tSource_Status_Lkp,\n\t\tFrequency_Lkp,\n\t\tConfidence_Level_Lkp,\n\t\tPerson_Responsible_Lkp,\n\t\tDateDimension_Date_Lkp,\n\t\tType_Lkp,\n\t\tBasis_Lkp,\n\t\tCurrency_ID_Lkp,\n\t\tCurrency_Code_Lkp,\n\t\tCurrency_Name_Lkp,\n\t\tCurrency_Numeric_Code_Lkp,\n\t\tUOM_ID_Lkp,\n\t\tUOM_Name_Lkp,\n\t\tUOM_Desc_Lkp,\n\t\tUOM_Type_Lkp,\n\t\tUOM_Long_Desc_Lkp,\n\t\tDelivery_Point_ID_Lkp,\n\t\tDeliver_Point_Code_Lkp,\n\t\tDelivery_Point_Lkp,\n\t\tDelivery_Point_Desc_Lkp,\n\t\tDelivery_Point_Long_Desc_Lkp,\n\t\tIndicator_Id_Lkp,\n\t\tIndicator_Code_Lkp,\n\t\tIndicator_Desc_Lkp,\n\t\tRegion_ID_Lkp_OP,\n\t\tCountry_Code_Lkp_OP,\n\t\tCountry_Lkp_OP,\n\t\tRegion_Code_Lkp_OP,\n\t\tRegion_Lkp_OP,\n\t\tPort_Loc_Lkp_OP,\n\t\tLong_Lkp_OP,\n\t\tLat_Lkp_OP,\n\t\tRegion_ID_Lkp_DP = Region_ID_Lkp,\n\t\tCountry_Code_Lkp_DP = Country_Code_Lkp,\n\t\tCountry_Lkp_DP = Country_Lkp,\n\t\tRegion_Code_Lkp_DP = Region_Code_Lkp,\n\t\tRegion_Lkp_DP = Region_Lkp,\n\t\tPort_Loc_Lkp_DP = Port_Loc_Lkp,\n\t\tLong_Lkp_DP = Long_Lkp,\n\t\tLat_Lkp_DP = Lat_Lkp\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameDestinationPortAddDP\nLookupDateDimension, SelectDimTypePartialLkp lookup(Type == Type_Lkp\n\t&& Basis == Basis_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupTypeDimensionPartial\nDataTransformation2 select(mapColumn(\n\t\tDateDimension_Date_Lkp,\n\t\tData_Source_Id_Lkp,\n\t\tRegion_ID_Lkp,\n\t\tSpecies_ID_Lkp,\n\t\tProduct_Id_Lkp,\n\t\tType,\n\t\tBasis,\n\t\tLow,\n\t\tHigh,\n\t\tAverage,\n\t\tSpot,\n\t\tUOM_ID_Lkp,\n\t\tDelivery_Point_ID_Lkp,\n\t\tCurrency_ID_Lkp,\n\t\tIndicator_Id_Lkp,\n\t\tRegion_ID_Lkp_OP,\n\t\tRegion_ID_Lkp_DP,\n\t\tMarket,\n\t\t{Vessel Name},\n\t\tComment,\n\t\tBatch_ID,\n\t\tProcess_Name,\n\t\tSource_File,\n\t\tInsert_Datetime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRequiredColumns\nCheckInputRecord@Valid derive(Region_ID_Lkp = iifNull(Region_ID_Lkp_CR, Region_ID_Lkp_CO),\n\t\tBatch_ID = toString(Batch_ID)) ~> DataTransformation2\nSelectRequiredColumns unpivot(output(\n\t\tValue_Type as string,\n\t\tValue as string\n\t),\n\tungroupBy(DateDimension_Date_Lkp,\n\t\tData_Source_Id_Lkp,\n\t\tRegion_ID_Lkp,\n\t\tSpecies_ID_Lkp,\n\t\tProduct_Id_Lkp,\n\t\tType,\n\t\tBasis,\n\t\tUOM_ID_Lkp,\n\t\tDelivery_Point_ID_Lkp,\n\t\tCurrency_ID_Lkp,\n\t\tIndicator_Id_Lkp,\n\t\tRegion_ID_Lkp_OP,\n\t\tRegion_ID_Lkp_DP,\n\t\tMarket,\n\t\t{Vessel Name},\n\t\tComment,\n\t\tBatch_ID,\n\t\tSource_File,\n\t\tProcess_Name,\n\t\tInsert_Datetime),\n\tlateral: false,\n\tignoreNullPivots: false) ~> Unpivot\nDatamartDimType select(mapColumn(\n\t\tType_ID_Lkp = Type_ID,\n\t\tType_Lkp = Type,\n\t\tBasis_Lkp = Basis,\n\t\tPrice_Point_Lkp = Price_Point\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimTypeLkp\nUnpivot, SelectDimTypeLkp lookup(Type == Type_Lkp\n\t&& Basis == Basis_Lkp\n\t&& Value_Type == Price_Point_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDimType\nDataTransformation3 select(mapColumn(\n\t\tPeriod_Date = DateDimension_Date_Lkp,\n\t\tData_Source_Id = Data_Source_Id_Lkp,\n\t\tRegion_ID = Region_ID_Lkp,\n\t\tSpecies_ID = Species_ID_Lkp,\n\t\tProduct_Id = Product_Id_Lkp,\n\t\tType_ID = Type_ID_Lkp,\n\t\tUOM_ID = UOM_ID_Lkp,\n\t\tDelivery_Point_ID = Delivery_Point_ID_Lkp,\n\t\tCurrency_ID = Currency_ID_Lkp,\n\t\tIndicator_Id = Indicator_Id_Lkp,\n\t\tOrigin_Port_ID = Region_ID_Lkp_OP,\n\t\tDestination_Port_ID = Region_ID_Lkp_DP,\n\t\tMarket,\n\t\tVessel_Name = {Vessel Name},\n\t\tValue,\n\t\tComment,\n\t\tInsert_Datetime,\n\t\tBatch_ID,\n\t\tSource_File,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectOutput\nRemoveInvalidType derive(Value = toDecimal(iifNull(Value, '0'),20,4),\n\t\tData_Source_Id_Lkp = iifNull(Data_Source_Id_Lkp, -1),\n\t\tRegion_ID_Lkp = iifNull(Region_ID_Lkp, -1),\n\t\tSpecies_ID_Lkp = iifNull(Species_ID_Lkp, -1),\n\t\tProduct_Id_Lkp = iifNull(Product_Id_Lkp, -1),\n\t\tType_ID_Lkp = iifNull(Type_ID_Lkp, -1),\n\t\tUOM_ID_Lkp = iifNull(UOM_ID_Lkp, -1),\n\t\tDelivery_Point_ID_Lkp = iifNull(Delivery_Point_ID_Lkp, -1),\n\t\tCurrency_ID_Lkp = iifNull(Currency_ID_Lkp, -1),\n\t\tIndicator_Id_Lkp = iifNull(Indicator_Id_Lkp, -1),\n\t\tRegion_ID_Lkp_OP = iifNull(Region_ID_Lkp_OP, -1),\n\t\tRegion_ID_Lkp_DP = iifNull(Region_ID_Lkp_DP, -1)) ~> DataTransformation3\nCheckInputRecord@Invalid filter(not(isNull({Period Date})) || \r\nnot(isNull({Source Metric})) || \r\nnot(isNull({Species Common Name})) || \r\nnot(isNull({Product Common Name})) || \r\n( not(isNull(Country)) && not(isNull(Region)) ) ||\r\n( not(isNull(Country)) && isNull(Region) ) ||  \r\n( not(isNull(Type)) && not(isNull(Basis)) )) ~> FilterInvalidRows\nFilterInvalidRows derive(Period_Date_ErrMsg = iif(isNull(DateDimension_Date_Lkp), \"Period Date Error/\", \"\"),\n\t\tSource_ErrMsg = iif(isNull(Data_Source_Id_Lkp), \"Source Error/\", \"\"),\n\t\tRegion_ErrMsg = iif(isNull(iifNull(Region_ID_Lkp_CR, Region_ID_Lkp_CO)), \"Region Error/\", \"\"),\n\t\tType_ErrMsg = iif(isNull(Type_Lkp) || isNull(Basis_Lkp), \"Type Error/\", \"\"),\n\t\tSpecies_ErrMsg = iif(isNull(Species_ID_Lkp), \"Species Error/\", \"\"),\n\t\tProduct_ErrMsg = iif(isNull(Product_Id_Lkp), \"Product Error/\", \"\"),\n\t\tCurrency_ErrMsg = iif(not(isNull(Currency)) && isNull(Currency_ID_Lkp), \"Currency Error/\", \"\"),\n\t\tUom_ErrMsg = iif(not(isNull(UOM)) && isNull(UOM_ID_Lkp), \"UOM Error/\", \"\"),\n\t\tDeliveryPoint_ErrMsg = iif(not(isNull({Delivery Point})) && isNull(Delivery_Point_ID_Lkp), \"Delivery Point Error/\", \"\"),\n\t\tIndicator_ErrMsg = iif(not(isNull(Indicator)) && isNull(Indicator_Id_Lkp), \"Indicator Error/\", \"\"),\n\t\tOriginPort_ErrMsg = iif(not(isNull({Origin Port Country})) || not(isNull({Destination Port Region})) || not(isNull({Origin Port})) && isNull(Region_ID_Lkp_OP), \"Origin Port Error/\", \"\"),\n\t\tDestinationPort_ErrMsg = iif(not(isNull({Destination Port Country})) || not(isNull({Destination Port Region})) || not(isNull({Destination Port})) && isNull(Region_ID_Lkp_DP), \"Destination Port Error/\", \"\"),\n\t\tSpecies_Product_Combo_ErrMsg = iif(not(isNull(Product_Id_Lkp)) && not(isNull(Species_ID_Lkp)) && notEquals({Species Common Name},Product_Species_Common_Name_Lkp), \"Species Product Combination Error/\", \"\")) ~> DerivedErrorMessage\nDerivedErrorMessage derive(Combined_ErrMsg = concat(Period_Date_ErrMsg, Source_ErrMsg, Region_ErrMsg, Type_ErrMsg, Species_ErrMsg, Product_ErrMsg, Currency_ErrMsg, Uom_ErrMsg, DeliveryPoint_ErrMsg, Indicator_ErrMsg, OriginPort_ErrMsg, DestinationPort_ErrMsg, Species_Product_Combo_ErrMsg)) ~> CombinedErrMsg\nCombinedErrMsg select(mapColumn(\n\t\tMetric_Short_Name = {Source Metric},\n\t\tPeriod_Date = {Period Date},\n\t\tCountry,\n\t\tRegion,\n\t\tSpecies_Common_Name = {Species Common Name},\n\t\tProduct_Common_Name = {Product Common Name},\n\t\tCurrency,\n\t\tUOM,\n\t\tMarket,\n\t\tDelivery_Point = {Delivery Point},\n\t\tIndicator,\n\t\tType,\n\t\tBasis,\n\t\tOrigin_Port_Country = {Origin Port Country},\n\t\tOrigin_Port_Region = {Origin Port Region},\n\t\tOrigin_Port = {Origin Port},\n\t\tDestination_Port_Country = {Destination Port Country},\n\t\tDestination_Port_Region = {Destination Port Region},\n\t\tDestination_Port = {Destination Port},\n\t\tVessel_Name = {Vessel Name},\n\t\tLow,\n\t\tHigh,\n\t\tAverage,\n\t\tSpot,\n\t\tComment,\n\t\tInsert_Datetime,\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name,\n\t\tError_Desc = Combined_ErrMsg\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectErrorOutput\nDatamartDimProductLkp filter(Product_Group == $Product_Group) ~> FilterProcessGroup\nLookupDimType filter(not(isNull(Type_ID_Lkp))) ~> RemoveInvalidType\nSelectOutput aggregate(groupBy(Period_Date,\n\t\tData_Source_Id,\n\t\tRegion_ID,\n\t\tSpecies_ID,\n\t\tProduct_Id,\n\t\tType_ID),\n\tUniqueCount = count()) ~> GetFactBusinessKeys\nGetFactBusinessKeys select(mapColumn(\n\t\tPeriod_Date,\n\t\tData_Source_Id,\n\t\tRegion_ID,\n\t\tSpecies_ID,\n\t\tProduct_Id,\n\t\tType_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDeleteColumns\nSelectDeleteColumns alterRow(deleteIf(not(isNull(Period_Date)))) ~> AlterRowDelete\nSelectErrorOutput sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tMetric_Short_Name,\n\t\tPeriod_Date,\n\t\tCountry,\n\t\tRegion,\n\t\tSpecies_Common_Name,\n\t\tProduct_Common_Name,\n\t\tCurrency,\n\t\tUOM,\n\t\tMarket,\n\t\tDelivery_Point,\n\t\tIndicator,\n\t\tType,\n\t\tBasis,\n\t\tOrigin_Port_Country,\n\t\tOrigin_Port_Region,\n\t\tOrigin_Port,\n\t\tDestination_Port_Country,\n\t\tDestination_Port_Region,\n\t\tDestination_Port,\n\t\tVessel_Name,\n\t\tLow,\n\t\tHigh,\n\t\tAverage,\n\t\tSpot,\n\t\tComment,\n\t\tInsert_Datetime,\n\t\tSource_File,\n\t\tProcess_Name,\n\t\tError_Desc\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: (1)) ~> FactErrorTable\nSelectOutput sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tPeriod_Date,\n\t\tData_Source_ID = Data_Source_Id,\n\t\tRegion_ID,\n\t\tSpecies_ID,\n\t\tProduct_ID = Product_Id,\n\t\tType_ID,\n\t\tUOM_ID,\n\t\tDelivery_Point_ID,\n\t\tCurrency_ID,\n\t\tIndicator_ID = Indicator_Id,\n\t\tOrigin_Port_ID,\n\t\tDestination_Port_Id = Destination_Port_ID,\n\t\tMarket,\n\t\tVessel_Name,\n\t\tvalue = Value,\n\t\tcomment = Comment,\n\t\tInsert_DateTime = Insert_Datetime,\n\t\tBatch_ID,\n\t\tSource_File,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: (3)) ~> TargetFactInsert\nAlterRowDelete sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['Period_Date','Data_Source_ID','Region_ID','Species_ID','Product_ID','Type_ID'],\n\tformat: 'table',\n\tmapColumn(\n\t\tPeriod_Date,\n\t\tData_Source_ID = Data_Source_Id,\n\t\tRegion_ID,\n\t\tSpecies_ID,\n\t\tProduct_ID = Product_Id,\n\t\tType_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: (2)) ~> TargetFactDelete"
				}
			},
			"dependsOn": []
		}
	]
}