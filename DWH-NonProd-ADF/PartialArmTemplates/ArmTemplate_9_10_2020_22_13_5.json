{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DWH-NonProd-ADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktMasterDimDeliveryPoint_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MasterUtcTag",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "MasterUtcTag",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SendEmailFileReceivedConfirmation",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GenerateBatchDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://prod-22.australiaeast.logic.azure.com:443/workflows/3b1500dc3148452bbe30bca4d4caece9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=dfK9OZs5XMno2zPpeLj2Oz6qGMDDZv3xXA4ZgOeRD9M",
								"type": "Expression"
							},
							"method": "POST",
							"body": {
								"value": "{\n \"dataFactoryName\":\"DataFactory Name: @{pipeline().DataFactory}\",\n \"pipelineName\":\"Pipeline Name: @{pipeline().Pipeline}\",\n \"messageHeader\":\"@{pipeline().parameters.WorkbookName} : Confirmed For Processing\",\n \"messageBody1\":\"\",\n \"messageBody2\":\"\",\n \"messageBody3\":\"Thank You. We will inform you after the file has been processed.\",\n \"messageBody4\":\"\",\n \"messageBody5\":\"\",\n \"emailAddress\":\"@{pipeline().parameters.emailAddress}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyWorksheetToCsvFile",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SendEmailFileReceivedConfirmation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Deliver Point Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Deliver Point Code",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Delivery Point",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Delivery Point",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@variables('WorksheetName')",
										"type": "Expression"
									},
									"Range": {
										"value": "@variables('WorksheetRange')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CSVgenericWithParameter_ds",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "MKTINFO_DIM_DELIVERY_POINT_Extract.csv",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "TruncateAuditTable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyWorksheetToCsvFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[audit].[TruncateAuditTable]",
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "Dim_Delivery_Point_Error",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ProcessDimension",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "TruncateAuditTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktUpdateDimDeliveryPoint_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"WorksheetName": {
									"value": "@variables('WorksheetName')",
									"type": "Expression"
								},
								"GeneratedBatchDate": {
									"value": "@variables('GenerateBatchDate')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GenerateBatchDate",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "MasterUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "GenerateBatchDate",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcnow(),'AUS Eastern Standard Time'),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyToSourceArchive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDimension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToSourceArchive_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat(substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CopyToSourceArchiveFailed",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDimension",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToSourceArchive_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat(substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CopyToDataLake",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyToSourceArchive",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToDatalake_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat('manual/',substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteFromSourceLandingScrubbed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyToDataLake",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingScrubbed_ds",
								"type": "DatasetReference"
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"prefix": {
									"value": "MKTINFO_DIM_DELIVERY_POINT",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingScrubbedFailed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyToSourceArchiveFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingScrubbed_ds",
								"type": "DatasetReference"
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"prefix": {
									"value": "MKTINFO_DIM_DELIVERY_POINT",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingScrubbed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingRawFailed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingScrubbedFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "UpdateSourceRegisterFailed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingRawFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[SourceRegisterTableInsert]",
							"storedProcedureParameters": {
								"ArchiveContainer": {
									"value": {
										"value": "sourcearchive",
										"type": "Expression"
									},
									"type": "String"
								},
								"Comment": {
									"value": {
										"value": "Pipeline Failed",
										"type": "Expression"
									},
									"type": "String"
								},
								"DatalakeContainer": {
									"value": {
										"value": "nonfinancial",
										"type": "Expression"
									},
									"type": "String"
								},
								"EtlUtcTag": {
									"value": {
										"value": "@variables('MasterUtcTag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputDate": {
									"value": {
										"value": "@variables('GenerateBatchDate')",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputMethod": {
									"value": {
										"value": "manual",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": {
										"value": "ABORT",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceContainer": {
									"value": {
										"value": "sourcelandingraw",
										"type": "Expression"
									},
									"type": "String"
								},
								"TargetContainer": {
									"value": {
										"value": "sourcelandingscrubbed",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UpdateSourceRegisterTable",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingRaw",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktUpdateSourceRegister_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": {
									"value": "[[audit].[Dim_Delivery_Point_Error]",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@variables('MasterUtcTag')",
									"type": "Expression"
								},
								"MasterPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"GenerateBatchDate": {
									"value": "@variables('GenerateBatchDate')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendFinalEmail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UpdateSourceRegisterTable",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsMktSendMailOK_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": {
									"value": "[[audit].[Dim_Delivery_Point_Error]",
									"type": "Expression"
								},
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendFinalEmailFailed",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "UpdateSourceRegisterFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://prod-22.australiaeast.logic.azure.com:443/workflows/3b1500dc3148452bbe30bca4d4caece9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=dfK9OZs5XMno2zPpeLj2Oz6qGMDDZv3xXA4ZgOeRD9M",
								"type": "Expression"
							},
							"method": "POST",
							"body": {
								"value": "{\n \"dataFactoryName\":\"DataFactory Name: @{pipeline().DataFactory}\",\n \"pipelineName\":\"Pipeline Name: @{pipeline().Pipeline}\",\n \"messageHeader\":\"@{pipeline().parameters.WorkbookName} : Load Failed\",\n \"messageBody1\":\"Market Information\",\n \"messageBody2\":\"\",\n \"messageBody3\":\"We are not able to load your file. Something is wrong\",\n \"messageBody4\":\"\",\n \"messageBody5\":\"Fix data and submit your file again.\",\n \"emailAddress\":\"@{pipeline().parameters.emailAddress}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SendFinalEmailCopyFailed",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "CopyWorksheetToCsvFile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://prod-22.australiaeast.logic.azure.com:443/workflows/3b1500dc3148452bbe30bca4d4caece9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=dfK9OZs5XMno2zPpeLj2Oz6qGMDDZv3xXA4ZgOeRD9M",
								"type": "Expression"
							},
							"method": "POST",
							"body": {
								"value": "{\n \"dataFactoryName\":\"DataFactory Name: @{pipeline().DataFactory}\",\n \"pipelineName\":\"Pipeline Name: @{pipeline().Pipeline}\",\n \"messageHeader\":\"@{pipeline().parameters.WorkbookName} : Load Failed\",\n \"messageBody1\":\"Market Information\",\n \"messageBody2\":\"\",\n \"messageBody3\":\"We are not able to load your file. Something is wrong during copy\",\n \"messageBody4\":\"\",\n \"messageBody5\":\"Fix data and submit your file again.\",\n \"emailAddress\":\"@{pipeline().parameters.emailAddress}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"emailAddress": {
						"type": "string",
						"defaultValue": "weiyin.leow@asggroup.com.au"
					},
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Market Info Dimensions.xlsx"
					}
				},
				"variables": {
					"WorksheetName": {
						"type": "String",
						"defaultValue": "Delivery Point"
					},
					"WorksheetRange": {
						"type": "String",
						"defaultValue": "A8:B999"
					},
					"GenerateBatchDate": {
						"type": "String"
					},
					"MasterUtcTag": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CSVgenericWithParameter_ds')]",
				"[concat(variables('factoryId'), '/pipelines/ProcessMktUpdateDimDeliveryPoint_pl')]",
				"[concat(variables('factoryId'), '/datasets/BinaryFromSourceLandingScrubbed_ds')]",
				"[concat(variables('factoryId'), '/pipelines/ProcessMktUpdateSourceRegister_pl')]",
				"[concat(variables('factoryId'), '/pipelines/ProcessOpsMktSendMailOK_pl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktUpdateDimDeliveryPoint_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ProcessDimData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadMktDimDeliveryPoint_InsertUpdate_df",
								"type": "DataFlowReference",
								"parameters": {
									"GeneratedBatchDate": {
										"value": "'@{pipeline().parameters.GeneratedBatchDate}'",
										"type": "Expression"
									},
									"WorkbookName": {
										"value": "'@{pipeline().parameters.WorkbookName}'",
										"type": "Expression"
									},
									"WorksheetName": {
										"value": "'@{pipeline().parameters.WorksheetName}'",
										"type": "Expression"
									},
									"MasterPipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReadSource": {
										"FileName": {
											"value": "MKTINFO_DIM_DELIVERY_POINT_Extract.csv",
											"type": "Expression"
										}
									},
									"TargetDim": {
										"Schema": {
											"value": "datamart",
											"type": "Expression"
										},
										"TableName": {
											"value": "Dim_Delivery_Point",
											"type": "Expression"
										}
									},
									"ErrorTable": {
										"Schema": {
											"value": "audit",
											"type": "Expression"
										},
										"TableName": {
											"value": "Dim_Delivery_Point_Error",
											"type": "Expression"
										}
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"parameters": {
					"WorkbookName": {
						"type": "string"
					},
					"WorksheetName": {
						"type": "string"
					},
					"GeneratedBatchDate": {
						"type": "string"
					},
					"MasterPipelineName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/LoadMktDimDeliveryPoint_InsertUpdate_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktUpdateSourceRegister_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetResultFromErrorTable",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ERROR_COUNT,\n  CASE WHEN ERROR_COUNT = 0 THEN 'SUCCESS'\n  ELSE 'FAIL'\n  END RUN_STATUS,\n  CASE WHEN ERROR_COUNT = 0 THEN NULL\n  ELSE 'Not all record loaded successfully'\n  END COMMENT_MSG\n  FROM (\n        SELECT COUNT(*) ERROR_COUNT FROM @{pipeline().parameters.ErrorTableName}\n)x",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "UpdateSourceRegister",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "GetResultFromErrorTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[SourceRegisterTableInsert]",
							"storedProcedureParameters": {
								"ArchiveContainer": {
									"value": {
										"value": "sourcearchive",
										"type": "Expression"
									},
									"type": "String"
								},
								"Comment": {
									"value": {
										"value": "@activity('GetResultFromErrorTable').output.firstRow.COMMENT_MSG",
										"type": "Expression"
									},
									"type": "String"
								},
								"DatalakeContainer": {
									"value": {
										"value": "nonfinancial",
										"type": "Expression"
									},
									"type": "String"
								},
								"EtlUtcTag": {
									"value": {
										"value": "@pipeline().parameters.MasterUtcTag",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputDate": {
									"value": {
										"value": "@pipeline().parameters.GenerateBatchDate",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputMethod": {
									"value": {
										"value": "manual",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessName": {
									"value": {
										"value": "@pipeline().parameters.MasterPipelineName",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": {
										"value": "@activity('GetResultFromErrorTable').output.firstRow.RUN_STATUS",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceContainer": {
									"value": {
										"value": "sourcelandingraw",
										"type": "Expression"
									},
									"type": "String"
								},
								"TargetContainer": {
									"value": {
										"value": "sourcelandingscrubbed",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"WorkbookName": {
						"type": "string"
					},
					"ErrorTableName": {
						"type": "string"
					},
					"MasterUtcTag": {
						"type": "string"
					},
					"MasterPipelineName": {
						"type": "string"
					},
					"GenerateBatchDate": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOpsMktSendMailOK_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetErrorCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) ERROR_COUNT FROM @{pipeline().parameters.ErrorTableName}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "IsErrorOrNoError",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetErrorCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GetErrorCount').output.firstRow.ERROR_COUNT,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WebWarningEmail",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "https://prod-22.australiaeast.logic.azure.com:443/workflows/3b1500dc3148452bbe30bca4d4caece9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=dfK9OZs5XMno2zPpeLj2Oz6qGMDDZv3xXA4ZgOeRD9M",
											"type": "Expression"
										},
										"method": "POST",
										"body": {
											"value": "{\n \"dataFactoryName\":\"DataFactory Name: @{pipeline().parameters.DataFactoryName}\",\n \"pipelineName\":\"Pipeline Name: @{pipeline().parameters.PipelineName}\",\n \"messageHeader\":\"\"@{pipeline().parameters.WorkbookName} : Loaded With Error\",\n \"messageBody1\":\"Market Information\",\n \"messageBody2\":\"\",\n \"messageBody3\":\"Please see error in error table : @{pipeline().parameters.ErrorTableName}\",\n \"messageBody4\":\"\",\n \"messageBody5\":\"Error count : @{activity('GetErrorCount').output.firstRow.ERROR_COUNT}\",\n \"emailAddress\":\"@{pipeline().parameters.emailAddress}\"\n}",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SendSuccessEmail",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "https://prod-22.australiaeast.logic.azure.com:443/workflows/3b1500dc3148452bbe30bca4d4caece9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=dfK9OZs5XMno2zPpeLj2Oz6qGMDDZv3xXA4ZgOeRD9M",
											"type": "Expression"
										},
										"method": "POST",
										"body": {
											"value": "{\n \"dataFactoryName\":\"DataFactory Name: @{pipeline().parameters.DataFactoryName}\",\n \"pipelineName\":\"Pipeline Name: @{pipeline().parameters.PipelineName}\",\n \"messageHeader\":\"@{pipeline().parameters.WorkbookName} : Loaded Successfully\",\n \"messageBody1\":\"Market Information\",\n \"messageBody2\":\"\",\n \"messageBody3\":\"\",\n \"messageBody4\":\"\",\n \"messageBody5\":\"Error count : @{activity('GetErrorCount').output.firstRow.ERROR_COUNT}\",\n \"emailAddress\":\"@{pipeline().parameters.emailAddress}\"\n}",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"DataFactoryName": {
						"type": "string"
					},
					"PipelineName": {
						"type": "string"
					},
					"WorkbookName": {
						"type": "string"
					},
					"ErrorTableName": {
						"type": "string"
					},
					"emailAddress": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryFromSourceLandingScrubbed_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "It describes the destination store.",
				"linkedServiceName": {
					"referenceName": "BlobStore_nfdwhstaging",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "sourcelandingscrubbed"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSVgenericWithParameter_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStore_nfdwhstaging",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "sourcelandingscrubbed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSVgeneric_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStore_nfdwhstaging",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "sourcelandingscrubbed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadMktDimDeliveryPoint_InsertUpdate_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CSVgenericWithParameter_ds",
								"type": "DatasetReference"
							},
							"name": "ReadSource"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "RelationalDimDeliveryPointLkp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "TargetDim"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "ErrorTable"
						}
					],
					"transformations": [
						{
							"name": "SelectDimDeliveryPointLkp"
						},
						{
							"name": "DataTransformation"
						},
						{
							"name": "CheckDimensionRecordExist"
						},
						{
							"name": "AddAdditionalAudit"
						},
						{
							"name": "AlterRowInsertUpdate"
						},
						{
							"name": "CheckInputRecord"
						},
						{
							"name": "AddErrorDetail"
						},
						{
							"name": "RemoveBlankRow"
						},
						{
							"name": "GetNewOrModified"
						}
					],
					"script": "parameters{\n\tGeneratedBatchDate as string,\n\tWorkbookName as string,\n\tWorksheetName as string,\n\tMasterPipelineName as string\n}\nsource(output(\n\t\t{Deliver Point Code} as string,\n\t\t{Delivery Point} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> ReadSource\nsource(output(\n\t\tDelivery_Point_ID as integer,\n\t\tDeliver_Point_Code as string,\n\t\tDelivery_Point as string,\n\t\tInsert_DateTime as timestamp,\n\t\tUpdate_DateTime as timestamp,\n\t\tProcess_Name as string,\n\t\tSource_File as string,\n\t\tBatch_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT [Delivery_Point_ID]\\n      ,[Deliver_Point_Code]\\n      ,[Delivery_Point]\\n      ,[Insert_DateTime]\\n      ,[Update_DateTime]\\n      ,[Process_Name]\\n      ,[Source_File]\\n      ,[Batch_ID]\\n  FROM [datamart].[Dim_Delivery_Point]',\n\tformat: 'query') ~> RelationalDimDeliveryPointLkp\nRelationalDimDeliveryPointLkp select(mapColumn(\n\t\tDelivery_Point_ID_Lkp = Delivery_Point_ID,\n\t\tDeliver_Point_Code_Lkp = Deliver_Point_Code,\n\t\tDelivery_Point_Lkp = Delivery_Point,\n\t\tInsert_DateTime_Lkp = Insert_DateTime,\n\t\tUpdate_DateTime_Lkp = Update_DateTime,\n\t\tProcess_Name_Lkp = Process_Name,\n\t\tSource_File_Lkp = Source_File,\n\t\tBatch_ID_Lkp = Batch_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimDeliveryPointLkp\nReadSource derive(Source_File = concat($WorkbookName,'-', $WorksheetName),\n\t\tBatch_ID = replace(replace(replace($GeneratedBatchDate, \"-\", \"\"),\":\",\"\"),\" \",\"\"),\n\t\tProcess_Name = $MasterPipelineName) ~> DataTransformation\nCheckInputRecord@Valid, SelectDimDeliveryPointLkp lookup({Deliver Point Code} == Deliver_Point_Code_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> CheckDimensionRecordExist\nGetNewOrModified derive(InsertUpdateFlag = iif(isNull(Deliver_Point_Code_Lkp), \"I\", \"U\"),\n\t\tInsert_DateTime = iif(isNull(Deliver_Point_Code_Lkp), fromUTC(currentUTC(), 'Australia/Sydney'), Insert_DateTime_Lkp),\n\t\tUpdate_DateTime = iif(isNull(Deliver_Point_Code_Lkp), toTimestamp(\"\"), fromUTC(currentUTC(), 'Australia/Sydney')),\n\t\tProcess_Name = Process_Name,\n\t\tBatch_ID = Batch_ID) ~> AddAdditionalAudit\nAddAdditionalAudit alterRow(insertIf(equals(InsertUpdateFlag,\"I\")),\n\tupdateIf(equals(InsertUpdateFlag,\"U\"))) ~> AlterRowInsertUpdate\nDataTransformation split(and(not(isNull({Deliver Point Code})), not(isNull({Delivery Point}))),\n\tdisjoint: false) ~> CheckInputRecord@(Valid, Invalid)\nRemoveBlankRow derive(Error_Desc = toString(\"Delivery Point Code / Delivery Point\"),\n\t\tInsert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney')) ~> AddErrorDetail\nCheckInputRecord@Invalid filter(not(isNull({Deliver Point Code})) || not(isNull({Delivery Point}))) ~> RemoveBlankRow\nCheckDimensionRecordExist filter(isNull(Deliver_Point_Code_Lkp) || notEquals({Deliver Point Code}, Deliver_Point_Code_Lkp) || notEquals({Delivery Point}, Delivery_Point_Lkp)) ~> GetNewOrModified\nAlterRowInsertUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['Deliver_Point_Code'],\n\tformat: 'table',\n\tmapColumn(\n\t\tDeliver_Point_Code = {Deliver Point Code},\n\t\tDelivery_Point = {Delivery Point},\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name,\n\t\tInsert_DateTime,\n\t\tUpdate_DateTime\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TargetDim\nAddErrorDetail sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tDeliver_Point_Code = {Deliver Point Code},\n\t\tDelivery_Point = {Delivery Point},\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name,\n\t\tError_Desc,\n\t\tInsert_Datetime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ErrorTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CSVgenericWithParameter_ds')]"
			]
		}
	]
}