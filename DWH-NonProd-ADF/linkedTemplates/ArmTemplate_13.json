{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DWH-NonProd-ADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PipelineCopyFailedBlobToFileshare_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Move files from one folder to another folder",
				"activities": [
					{
						"name": "GetFileList",
						"description": "Get the list of file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDataBlobSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "ForEachFile",
						"description": "Iterate each file, and move them one by one.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterFiles').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyIfFileExist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "LookupSourceRegisterTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('LookupSourceRegisterTable').output.firstRow.TOTREC,0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "CopyBlobErrorFileToFileshare",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"wildcardFileName": {
																"value": "@{item().name}",
																"type": "Expression"
															}
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "FileServerWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "BinaryDataBlobSourceLandingRaw_ds",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "BinaryDataSourceFileshareEtlError_ds",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											},
											{
												"name": "DeleteFailedBlob",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "CopyBlobErrorFileToFileshare",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "BinaryDataBlobSourceLandingRaw_ds",
														"type": "DatasetReference",
														"parameters": {}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{item().name}",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "LookupSourceRegisterTable",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT COUNT(*) AS TOTREC\n  FROM [log].[Source_Register_Table]\n  WHERE [ORIGINAL_BLOB_NAME] = '@{item().name}'\n  AND [ETL_IS_PROCESSED] = 'N' AND ETL_RUN_STATUS = 'FAILED'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "FilterFiles",
						"description": "Only files will be selected, the source-folders will not be selected.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetFileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileList').output.childitems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineMoveFiles_fileshare_to_blob_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Move files from one folder to another folder",
				"activities": [
					{
						"name": "GetFileList",
						"description": "Get the list of file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDataSourceFileshareDirectory_MoveFile_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "ForEachFile",
						"description": "Iterate each file, and move them one by one.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterFiles').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CSVorGEOJSONfilesOnly",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(endswith(item().name,'.csv'), endswith(item().name,'.geojson') ) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "CopyFiromFilestoreToBlobstore",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FileServerReadSettings",
															"recursive": false,
															"wildcardFileName": {
																"value": "@{item().name}",
																"type": "Expression"
															}
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "BinaryDataSourceFileshareDirectory_MoveFile_ds",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "BinaryDataDestinationBlob_MoveFile_ds",
														"type": "DatasetReference",
														"parameters": {
															"filename": {
																"value": "@{item().name}",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DeleteFromFilestore",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "CopyFiromFilestoreToBlobstore",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "BinaryDataSourceFileshareDirectory_MoveFile_ds",
														"type": "DatasetReference",
														"parameters": {}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "FileServerReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{item().name}",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "FilterFiles",
						"description": "Only files will be selected, the source-folders will not be selected.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetFileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileList').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineSendMail_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckReportableUtcTag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) as UTC_TAG_COUNT FROM log.source_register_table\nWHERE etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckReportableUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('CheckReportableUtcTag').output.firstRow.UTC_TAG_COUNT,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "GetProcessedFiles",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'Y'\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetNotProcessedFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and etl_utc_tag is null\n\t\t\t   and original_blob_name like '@{pipeline().parameters.File_Pattern}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Not_Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetErrorDuringProcessFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetNotProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and (etl_run_status like 'FAIL%' or etl_run_status like 'RUN%')\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as ErrorDuringProcess_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SuccessOrFailMail",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "GetErrorDuringProcessFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-12.australiaeast.logic.azure.com:443/workflows/f7a9fbbc810043f28c16fd6bcf3b2f68/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8yphnNtSS85GDIgCI8OiOwpDghciKo7S9hRjuy5ITI4",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"dataFactoryName": "@pipeline().parameters.Parent_DataFactory",
											"pipelineName": "@pipeline().parameters.Parent_Pipeline",
											"messageHeader": "@pipeline().parameters.Success_Fail_Header",
											"messageProcessed": "@activity('GetProcessedFiles').output.firstRow",
											"messageNotProcessed": "@activity('GetNotProcessedFiles').output.firstRow",
											"messageErrorDuringProcess": "@activity('GetErrorDuringProcessFiles').output.firstRow"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Parent_DataFactory": {
						"type": "string"
					},
					"Parent_Pipeline": {
						"type": "string"
					},
					"Success_Fail_Header": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"File_Pattern": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineSendMail_pl1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckReportableUtcTag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) as UTC_TAG_COUNT FROM log.source_register_table\nWHERE etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckReportableUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('CheckReportableUtcTag').output.firstRow.UTC_TAG_COUNT,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "GetProcessedFiles",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'Y'\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetNotProcessedFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and etl_utc_tag is null\n\t\t\t   and original_blob_name like '@{pipeline().parameters.File_Pattern}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Not_Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetErrorDuringProcessFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetNotProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and (etl_run_status like 'FAIL%' or etl_run_status like 'RUN%')\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as ErrorDuringProcess_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SuccessOrFailMail",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "GetErrorDuringProcessFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-12.australiaeast.logic.azure.com:443/workflows/f7a9fbbc810043f28c16fd6bcf3b2f68/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8yphnNtSS85GDIgCI8OiOwpDghciKo7S9hRjuy5ITI4",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"dataFactoryName": "@pipeline().parameters.Parent_DataFactory",
											"pipelineName": "@pipeline().parameters.Parent_Pipeline",
											"messageHeader": "@pipeline().parameters.Success_Fail_Header",
											"messageProcessed": "@activity('GetProcessedFiles').output.firstRow",
											"messageNotProcessed": "@activity('GetNotProcessedFiles').output.firstRow",
											"messageErrorDuringProcess": "@activity('GetErrorDuringProcessFiles').output.firstRow"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Parent_DataFactory": {
						"type": "string"
					},
					"Parent_Pipeline": {
						"type": "string"
					},
					"Success_Fail_Header": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"File_Pattern": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineSendMail_pl2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckReportableUtcTag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) as UTC_TAG_COUNT FROM log.source_register_table\nWHERE etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds2",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckReportableUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('CheckReportableUtcTag').output.firstRow.UTC_TAG_COUNT,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "GetProcessedFiles",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'Y'\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds2",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetNotProcessedFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and etl_utc_tag is null\n\t\t\t   and original_blob_name like '@{pipeline().parameters.File_Pattern}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Not_Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds2",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetErrorDuringProcessFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetNotProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and (etl_run_status like 'FAIL%' or etl_run_status like 'RUN%')\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as ErrorDuringProcess_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds2",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SuccessOrFailMail",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "GetErrorDuringProcessFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-12.australiaeast.logic.azure.com:443/workflows/f7a9fbbc810043f28c16fd6bcf3b2f68/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8yphnNtSS85GDIgCI8OiOwpDghciKo7S9hRjuy5ITI4",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"dataFactoryName": "@pipeline().parameters.Parent_DataFactory",
											"pipelineName": "@pipeline().parameters.Parent_Pipeline",
											"messageHeader": "@pipeline().parameters.Success_Fail_Header",
											"messageProcessed": "@activity('GetProcessedFiles').output.firstRow",
											"messageNotProcessed": "@activity('GetNotProcessedFiles').output.firstRow",
											"messageErrorDuringProcess": "@activity('GetErrorDuringProcessFiles').output.firstRow"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Parent_DataFactory": {
						"type": "string"
					},
					"Parent_Pipeline": {
						"type": "string"
					},
					"Success_Fail_Header": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"File_Pattern": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineSendMail_pl3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckReportableUtcTag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) as UTC_TAG_COUNT FROM log.source_register_table\nWHERE etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds3",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckReportableUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('CheckReportableUtcTag').output.firstRow.UTC_TAG_COUNT,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "GetProcessedFiles",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'Y'\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds3",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetNotProcessedFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and etl_utc_tag is null\n\t\t\t   and original_blob_name like '@{pipeline().parameters.File_Pattern}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Not_Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds3",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetErrorDuringProcessFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetNotProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and (etl_run_status like 'FAIL%' or etl_run_status like 'RUN%')\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as ErrorDuringProcess_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds3",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SuccessOrFailMail",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "GetErrorDuringProcessFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-12.australiaeast.logic.azure.com:443/workflows/f7a9fbbc810043f28c16fd6bcf3b2f68/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8yphnNtSS85GDIgCI8OiOwpDghciKo7S9hRjuy5ITI4",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"dataFactoryName": "@pipeline().parameters.Parent_DataFactory",
											"pipelineName": "@pipeline().parameters.Parent_Pipeline",
											"messageHeader": "@pipeline().parameters.Success_Fail_Header",
											"messageProcessed": "@activity('GetProcessedFiles').output.firstRow",
											"messageNotProcessed": "@activity('GetNotProcessedFiles').output.firstRow",
											"messageErrorDuringProcess": "@activity('GetErrorDuringProcessFiles').output.firstRow"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Parent_DataFactory": {
						"type": "string"
					},
					"Parent_Pipeline": {
						"type": "string"
					},
					"Success_Fail_Header": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"File_Pattern": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineSendMail_pl4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckReportableUtcTag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) as UTC_TAG_COUNT FROM log.source_register_table\nWHERE etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds4",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckReportableUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('CheckReportableUtcTag').output.firstRow.UTC_TAG_COUNT,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "GetProcessedFiles",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'Y'\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds4",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetNotProcessedFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and etl_utc_tag is null\n\t\t\t   and original_blob_name like '@{pipeline().parameters.File_Pattern}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Not_Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds4",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetErrorDuringProcessFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetNotProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and (etl_run_status like 'FAIL%' or etl_run_status like 'RUN%')\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as ErrorDuringProcess_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds4",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SuccessOrFailMail",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "GetErrorDuringProcessFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-12.australiaeast.logic.azure.com:443/workflows/f7a9fbbc810043f28c16fd6bcf3b2f68/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8yphnNtSS85GDIgCI8OiOwpDghciKo7S9hRjuy5ITI4",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"dataFactoryName": "@pipeline().parameters.Parent_DataFactory",
											"pipelineName": "@pipeline().parameters.Parent_Pipeline",
											"messageHeader": "@pipeline().parameters.Success_Fail_Header",
											"messageProcessed": "@activity('GetProcessedFiles').output.firstRow",
											"messageNotProcessed": "@activity('GetNotProcessedFiles').output.firstRow",
											"messageErrorDuringProcess": "@activity('GetErrorDuringProcessFiles').output.firstRow"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Parent_DataFactory": {
						"type": "string"
					},
					"Parent_Pipeline": {
						"type": "string"
					},
					"Success_Fail_Header": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"File_Pattern": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineSendMail_pl5')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckReportableUtcTag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) as UTC_TAG_COUNT FROM log.source_register_table\nWHERE etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds5",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckReportableUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('CheckReportableUtcTag').output.firstRow.UTC_TAG_COUNT,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "GetProcessedFiles",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'Y'\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds5",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetNotProcessedFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and etl_utc_tag is null\n\t\t\t   and original_blob_name like '@{pipeline().parameters.File_Pattern}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Not_Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds5",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetErrorDuringProcessFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetNotProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and (etl_run_status like 'FAIL%' or etl_run_status like 'RUN%')\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as ErrorDuringProcess_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds5",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SuccessOrFailMail",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "GetErrorDuringProcessFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-12.australiaeast.logic.azure.com:443/workflows/f7a9fbbc810043f28c16fd6bcf3b2f68/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8yphnNtSS85GDIgCI8OiOwpDghciKo7S9hRjuy5ITI4",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"dataFactoryName": "@pipeline().parameters.Parent_DataFactory",
											"pipelineName": "@pipeline().parameters.Parent_Pipeline",
											"messageHeader": "@pipeline().parameters.Success_Fail_Header",
											"messageProcessed": "@activity('GetProcessedFiles').output.firstRow",
											"messageNotProcessed": "@activity('GetNotProcessedFiles').output.firstRow",
											"messageErrorDuringProcess": "@activity('GetErrorDuringProcessFiles').output.firstRow"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Parent_DataFactory": {
						"type": "string"
					},
					"Parent_Pipeline": {
						"type": "string"
					},
					"Success_Fail_Header": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"File_Pattern": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineSendMail_pl6')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckReportableUtcTag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) as UTC_TAG_COUNT FROM log.source_register_table\nWHERE etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds6",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckReportableUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('CheckReportableUtcTag').output.firstRow.UTC_TAG_COUNT,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "GetProcessedFiles",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'Y'\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds6",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetNotProcessedFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and etl_utc_tag is null\n\t\t\t   and original_blob_name like '@{pipeline().parameters.File_Pattern}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Not_Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds6",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetErrorDuringProcessFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetNotProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and (etl_run_status like 'FAIL%' or etl_run_status like 'RUN%')\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as ErrorDuringProcess_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds6",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SuccessOrFailMail",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "GetErrorDuringProcessFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-12.australiaeast.logic.azure.com:443/workflows/f7a9fbbc810043f28c16fd6bcf3b2f68/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8yphnNtSS85GDIgCI8OiOwpDghciKo7S9hRjuy5ITI4",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"dataFactoryName": "@pipeline().parameters.Parent_DataFactory",
											"pipelineName": "@pipeline().parameters.Parent_Pipeline",
											"messageHeader": "@pipeline().parameters.Success_Fail_Header",
											"messageProcessed": "@activity('GetProcessedFiles').output.firstRow",
											"messageNotProcessed": "@activity('GetNotProcessedFiles').output.firstRow",
											"messageErrorDuringProcess": "@activity('GetErrorDuringProcessFiles').output.firstRow"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Parent_DataFactory": {
						"type": "string"
					},
					"Parent_Pipeline": {
						"type": "string"
					},
					"Success_Fail_Header": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"File_Pattern": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineSendMail_pl7')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckReportableUtcTag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) as UTC_TAG_COUNT FROM log.source_register_table\nWHERE etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds7",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckReportableUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('CheckReportableUtcTag').output.firstRow.UTC_TAG_COUNT,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "GetProcessedFiles",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'Y'\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds7",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetNotProcessedFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and etl_utc_tag is null\n\t\t\t   and original_blob_name like '@{pipeline().parameters.File_Pattern}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Not_Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds7",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetErrorDuringProcessFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetNotProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and (etl_run_status like 'FAIL%' or etl_run_status like 'RUN%')\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as ErrorDuringProcess_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds7",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SuccessOrFailMail",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "GetErrorDuringProcessFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-12.australiaeast.logic.azure.com:443/workflows/f7a9fbbc810043f28c16fd6bcf3b2f68/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8yphnNtSS85GDIgCI8OiOwpDghciKo7S9hRjuy5ITI4",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"dataFactoryName": "@pipeline().parameters.Parent_DataFactory",
											"pipelineName": "@pipeline().parameters.Parent_Pipeline",
											"messageHeader": "@pipeline().parameters.Success_Fail_Header",
											"messageProcessed": "@activity('GetProcessedFiles').output.firstRow",
											"messageNotProcessed": "@activity('GetNotProcessedFiles').output.firstRow",
											"messageErrorDuringProcess": "@activity('GetErrorDuringProcessFiles').output.firstRow"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Parent_DataFactory": {
						"type": "string"
					},
					"Parent_Pipeline": {
						"type": "string"
					},
					"Success_Fail_Header": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"File_Pattern": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineSendMail_pl8')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckReportableUtcTag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) as UTC_TAG_COUNT FROM log.source_register_table\nWHERE etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds8",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckReportableUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('CheckReportableUtcTag').output.firstRow.UTC_TAG_COUNT,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "GetProcessedFiles",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'Y'\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds8",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetNotProcessedFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and etl_utc_tag is null\n\t\t\t   and original_blob_name like '@{pipeline().parameters.File_Pattern}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Not_Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds8",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetErrorDuringProcessFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetNotProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and (etl_run_status like 'FAIL%' or etl_run_status like 'RUN%')\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as ErrorDuringProcess_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds8",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SuccessOrFailMail",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "GetErrorDuringProcessFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-12.australiaeast.logic.azure.com:443/workflows/f7a9fbbc810043f28c16fd6bcf3b2f68/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8yphnNtSS85GDIgCI8OiOwpDghciKo7S9hRjuy5ITI4",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"dataFactoryName": "@pipeline().parameters.Parent_DataFactory",
											"pipelineName": "@pipeline().parameters.Parent_Pipeline",
											"messageHeader": "@pipeline().parameters.Success_Fail_Header",
											"messageProcessed": "@activity('GetProcessedFiles').output.firstRow",
											"messageNotProcessed": "@activity('GetNotProcessedFiles').output.firstRow",
											"messageErrorDuringProcess": "@activity('GetErrorDuringProcessFiles').output.firstRow"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Parent_DataFactory": {
						"type": "string"
					},
					"Parent_Pipeline": {
						"type": "string"
					},
					"Success_Fail_Header": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"File_Pattern": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineSendMail_pl9')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckReportableUtcTag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) as UTC_TAG_COUNT FROM log.source_register_table\nWHERE etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds9",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckReportableUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('CheckReportableUtcTag').output.firstRow.UTC_TAG_COUNT,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "GetProcessedFiles",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'Y'\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds9",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetNotProcessedFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and etl_utc_tag is null\n\t\t\t   and original_blob_name like '@{pipeline().parameters.File_Pattern}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Not_Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds9",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetErrorDuringProcessFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetNotProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and (etl_run_status like 'FAIL%' or etl_run_status like 'RUN%')\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as ErrorDuringProcess_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds9",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SuccessOrFailMail",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "GetErrorDuringProcessFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-12.australiaeast.logic.azure.com:443/workflows/f7a9fbbc810043f28c16fd6bcf3b2f68/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8yphnNtSS85GDIgCI8OiOwpDghciKo7S9hRjuy5ITI4",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"dataFactoryName": "@pipeline().parameters.Parent_DataFactory",
											"pipelineName": "@pipeline().parameters.Parent_Pipeline",
											"messageHeader": "@pipeline().parameters.Success_Fail_Header",
											"messageProcessed": "@activity('GetProcessedFiles').output.firstRow",
											"messageNotProcessed": "@activity('GetNotProcessedFiles').output.firstRow",
											"messageErrorDuringProcess": "@activity('GetErrorDuringProcessFiles').output.firstRow"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Parent_DataFactory": {
						"type": "string"
					},
					"Parent_Pipeline": {
						"type": "string"
					},
					"Success_Fail_Header": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"File_Pattern": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineSendMail_pl_old')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SuccessOrFailMail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetErrorDuringProcessFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-24.australiaeast.logic.azure.com:443/workflows/e28a90add06c495bbc9362b5109fb4c0/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=j2wEDAKOpnQ83iKkUa84aeGE6Nfb5604lp-z1-W4ek0",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"dataFactoryName": "@pipeline().parameters.Parent_DataFactory",
								"pipelineName": "@pipeline().parameters.Parent_Pipeline",
								"messageHeader": "@pipeline().parameters.Success_Fail_Header",
								"messageProcessed": "@activity('GetProcessedFiles').output.firstRow",
								"messageNotProcessed": "@activity('GetNotProcessedFiles').output.firstRow",
								"messageErrorDuringProcess": "@activity('GetErrorDuringProcessFiles').output.firstRow"
							}
						}
					},
					{
						"name": "GetProcessedFiles",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'Y'\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Processed_Files\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "GetNotProcessedFiles",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetProcessedFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and original_blob_name like '@{pipeline().parameters.File_Pattern}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Not_Processed_Files\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "GetErrorDuringProcessFiles",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetNotProcessedFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and etl_run_status like 'FAIL%'\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as ErrorDuringProcess_Files\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Parent_DataFactory": {
						"type": "string"
					},
					"Parent_Pipeline": {
						"type": "string"
					},
					"Success_Fail_Header": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"File_Pattern": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktSendMailOK_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetErrorCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) ERROR_COUNT FROM @{pipeline().parameters.ErrorTableName}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "IsErrorOrNoError",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetErrorCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GetErrorCount').output.firstRow.ERROR_COUNT,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WebWarningEmail",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "https://prod-22.australiaeast.logic.azure.com:443/workflows/3b1500dc3148452bbe30bca4d4caece9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=dfK9OZs5XMno2zPpeLj2Oz6qGMDDZv3xXA4ZgOeRD9M",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"value": "{\n \"dataFactoryName\":\"DataFactory Name: @{pipeline().parameters.DataFactoryName}\",\n \"pipelineName\":\"Pipeline Name: @{pipeline().parameters.PipelineName}\",\n \"messageHeader\":\"@{pipeline().parameters.WorkbookName} : Loaded With Error\",\n \"messageBody1\":\"Market Information\",\n \"messageBody2\":\"\",\n \"messageBody3\":\"Please see error in error table : @{pipeline().parameters.ErrorTableName}\",\n \"messageBody4\":\"\",\n \"messageBody5\":\"Error count : @{activity('GetErrorCount').output.firstRow.ERROR_COUNT}\",\n \"emailAddress\":\"@{pipeline().parameters.emailAddress}\"\n}",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SendSuccessEmail",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "https://prod-22.australiaeast.logic.azure.com:443/workflows/3b1500dc3148452bbe30bca4d4caece9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=dfK9OZs5XMno2zPpeLj2Oz6qGMDDZv3xXA4ZgOeRD9M",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"value": "{\n \"dataFactoryName\":\"DataFactory Name: @{pipeline().parameters.DataFactoryName}\",\n \"pipelineName\":\"Pipeline Name: @{pipeline().parameters.PipelineName}\",\n \"messageHeader\":\"@{pipeline().parameters.WorkbookName} : Loaded Successfully\",\n \"messageBody1\":\"Market Information\",\n \"messageBody2\":\"\",\n \"messageBody3\":\"\",\n \"messageBody4\":\"\",\n \"messageBody5\":\"Error count : @{activity('GetErrorCount').output.firstRow.ERROR_COUNT}\",\n \"emailAddress\":\"@{pipeline().parameters.emailAddress}\"\n}",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"DataFactoryName": {
						"type": "string"
					},
					"PipelineName": {
						"type": "string"
					},
					"WorkbookName": {
						"type": "string"
					},
					"ErrorTableName": {
						"type": "string"
					},
					"emailAddress": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktUpdateSourceRegister_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetResultFromErrorTable",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ERROR_COUNT,\n  CASE WHEN ERROR_COUNT = 0 THEN 'SUCCESS'\n  ELSE 'FAIL'\n  END RUN_STATUS,\n  CASE WHEN ERROR_COUNT = 0 THEN NULL\n  ELSE 'Not all record loaded successfully'\n  END COMMENT_MSG\n  FROM (\n        SELECT COUNT(*) ERROR_COUNT FROM @{pipeline().parameters.ErrorTableName}\n)x",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "UpdateSourceRegister",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "GetResultFromErrorTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[SourceRegisterTableInsert]",
							"storedProcedureParameters": {
								"ArchiveContainer": {
									"value": {
										"value": "sourcearchive",
										"type": "Expression"
									},
									"type": "String"
								},
								"Comment": {
									"value": {
										"value": "@activity('GetResultFromErrorTable').output.firstRow.COMMENT_MSG",
										"type": "Expression"
									},
									"type": "String"
								},
								"DatalakeContainer": {
									"value": {
										"value": "nonfinancial",
										"type": "Expression"
									},
									"type": "String"
								},
								"EtlUtcTag": {
									"value": {
										"value": "@pipeline().parameters.MasterUtcTag",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputDate": {
									"value": {
										"value": "@pipeline().parameters.GenerateBatchDate",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputMethod": {
									"value": {
										"value": "manual",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessName": {
									"value": {
										"value": "@pipeline().parameters.MasterPipelineName",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": {
										"value": "@activity('GetResultFromErrorTable').output.firstRow.RUN_STATUS",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceContainer": {
									"value": {
										"value": "sourcelandingraw",
										"type": "Expression"
									},
									"type": "String"
								},
								"TargetContainer": {
									"value": {
										"value": "sourcelandingscrubbed",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"WorkbookName": {
						"type": "string"
					},
					"ErrorTableName": {
						"type": "string"
					},
					"MasterUtcTag": {
						"type": "string"
					},
					"MasterPipelineName": {
						"type": "string"
					},
					"GenerateBatchDate": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOpsWorkbookExtractExcelToParguet_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Sub Master job to orchestrate multiple pipelines run. Each pipeline correspond to one tab in the Excel workbook.",
				"activities": [
					{
						"name": "PipelineMajorSevereIncidents",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineRiskOpportunityRegister",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineRelatedPartyTransactions",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineHarvestReconcilliation",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineOperations",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineContracts",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineStrategicProjects",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "ExtractCertifications",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Asset_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fund_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Reporting_Period",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Certification_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Validation Flag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Validation_Flag"
										}
									},
									{
										"source": {
											"name": "Certification Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_Type"
										}
									},
									{
										"source": {
											"name": "Certification Number",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_Number"
										}
									},
									{
										"source": {
											"name": "Next Audit Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Next_Audit_Date"
										}
									},
									{
										"source": {
											"name": "Certifying Body",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certifying_Body"
										}
									},
									{
										"source": {
											"name": "Certification Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_Date"
										}
									},
									{
										"source": {
											"name": "Certification End Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_End_Date"
										}
									},
									{
										"source": {
											"name": "Certified Entity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certified_Entity"
										}
									},
									{
										"source": {
											"name": "Number of Open Minor CARS",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Number_of_Open_Minor_CARS"
										}
									},
									{
										"source": {
											"name": "Number of Open Major CARS",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Number_of_Open_Major_CARS"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@pipeline().parameters.Certifications",
										"type": "Expression"
									},
									"Range": {
										"value": "@pipeline().parameters.CertificationsRange",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference",
								"parameters": {
									"ParquetFile": {
										"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.Certifications,'_',pipeline().parameters.CurrentQuarterDate,'_Extract')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ExtractTimberSales",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Asset_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fund_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Reporting_Period",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Validation Flag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Validation_Flag"
										}
									},
									{
										"source": {
											"name": "Customer",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Domestic or Export",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Domestic_or_Export"
										}
									},
									{
										"source": {
											"name": "Species",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Species",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Product Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product_Type"
										}
									},
									{
										"source": {
											"name": "Delivery Point",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Delivery_Point"
										}
									},
									{
										"source": {
											"name": "Price Point",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Price_Point"
										}
									},
									{
										"source": {
											"name": "Sales Unit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales_Unit"
										}
									},
									{
										"source": {
											"name": "Sales Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales_Quantity"
										}
									},
									{
										"source": {
											"name": "Average Sales Price",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Average_Sales_Price"
										}
									},
									{
										"source": {
											"name": "Sales Revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales_Revenue"
										}
									},
									{
										"source": {
											"name": "Production Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Production_Cost"
										}
									},
									{
										"source": {
											"name": "Stumpage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Stumpage",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Unit Stumpage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Unit_Stumpage"
										}
									},
									{
										"source": {
											"name": "Currency",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Currency",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Month",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Month",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Budget Sales Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Sales_Quantity"
										}
									},
									{
										"source": {
											"name": "Budget Sales Revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Sales_Revenue"
										}
									},
									{
										"source": {
											"name": "Budget Production Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Production_Cost"
										}
									},
									{
										"source": {
											"name": "Budget Unit Stumpage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Unit_Stumpage"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@pipeline().parameters.TimberSales",
										"type": "Expression"
									},
									"Range": {
										"value": "@pipeline().parameters.TimberSalesRange",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference",
								"parameters": {
									"ParquetFile": {
										"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.TimberSales,'_',pipeline().parameters.CurrentQuarterDate,'_Extract')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ExtractHarvestReconciliation",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Validation Flag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Validation_Flag",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Operation Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Operation_Type",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Area Treated",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Area_Treated",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Cost of Treatment",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Cost_of_Treatment",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Average Unit Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Average_Unit_Cost",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Budget Area Treated",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Area_Treated",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Budget Treatment Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Treatment_Cost",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Budget Unit Cost ",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Unit_Cost ",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "variation Area Treated",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "variation_Area_Treated",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "variation Treatment Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "variation_Treatment_Cost",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "variation Unit Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "variation_Unit_Cost",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Date Last Age Class Established",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Date_Last_Age_Class_Established",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Species Survived",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Species_Survived",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Survival rate of last age class established",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Survival_rate_of_last_age_class_established",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@pipeline().parameters.Operations",
										"type": "Expression"
									},
									"Range": {
										"value": "@pipeline().parameters.OperationsRange",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference",
								"parameters": {
									"ParquetFile": {
										"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.HarvestReconcilliation,'_',pipeline().parameters.CurrentQuarterDate,'_Extract')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"concurrency": 15,
				"parameters": {
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Wenita Forestry Products Q4 FY20 V2.xlsx"
					},
					"CurrentQuarterDate": {
						"type": "string",
						"defaultValue": "2020-06-30"
					},
					"OtherSales": {
						"type": "string",
						"defaultValue": "Other Sales"
					},
					"MajorSevereIncidents": {
						"type": "string",
						"defaultValue": "Major Severe Incidents"
					},
					"RiskOpportunityRegister": {
						"type": "string",
						"defaultValue": "Risk Opportunity Register"
					},
					"Certifications": {
						"type": "string",
						"defaultValue": "Certifications"
					},
					"RelatedPartyTransactions": {
						"type": "string",
						"defaultValue": "Related Party Transactions"
					},
					"TimberSales": {
						"type": "string",
						"defaultValue": "Timber Sales"
					},
					"HarvestReconcilliation": {
						"type": "string",
						"defaultValue": "Harvest Reconcilliation"
					},
					"Operations": {
						"type": "string",
						"defaultValue": "Operations"
					},
					"Contracts": {
						"type": "string",
						"defaultValue": "Contracts"
					},
					"StrategicProjects": {
						"type": "string",
						"defaultValue": "Strategic Projects"
					},
					"CurrentRunDateTime": {
						"type": "string",
						"defaultValue": "2020-08-01"
					},
					"MasterUtcTag": {
						"type": "string",
						"defaultValue": "2020-08-28T06:05:53.4181322Z"
					},
					"MasterPipeline": {
						"type": "string",
						"defaultValue": "ProcessOpsWorkbookMaster_pl"
					},
					"OtherSalesRange": {
						"type": "string",
						"defaultValue": "A6:O9999"
					},
					"MajorSevereIncidentsRange": {
						"type": "string"
					},
					"RiskOpportunityRegisterRange": {
						"type": "string"
					},
					"CertificationsRange": {
						"type": "string",
						"defaultValue": "A6:N99999"
					},
					"RelatedPartyTransactionsRange": {
						"type": "string"
					},
					"TimberSalesRange": {
						"type": "string",
						"defaultValue": "A6:W99999"
					},
					"HarvestReconcilliationRange": {
						"type": "string",
						"defaultValue": "A8:AA999"
					},
					"OperationsRange": {
						"type": "string",
						"defaultValue": "A8:Q9999"
					},
					"ContractsRange": {
						"type": "string"
					},
					"StrategicProjectsRange": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOpsWorkbookSendMailNotOK_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetEmailDetails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT DISTINCT\n CONCAT(CASE WHEN x.Error_Count > 0 OR (x.Error_Count = 0 AND x.Asset_Id IS NULL) THEN 'FAILED LOAD : ' ELSE 'SUCCESSFUL LOAD : ' END, x.Work_Sheet, ' - ', x.Work_Book) AS Message_Header,\n ass.Ops_Representative_Email, ass.Ops_Representative_Last_Name, ass.Ops_Representative_First_Name, x.Error_Table,\n CASE WHEN x.Error_Count > 0 THEN CAST(x.Error_Count AS VARCHAR) WHEN x.Error_Count = 0 AND x.Asset_Id IS NULL THEN 'UNKNOWN' ELSE '0' END AS Error_Count \nFROM (\nSELECT err.Error_Table, err.Work_Book, err.Work_Sheet, err.Error_Count, wb.Asset_Id, wb.Fund_Id\nFROM audit.OPS_Workbook_Worksheet_Asset_List wb\nRIGHT JOIN (\nSELECT 'audit.OPS_Certification_Error' AS Error_Table, 'Certifications' AS Work_Sheet, '@{pipeline().parameters.WorkbookName}' AS Work_Book, COUNT(*) AS Error_Count\nFROM audit.OPS_Certification_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}'\nUNION\nSELECT 'audit.OPS_Timber_Sales_Error' AS Error_Table, 'Timber Sales' AS Work_Sheet, '@{pipeline().parameters.WorkbookName}' AS Work_book, COUNT(*) AS Error_Count\nFROM audit.OPS_Timber_Sales_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}'\nUNION\nSELECT 'audit.OPS_Answers_Error' AS Error_Table, 'Answers_DWH_Export' AS Work_Sheet, '@{pipeline().parameters.WorkbookName}' AS Work_book, COUNT(*) AS Error_Count\nFROM audit.OPS_Answers_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}'\nUNION\nSELECT 'audit.OPS_Contract_Error' AS Error_Table, 'Contracts' AS Work_Sheet, '@{pipeline().parameters.WorkbookName}' AS Work_book, COUNT(*) AS Error_Count\nFROM audit.OPS_Contract_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}'\nUNION\nSELECT 'audit.OPS_Harvest_Reconciliation_Error' AS Error_Table, 'Harvest Reconcilliation' AS Work_Sheet, '@{pipeline().parameters.WorkbookName}' AS Work_book, COUNT(*) AS Error_Count\nFROM audit.OPS_Harvest_Reconciliation_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}'\nUNION\nSELECT 'audit.OPS_Incident_Error' AS Error_Table, 'Major Severe Incidents' AS Work_Sheet, '@{pipeline().parameters.WorkbookName}' AS Work_book, COUNT(*) AS Error_Count\nFROM audit.OPS_Incident_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}'\nUNION\nSELECT 'audit.OPS_Operation_Error' AS Error_Table, 'Operations' AS Work_Sheet, '@{pipeline().parameters.WorkbookName}' AS Work_book, COUNT(*) AS Error_Count\nFROM audit.OPS_Operation_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}'\nUNION\nSELECT 'audit.OPS_Sales_Other_Error' AS Error_Table, 'Other Sales' AS Work_Sheet, '@{pipeline().parameters.WorkbookName}' AS Work_book, COUNT(*) AS Error_Count\nFROM audit.OPS_Sales_Other_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}'\nUNION\nSELECT 'audit.OPS_Related_Party_Transaction_Error' AS Error_Table, 'Related Party Transactions' AS Work_Sheet, '@{pipeline().parameters.WorkbookName}' AS Work_book, COUNT(*) AS Error_Count\nFROM audit.OPS_Related_Party_Transaction_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}'\nUNION\nSELECT 'audit.OPS_Risk_Opportunity_Register_Error' AS Error_Table, 'Risk Opportunity Register' AS Work_Sheet, '@{pipeline().parameters.WorkbookName}' AS Work_book, COUNT(*) AS Error_Count\nFROM audit.OPS_Risk_Opportunity_Register_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}'\nUNION\nSELECT 'audit.OPS_Strategic_Project_Error' AS Error_Table, 'Strategic Projects' AS Work_Sheet, '@{pipeline().parameters.WorkbookName}' AS Work_book, COUNT(*) AS Error_Count\nFROM audit.OPS_Strategic_Project_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}'\n) err\nON wb.Work_Book = err.Work_Book and wb.Work_Sheet = err.Work_Sheet\n)x\nJOIN relational.Asset ass\nON 1=1\nWHERE ass.Asset_ID = '@{pipeline().parameters.Asset_ID}' AND ass.Fund_ID = '@{pipeline().parameters.Fund_ID}' AND ass.record_deleted_flag = 0;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLauditopsworkbookworksheetlist_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachWorkbookWorksheetEmail",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetEmailDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetEmailDetails').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SendEmail",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-19.australiaeast.logic.azure.com:443/workflows/7139728b716a4500b96a2fa094f691fa/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=I30JtkHJ6p4mNeMF6USxTdCCjTwTvY1dmmNC2Mvte7o",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"value": "{\n\"messageHeader\":\"@{item().Message_Header}\",\n\"message1\":\"Error Log Table: @{item().Error_Table}\",\n\"message2\":\"Error Count: @{item().Error_Count}\",\n\"message3\":\"If there is error, please check in the Error Log Table\",\n\"message4\":\"Thank you.\",\n\"message5\":\"Datafactory Name: DWH-Prod-ADF\",\n\"message6\":\"Pipeline Name: ProcessOPSWorkbookMaster_pl\",\n\"emailAddress\":\"@{item().Ops_Representative_Email}\",\n\"lastName\":\"@{item().Ops_Representative_Last_Name}\",\n\"firstName\":\"@{item().Ops_Representative_First_Name}\"\n}",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"DataFactoryName": {
						"type": "string",
						"defaultValue": "myFactory"
					},
					"PipelineName": {
						"type": "string",
						"defaultValue": "myPipeline"
					},
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Wenita Forestry Products Q4 FY20 V2.xlsx"
					},
					"Asset_ID": {
						"type": "string",
						"defaultValue": "WFP"
					},
					"Fund_ID": {
						"type": "string",
						"defaultValue": "ANZFOF2"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOpsWorkbookSendMailNotOkFinal_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetEmailDetails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT '!!! PIPELINE ERROR : SOME OR ALL EXCEL SHEETS MAY NOT BE LOADED' AS Message_Header,\nOps_Representative_Email, Ops_Representative_Last_Name, Ops_Representative_First_Name, Error_Table, Error_Count \nFROM (\nSELECT Ops_Representative_Email, Ops_Representative_Last_Name, Ops_Representative_First_Name,\n'None' AS Error_Table,\n'None'AS Error_Count\nFROM (\nSELECT DISTINCT ra.Ops_Representative_First_Name, ra.Ops_Representative_Last_Name, ra.Ops_Representative_Email\nFROM relational.Asset ra \nWHERE record_deleted_flag = 0 \nAND ra.Asset_ID = '@{pipeline().parameters.Asset_ID}' \nAND ra.Fund_ID = '@{pipeline().parameters.Fund_ID}') x\n)z;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLauditopsworkbookworksheetlist_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachWorkbookWorksheetEmail",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetEmailDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetEmailDetails').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SendEmail",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-19.australiaeast.logic.azure.com:443/workflows/7139728b716a4500b96a2fa094f691fa/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=I30JtkHJ6p4mNeMF6USxTdCCjTwTvY1dmmNC2Mvte7o",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"value": "{\n\"messageHeader\":\"@{item().Message_Header}\",\n\"message1\":\"\",\n\"message2\":\"Loading is incomplete. Please check for cause of failure.\",\n\"message3\":\"Thank you.\",\n\"message4\":\"\",\n\"message5\":\"Datafactory Name: DWH-Prod-ADF\",\n\"message6\":\"Pipeline Name: ProcessOPSWorkbookMaster_pl\",\n\"emailAddress\":\"@{item().Ops_Representative_Email}\",\n\"lastName\":\"@{item().Ops_Representative_Last_Name}\",\n\"firstName\":\"@{item().Ops_Representative_First_Name}\"\n}",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"DataFactoryName": {
						"type": "string",
						"defaultValue": "myFactory"
					},
					"PipelineName": {
						"type": "string",
						"defaultValue": "myPipeline"
					},
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Wenita Forestry Products Q4 FY20 V2.xlsx"
					},
					"Asset_ID": {
						"type": "string",
						"defaultValue": "WFP"
					},
					"Fund_ID": {
						"type": "string",
						"defaultValue": "ANZFOF2"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOpsWorkbookSendMailOK_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetEmailDetails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT CONCAT(CASE WHEN Error_Count = 0 THEN 'SUCCESSFUL LOAD : ' ELSE 'FAILED LOAD : ' END,Work_Sheet, ' - ', Work_Book) AS Message_Header,\nOps_Representative_Email, Ops_Representative_Last_Name, Ops_Representative_First_Name, Error_Table, Error_Count \nFROM (\nSELECT Work_Book, Work_Sheet, Ops_Representative_Email, Ops_Representative_Last_Name, Ops_Representative_First_Name,\nCASE WHEN Work_Sheet = 'Certifications' THEN 'audit.OPS_Certification_Error'\n     WHEN Work_Sheet = 'Timber Sales' THEN 'audit.OPS_Timber_Sales_Error'\n     WHEN Work_Sheet = 'Answers_DWH_Export' THEN 'audit.OPS_Answers_Error'\n\t WHEN Work_Sheet = 'Contracts' THEN 'audit.OPS_Contract_Error'\n\t WHEN Work_Sheet = 'Harvest Reconcilliation' THEN 'audit.OPS_Harvest_Reconciliation_Error'\n\t WHEN Work_Sheet = 'Major Severe Incidents' THEN 'audit.OPS_Incident_Error'\n\t WHEN Work_Sheet = 'Operations' THEN 'audit.OPS_Operation_Error'\n\t WHEN Work_Sheet = 'Other Sales' THEN 'audit.OPS_Sales_Other_Error'\n\t WHEN Work_Sheet = 'Related Party Transactions' THEN 'audit.OPS_Related_Party_Transaction_Error'\n\t WHEN Work_Sheet = 'Risk Opportunity Register' THEN 'audit.OPS_Risk_Opportunity_Register_Error'\n\t WHEN Work_Sheet = 'Strategic Projects' THEN 'audit.OPS_Strategic_Project_Error'\nELSE NULL END AS Error_Table,\nCASE WHEN Work_Sheet = 'Certifications' THEN (SELECT COUNT(*) FROM audit.OPS_Certification_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}')\n     WHEN Work_Sheet = 'Timber Sales' THEN (SELECT COUNT(*) FROM audit.OPS_Timber_Sales_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}')\n\t WHEN Work_Sheet = 'Answers_DWH_Export' THEN (SELECT COUNT(*) FROM audit.OPS_Answers_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}')\n\t WHEN Work_Sheet = 'Contracts' THEN (SELECT COUNT(*) FROM audit.OPS_Contract_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}')\n\t WHEN Work_Sheet = 'Harvest Reconcilliation' THEN (SELECT COUNT(*) FROM audit.OPS_Harvest_Reconciliation_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}')\n\t WHEN Work_Sheet = 'Major Severe Incidents' THEN (SELECT COUNT(*) FROM audit.OPS_Incident_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}')\n\t WHEN Work_Sheet = 'Operations' THEN (SELECT COUNT(*) FROM audit.OPS_Operation_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}')\n\t WHEN Work_Sheet = 'Other Sales' THEN (SELECT COUNT(*) FROM audit.OPS_Sales_Other_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}')\n\t WHEN Work_Sheet = 'Related Party Transactions' THEN (SELECT COUNT(*) FROM audit.OPS_Related_Party_Transaction_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}')\n\t WHEN Work_Sheet = 'Risk Opportunity Register' THEN (SELECT COUNT(*) FROM audit.OPS_Risk_Opportunity_Register_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}')\n\t WHEN Work_Sheet = 'Strategic Projects' THEN (SELECT COUNT(*) FROM audit.OPS_Strategic_Project_Error WHERE Source_File = '@{pipeline().parameters.WorkbookName}')\nELSE NULL END AS Error_Count\nFROM (\nSELECT DISTINCT Work_Book, Work_Sheet, wb.Asset_ID, wb.Fund_ID,\nra.Ops_Representative_First_Name, ra.Ops_Representative_Last_Name, ra.Ops_Representative_Email\nFROM [audit].[OPS_Workbook_Worksheet_Asset_List] wb\nJOIN [relational].[Asset] ra \nON wb.Asset_Id = ra.Asset_ID AND wb.Fund_Id = ra.Fund_ID  AND ra.record_deleted_flag = 0 AND wb.Work_Book = '@{pipeline().parameters.WorkbookName}') x\n)z;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLauditopsworkbookworksheetlist_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachWorkbookWorksheetEmail",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetEmailDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetEmailDetails').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SendEmail",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-19.australiaeast.logic.azure.com:443/workflows/7139728b716a4500b96a2fa094f691fa/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=I30JtkHJ6p4mNeMF6USxTdCCjTwTvY1dmmNC2Mvte7o",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"value": "{\n\"messageHeader\":\"@{item().Message_Header}\",\n\"message1\":\"Error Log Table: @{item().Error_Table}\",\n\"message2\":\"Error Count: @{item().Error_Count}\",\n\"message3\":\"If there is error, please check in the Error Log Table\",\n\"message4\":\"Thank you.\",\n\"message5\":\"Datafactory Name: DWH-Prod-ADF\",\n\"message6\":\"Pipeline Name: ProcessOPSWorkbookMaster_pl\",\n\"emailAddress\":\"@{item().Ops_Representative_Email}\",\n\"lastName\":\"@{item().Ops_Representative_Last_Name}\",\n\"firstName\":\"@{item().Ops_Representative_First_Name}\"\n}",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"DataFactoryName": {
						"type": "string",
						"defaultValue": "myFactory"
					},
					"PipelineName": {
						"type": "string",
						"defaultValue": "myPipeline"
					},
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Wenita Forestry Products Q4 FY20 V2.xlsx"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOpsWorkbookUpdateSourceRegister_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CollateOpsError",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT ERROR_COUNT,\n  CASE WHEN ERROR_COUNT = 0 THEN 'SUCCESS'\n  ELSE 'FAIL'\n  END RUN_STATUS,\n  CASE WHEN ERROR_COUNT = 0 THEN NULL\n  ELSE 'Not all Excel sheets have been loaded with no error'\n  END COMMENT_MSG\n  FROM (\n       SELECT SUM(ERROR_COUNT) ERROR_COUNT FROM (\n             SELECT COUNT(*) ERROR_COUNT FROM audit.OPS_Certification_Error WHERE Source_FIle = '@{pipeline().parameters.WorkbookName}'\n             UNION ALL\n             SELECT COUNT(*) ERROR_COUNT FROM audit.OPS_Timber_Sales_Error WHERE Source_FIle = '@{pipeline().parameters.WorkbookName}'\n\t\t\t UNION ALL\n             SELECT COUNT(*) ERROR_COUNT FROM audit.OPS_Contract_Error WHERE Source_FIle = '@{pipeline().parameters.WorkbookName}'\n             UNION ALL\n             SELECT COUNT(*) ERROR_COUNT FROM audit.OPS_Harvest_Reconciliation_Error WHERE Source_FIle = '@{pipeline().parameters.WorkbookName}'\n\t\t\t UNION ALL\n             SELECT COUNT(*) ERROR_COUNT FROM audit.OPS_Incident_Error WHERE Source_FIle = '@{pipeline().parameters.WorkbookName}'\n             UNION ALL\n             SELECT COUNT(*) ERROR_COUNT FROM audit.OPS_Operation_Error WHERE Source_FIle = '@{pipeline().parameters.WorkbookName}'\n\t\t\t UNION ALL\n             SELECT COUNT(*) ERROR_COUNT FROM audit.OPS_Related_Party_Transaction_Error WHERE Source_FIle = '@{pipeline().parameters.WorkbookName}'\n             UNION ALL\n             SELECT COUNT(*) ERROR_COUNT FROM audit.OPS_Risk_Opportunity_Register_Error WHERE Source_FIle = '@{pipeline().parameters.WorkbookName}'\n\t\t\t UNION ALL\n             SELECT COUNT(*) ERROR_COUNT FROM audit.OPS_Sales_Other_Error WHERE Source_FIle = '@{pipeline().parameters.WorkbookName}'\n             UNION ALL\n             SELECT COUNT(*) ERROR_COUNT FROM audit.OPS_Strategic_Project_Error WHERE Source_FIle = '@{pipeline().parameters.WorkbookName}'\n)x\n)z",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "InsertSourceRegisterTable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CollateOpsError",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[SourceRegisterTableInsert]",
							"storedProcedureParameters": {
								"ArchiveContainer": {
									"value": {
										"value": "sourcearchive",
										"type": "Expression"
									},
									"type": "String"
								},
								"Comment": {
									"value": {
										"value": "@activity('CollateOpsError').output.firstRow.COMMENT_MSG",
										"type": "Expression"
									},
									"type": "String"
								},
								"DatalakeContainer": {
									"value": {
										"value": "nonfinancial",
										"type": "Expression"
									},
									"type": "String"
								},
								"EtlUtcTag": {
									"value": {
										"value": "@pipeline().parameters.MasterUtcTag",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputDate": {
									"value": {
										"value": "@pipeline().parameters.CurrentQuarterDate",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputMethod": {
									"value": {
										"value": "manual",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessName": {
									"value": {
										"value": "@pipeline().parameters.MasterPipelineName",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": {
										"value": "@activity('CollateOpsError').output.firstRow.RUN_STATUS",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceContainer": {
									"value": {
										"value": "sourcelandingraw-ops",
										"type": "Expression"
									},
									"type": "String"
								},
								"TargetContainer": {
									"value": {
										"value": "adf2persistentarea",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Wenita Forestry Products Q4 FY20 V2.xlsx"
					},
					"MasterPipelineName": {
						"type": "string"
					},
					"CurrentQuarterDate": {
						"type": "string"
					},
					"MasterUtcTag": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}