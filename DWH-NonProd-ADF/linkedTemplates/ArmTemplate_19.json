{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DWH-NonProd-ADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ProcessSourceBlob_opspricepoint_spl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupStagingOpsIncident",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT count(*) Total_Error\n  FROM [staging].[OPS_Price_Point]\n  WHERE [Validation_Error] IS NOT NULL",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLstagingopspricepoint_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LookupStagingOpsIncident",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('LookupStagingOpsIncident').output.firstRow.TOTAL_ERROR,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "LoadStagingDBtoRelationDB_opsincident_df",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LoadStagingDBtoRelationDB_opspricepoint_df",
											"type": "DataFlowReference",
											"parameters": {
												"ProcessName": {
													"value": "'@{pipeline().parameters.ProcessName}'",
													"type": "Expression"
												},
												"FileName": {
													"value": "'@{pipeline().parameters.FileName}'",
													"type": "Expression"
												},
												"Etl_Utc_Tag": {
													"value": "'@{pipeline().parameters.Etl_Utc_Tag}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"StagingDB": {},
												"RelationalPricePoint": {},
												"UpserttRow": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "UpdateSourceRegisterTableAbort",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
										"storedProcedureParameters": {
											"EtlUtcTag": {
												"value": {
													"value": "@pipeline().parameters.Etl_Utc_Tag",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@pipeline().parameters.OriginalBlobName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQLdbConnection",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"ProcessName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"OriginalBlobName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessSourceBlob_opsquestions_spl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupStagingOpsAnswers",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT count(*) Total_Error\n  FROM [staging].[OPS_Questions]\n  WHERE [Validation_Error] IS NOT NULL",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLstagingopsquestions_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LookupStagingOpsAnswers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('LookupStagingOpsAnswers').output.firstRow.TOTAL_ERROR,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "LoadStagingDBtoRelationDB_opsquestions_df",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LoadStagingDBtoRelationDB_opsquestions_df",
											"type": "DataFlowReference",
											"parameters": {
												"ProcessName": {
													"value": "'@{pipeline().parameters.ProcessName}'",
													"type": "Expression"
												},
												"FileName": {
													"value": "'@{pipeline().parameters.FileName}'",
													"type": "Expression"
												},
												"Etl_Utc_Tag": {
													"value": "'@{pipeline().parameters.Etl_Utc_Tag}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"StagingDB": {},
												"RelationalSliQuestions": {},
												"UpserttRow": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "UpdateSourceRegisterTableAbort",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
										"storedProcedureParameters": {
											"EtlUtcTag": {
												"value": {
													"value": "@pipeline().parameters.Etl_Utc_Tag",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@pipeline().parameters.OriginalBlobName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQLdbConnection",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"ProcessName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"OriginalBlobName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessSourceBlob_opsrelatedpartytrx_spl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupStagingOpsRelatedPartyTrx",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT count(*) Total_Error\n  FROM [staging].[OPS_Incident]\n  WHERE [Validation_Error] IS NOT NULL",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLstagingopsrelatedpartytrx_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "IsStagingError",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LookupStagingOpsRelatedPartyTrx",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('LookupStagingOpsRelatedPartyTrx').output.firstRow.TOTAL_ERROR,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "LoadStagingDBtoRelationDB_opsrelatedpartytrx_df",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LoadStagingDBtoRelationDB_opsrelatedpartytrx_df",
											"type": "DataFlowReference",
											"parameters": {
												"ProcessName": {
													"value": "'@{pipeline().parameters.ProcessName}'",
													"type": "Expression"
												},
												"FileName": {
													"value": "'@{pipeline().parameters.FileName}'",
													"type": "Expression"
												},
												"Etl_Utc_Tag": {
													"value": "'@{pipeline().parameters.Etl_Utc_Tag}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"StagingDB": {},
												"RelationalRelaterPartyTransaction": {},
												"UpserttRow": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "UpdateSourceRegisterTableAbort",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
										"storedProcedureParameters": {
											"EtlUtcTag": {
												"value": {
													"value": "@pipeline().parameters.Etl_Utc_Tag",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@pipeline().parameters.OriginalBlobName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQLdbConnection",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"ProcessName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"OriginalBlobName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessSourceBlob_opsriskopportunityreg_spl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupStagingOpsIncident",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT count(*) Total_Error\n  FROM [staging].[OPS_Risk_Opportunity_Register]\n  WHERE [Validation_Error] IS NOT NULL",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLstagingopsriskopportunityreg_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LookupStagingOpsIncident",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('LookupStagingOpsIncident').output.firstRow.TOTAL_ERROR,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "LoadStagingDBtoRelationDB_opsriskopportunityreg_df",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LoadStagingDBtoRelationDB_opsriskopportunityreg_df",
											"type": "DataFlowReference",
											"parameters": {
												"ProcessName": {
													"value": "'@{pipeline().parameters.ProcessName}'",
													"type": "Expression"
												},
												"FileName": {
													"value": "'@{pipeline().parameters.FileName}'",
													"type": "Expression"
												},
												"Etl_Utc_Tag": {
													"value": "'@{pipeline().parameters.Etl_Utc_Tag}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"StagingDB": {},
												"RelationalRiskOpportunityRegister": {},
												"UpserttRow": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "UpdateSourceRegisterTableAbort",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
										"storedProcedureParameters": {
											"EtlUtcTag": {
												"value": {
													"value": "@pipeline().parameters.Etl_Utc_Tag",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@pipeline().parameters.OriginalBlobName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQLdbConnection",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"ProcessName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"OriginalBlobName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessSourceBlob_opssalesother_spl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupStagingOpsSalesOther",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT count(*) Total_Error\n  FROM [staging].[OPS_Sales_Other]\n  WHERE [Validation_Error] IS NOT NULL",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLstagingopssalesother",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LookupStagingOpsSalesOther",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('LookupStagingOpsSalesOther').output.firstRow.TOTAL_ERROR,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "LoadStagingDBtoRelationDB_opssalesother_df",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LoadStagingDBtoRelationDB_opssalesother_df",
											"type": "DataFlowReference",
											"parameters": {
												"ProcessName": {
													"value": "'@{pipeline().parameters.ProcessName}'",
													"type": "Expression"
												},
												"FileName": {
													"value": "'@{pipeline().parameters.FileName}'",
													"type": "Expression"
												},
												"Etl_Utc_Tag": {
													"value": "'@{pipeline().parameters.Etl_Utc_Tag}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"StagingDB": {},
												"RelationalSalesOther": {},
												"UpserttRow": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "UpdateSourceRegisterTableAbort",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
										"storedProcedureParameters": {
											"EtlUtcTag": {
												"value": {
													"value": "@pipeline().parameters.Etl_Utc_Tag",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@pipeline().parameters.OriginalBlobName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQLdbConnection",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"ProcessName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"OriginalBlobName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessSourceBlob_opssalesunit_spl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupStagingOpsIncident",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT count(*) Total_Error\n  FROM [staging].[OPS_Sales_Unit]\n  WHERE [Validation_Error] IS NOT NULL",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLstagingopssalesunit_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LookupStagingOpsIncident",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('LookupStagingOpsIncident').output.firstRow.TOTAL_ERROR,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "LoadStagingDBtoRelationDB_opssalesunit_df",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LoadStagingDBtoRelationDB_opssalesunit_df",
											"type": "DataFlowReference",
											"parameters": {
												"ProcessName": {
													"value": "'@{pipeline().parameters.ProcessName}'",
													"type": "Expression"
												},
												"FileName": {
													"value": "'@{pipeline().parameters.FileName}'",
													"type": "Expression"
												},
												"Etl_Utc_Tag": {
													"value": "'@{pipeline().parameters.Etl_Utc_Tag}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"StagingDB": {},
												"RelationalSalesUnit": {},
												"UpserttRow": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "UpdateSourceRegisterTableAbort",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
										"storedProcedureParameters": {
											"EtlUtcTag": {
												"value": {
													"value": "@pipeline().parameters.Etl_Utc_Tag",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@pipeline().parameters.OriginalBlobName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQLdbConnection",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"ProcessName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"OriginalBlobName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessSourceBlob_opsstrategicdeliverable_spl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupStagingOpsStrategicDeliverable",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT count(*) Total_Error\n  FROM [staging].[OPS_Strategic_Project_Deliverable]\n  WHERE [Validation_Error] IS NOT NULL",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLstagingopsstrategicdeliverable_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LookupStagingOpsStrategicDeliverable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('LookupStagingOpsStrategicDeliverable').output.firstRow.TOTAL_ERROR,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "LoadStagingDBtoRelationDB_opsstrategicdeliverable_df",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LoadStagingDBtoRelationDB_opsstrategicdeliverable_df",
											"type": "DataFlowReference",
											"parameters": {
												"ProcessName": {
													"value": "'@{pipeline().parameters.ProcessName}'",
													"type": "Expression"
												},
												"FileName": {
													"value": "'@{pipeline().parameters.FileName}'",
													"type": "Expression"
												},
												"Etl_Utc_Tag": {
													"value": "'@{pipeline().parameters.Etl_Utc_Tag}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"StagingDB": {},
												"RelationalStrategicProjectDeliverable": {},
												"UpserttRow": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "UpdateSourceRegisterTableAbort",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
										"storedProcedureParameters": {
											"EtlUtcTag": {
												"value": {
													"value": "@pipeline().parameters.Etl_Utc_Tag",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@pipeline().parameters.OriginalBlobName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQLdbConnection",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"ProcessName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"OriginalBlobName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessSourceBlob_opsstrategicproject_spl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupStagingOpsIncident",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT count(*) Total_Error\n  FROM [staging].[OPS_Strategic_Project]\n  WHERE [Validation_Error] IS NOT NULL",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLstagingopsstrategicproject_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LookupStagingOpsIncident",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('LookupStagingOpsIncident').output.firstRow.TOTAL_ERROR,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "LoadStagingDBtoRelationDB_opsstrategicproject_df",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LoadStagingDBtoRelationDB_opsstrategicproject_df",
											"type": "DataFlowReference",
											"parameters": {
												"ProcessName": {
													"value": "'@{pipeline().parameters.ProcessName}'",
													"type": "Expression"
												},
												"FileName": {
													"value": "'@{pipeline().parameters.FileName}'",
													"type": "Expression"
												},
												"Etl_Utc_Tag": {
													"value": "'@{pipeline().parameters.Etl_Utc_Tag}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"StagingDB": {},
												"RelationalStrategicProject": {},
												"UpserttRow": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "UpdateSourceRegisterTableAbort",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
										"storedProcedureParameters": {
											"EtlUtcTag": {
												"value": {
													"value": "@pipeline().parameters.Etl_Utc_Tag",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@pipeline().parameters.OriginalBlobName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQLdbConnection",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"ProcessName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"OriginalBlobName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessSourceBlob_opstimbersales_spl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupStagingOpsTimberSales",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT count(*) Total_Error\n  FROM [staging].[OPS_Timber_Sales]\n  WHERE [Validation_Error] IS NOT NULL",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLstagingopstimbersales_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LookupStagingOpsTimberSales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('LookupStagingOpsTimberSales').output.firstRow.TOTAL_ERROR,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "LoadStagingDBtoRelationDB_opstimbersales_df",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LoadStagingDBtoRelationDB_opstimbersales_df",
											"type": "DataFlowReference",
											"parameters": {
												"ProcessName": {
													"value": "'@{pipeline().parameters.ProcessName}'",
													"type": "Expression"
												},
												"FileName": {
													"value": "'@{pipeline().parameters.FileName}'",
													"type": "Expression"
												},
												"Etl_Utc_Tag": {
													"value": "'@{pipeline().parameters.Etl_Utc_Tag}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"StagingDB": {},
												"RelationalOpsTimberSales": {},
												"UpserttRow": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "UpdateSourceRegisterTableAbort",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
										"storedProcedureParameters": {
											"EtlUtcTag": {
												"value": {
													"value": "@pipeline().parameters.Etl_Utc_Tag",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@pipeline().parameters.OriginalBlobName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQLdbConnection",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"ProcessName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"OriginalBlobName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessTigermothBlob_CopyEstateToDL_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetUnprocessedBlobFromRegister",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetEtlUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [ORIGINAL_BLOB_LANDING_CONTAINER],\n\t[ORIGINAL_BLOB_NAME],\n\t[ORIGINAL_BLOP_FULLPATH],\n\t[TARGET_BLOB_LANDING_CONTAINER],\n\t[TARGET_BLOB_NAME],\n\t[DATALAKE_CONTAINER],\n\t[DATALAKE_FILE_PATH],\n\t[ORIGINAL_BLOB_ARCHIVE_CONTAINER],\n\t[ORIGINAL_BLOB_ARCHIVE_FULLPATH],\n\tCONCAT(DATALAKE_CONTAINER,'/',DATALAKE_FILE_PATH,'/',TARGET_BLOB_NAME) AS DATALAKE_FULL_PATHFILE\nFROM [log].[SOURCE_REGISTER_TABLE]\nWHERE [ETL_IS_PROCESSED] = 'N'\nAND [ORIGINAL_BLOB_NAME] LIKE 'TGR % spEst %'\nORDER BY [ORIGINAL_BLOB_NAME];",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CheckProcessArchiveBlobUpdateRegister",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetUnprocessedBlobFromRegister",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetUnprocessedBlobFromRegister').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "GetBlopPath",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DelimitedText_sourcelandingraw_ds",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"itemName",
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "IsPhysicalFileExist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "GetBlopPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('GetBlopPath').output.exists",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "UpdateSourceRegisterNoFile",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "DeleteFromScrubbedNoFile",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[log].[UpdateSourceRegisterNoFile]",
													"storedProcedureParameters": {
														"EtlUtcTag": {
															"value": {
																"value": "@variables('Etl_Utc_Tag')",
																"type": "Expression"
															},
															"type": "String"
														},
														"FileName": {
															"value": {
																"value": "@{item().ORIGINAL_BLOB_NAME}",
																"type": "Expression"
															},
															"type": "String"
														},
														"JobName": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "SQLdbConnection",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "DeleteFromScrubbedNoFile",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DelimitedText_sourcelandingscrubbed_ds",
														"type": "DatasetReference",
														"parameters": {}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "UpdateSourceRegisterRun",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[log].[UpdateSourceRegisterRun]",
													"storedProcedureParameters": {
														"EtlUtcTag": {
															"value": {
																"value": "@variables('Etl_Utc_Tag')",
																"type": "Expression"
															},
															"type": "String"
														},
														"FileName": {
															"value": {
																"value": "@{item().ORIGINAL_BLOB_NAME}",
																"type": "Expression"
															},
															"type": "String"
														},
														"JobName": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "SQLdbConnection",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "UpdateSourceRegisterPassed",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "DeleteFromScrubbed",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[log].[UpdateSourceRegisterPassed]",
													"storedProcedureParameters": {
														"EtlUtcTag": {
															"value": {
																"value": "@variables('Etl_Utc_Tag')",
																"type": "Expression"
															},
															"type": "String"
														},
														"FileName": {
															"value": {
																"value": "@{item().ORIGINAL_BLOB_NAME}",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "SQLdbConnection",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "UpdateSourceRegisterFailedAbort_CopyToArchive",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CopyOriginalToArchive",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
													"storedProcedureParameters": {
														"EtlUtcTag": {
															"value": {
																"value": "@variables('Etl_Utc_Tag')",
																"type": "Expression"
															},
															"type": "String"
														},
														"FileName": {
															"value": {
																"value": "@{item().ORIGINAL_BLOB_NAME}",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "SQLdbConnection",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "CopyOriginalToArchive",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "UnpivotandCopyScrubbedtoStaging",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DelimitedText_sourcelandingraw_ds",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DelimitedText_sourcearchive_ds",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											},
											{
												"name": "DeleteSourceRaw",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "CopyOriginalToArchive",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DelimitedText_sourcelandingraw_ds",
														"type": "DatasetReference",
														"parameters": {}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false
													}
												}
											},
											{
												"name": "DeleteFromScrubbed",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "DeleteSourceRaw",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DelimitedText_sourcelandingscrubbed_ds",
														"type": "DatasetReference",
														"parameters": {}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false
													}
												}
											},
											{
												"name": "UpdateSourceRegisterFailedAbort_CopyToStaging",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "UnpivotandCopyScrubbedtoStaging",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[log].[UpdateSourceRegisterFailedAbort]",
													"storedProcedureParameters": {
														"EtlUtcTag": {
															"value": {
																"value": "@variables('Etl_Utc_Tag')",
																"type": "Expression"
															},
															"type": "String"
														},
														"FileName": {
															"value": {
																"value": "@{item().ORIGINAL_BLOB_NAME}",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "SQLdbConnection",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "UnpivotandCopyScrubbedtoStaging",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "UpdateSourceRegisterRun",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "DSOPEstate_DF",
														"type": "DataFlowReference",
														"parameters": {},
														"datasetParameters": {
															"ForestModel": {},
															"DBStaging": {}
														}
													},
													"staging": {},
													"compute": {
														"coreCount": 8,
														"computeType": "General"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetEtlUtcTag",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Etl_Utc_Tag",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					}
				],
				"variables": {
					"Success_Fail_Header": {
						"type": "String",
						"defaultValue": "***SUCCESS***"
					},
					"Etl_Utc_Tag": {
						"type": "String",
						"defaultValue": "2019-10-22"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessTigermoth_LoadStagingToRelationDB_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadStagingDBtoRelationDB_forecastdata_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadStagingDBtoRelationDB_forecastdata_df",
								"type": "DataFlowReference",
								"parameters": {
									"ProcessName": {
										"value": "'@{pipeline().parameters.ProcessName}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.FileName}'",
										"type": "Expression"
									},
									"Etl_Utc_Tag": {
										"value": "'@{pipeline().parameters.Etl_Utc_Tag}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StagingDB": {},
									"InsertUpdateRow": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"parameters": {
					"ProcessName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Process_COA_Views')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy file to Source Landing, extract view data, Insert or Update to relational.COA_Views, move to archive",
				"activities": [
					{
						"name": "copyfilefromcorporatetoblob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set ETL local time",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelBudgetMapping",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "BudgetMappingText",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update_COA_Views_Table",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteTempExcelFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BudgetMappingtoDB",
								"type": "DataFlowReference",
								"parameters": {
									"process_name": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									},
									"ETL_local": {
										"value": "'@{variables('ETL_Local_Time')}'",
										"type": "Expression"
									},
									"useremail": {
										"value": "'@{pipeline().parameters.useremail}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"MappingText": {},
									"COAViews": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "CopyTexttoArchive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update_COA_Views_Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "BudgetMappingText",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ArchiveBudgetMapping",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set ETL local time",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ETL_Local_Time",
							"value": {
								"value": "@substring(formatDateTime(getFutureTime(10,'Hour')),0,19)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "DeleteTempExcelFile",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "copyfilefromcorporatetoblob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ExcelBudgetMapping",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureFileStorageReadSettings",
								"recursive": true
							}
						}
					}
				],
				"parameters": {
					"useremail": {
						"type": "string"
					}
				},
				"variables": {
					"ETL_Local_Time": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2testunique",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineJson')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"geojsonmodified": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktMasterDimDeliveryPoint_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MasterUtcTag",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "MasterUtcTag",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyWorksheetToCsvFile",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "MoveFIleFromFileshareToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Deliver Point Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Deliver Point Code",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Delivery Point",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Delivery Point",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@variables('WorksheetName')",
										"type": "Expression"
									},
									"Range": {
										"value": "@variables('WorksheetRange')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CSVgenericWithParameter_ds",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "MKTINFO_DIM_DELIVERY_POINT_Extract.csv",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "TruncateAuditTable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyWorksheetToCsvFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[audit].[TruncateAuditTable]",
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "Dim_Delivery_Point_Error",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ProcessDimension",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "TruncateAuditTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktUpdateDimDeliveryPoint_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"WorksheetName": {
									"value": "@variables('WorksheetName')",
									"type": "Expression"
								},
								"GeneratedBatchDate": {
									"value": "@variables('GenerateBatchDate')",
									"type": "Expression"
								},
								"MasterPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GenerateBatchDate",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "MasterUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "GenerateBatchDate",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcnow(),'AUS Eastern Standard Time'),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyToSourceArchive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDimension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToSourceArchive_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat(substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CopyToSourceArchiveFailed",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDimension",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToSourceArchive_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat(substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CopyToDataLake",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyToSourceArchive",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToDatalake_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat('manual/',substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteFromSourceLandingScrubbed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyToDataLake",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingScrubbed_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"prefix": {
									"value": "MKTINFO_DIM_DELIVERY_POINT",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingScrubbedFailed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyToSourceArchiveFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingScrubbed_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"prefix": {
									"value": "MKTINFO_DIM_DELIVERY_POINT",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingScrubbed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingRawFailed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingScrubbedFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "UpdateSourceRegisterFailed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingRawFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[SourceRegisterTableInsert]",
							"storedProcedureParameters": {
								"ArchiveContainer": {
									"value": {
										"value": "sourcearchive",
										"type": "Expression"
									},
									"type": "String"
								},
								"Comment": {
									"value": {
										"value": "Pipeline Failed",
										"type": "Expression"
									},
									"type": "String"
								},
								"DatalakeContainer": {
									"value": {
										"value": "nonfinancial",
										"type": "Expression"
									},
									"type": "String"
								},
								"EtlUtcTag": {
									"value": {
										"value": "@variables('MasterUtcTag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputDate": {
									"value": {
										"value": "@variables('GenerateBatchDate')",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputMethod": {
									"value": {
										"value": "manual",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": {
										"value": "ABORT",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceContainer": {
									"value": {
										"value": "sourcelandingraw",
										"type": "Expression"
									},
									"type": "String"
								},
								"TargetContainer": {
									"value": {
										"value": "sourcelandingscrubbed",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UpdateSourceRegisterTable",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingRaw",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktUpdateSourceRegister_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": {
									"value": "[[audit].[Dim_Delivery_Point_Error]",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@variables('MasterUtcTag')",
									"type": "Expression"
								},
								"MasterPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"GenerateBatchDate": {
									"value": "@variables('GenerateBatchDate')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendFinalEmail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UpdateSourceRegisterTable",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailOK_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": {
									"value": "[[audit].[Dim_Delivery_Point_Error]",
									"type": "Expression"
								},
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "MoveFIleFromFileshareToBlob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SendMailFileReceivedConfirmation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryDataSourceFileshareMktDataDir_MoveFile_ds",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryDataDestinationBlob_MoveFile_ds",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SendMailFileReceivedConfirmation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GenerateBatchDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailFileReceived_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendFinalFailedMsg",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UpdateSourceRegisterFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailFinalFailedMsg_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendMailMoveFileShareError",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "MoveFIleFromFileshareToBlob",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailCopyFailed_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendMailCopyFailError",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CopyWorksheetToCsvFile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailCopyFailed_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"emailAddress": {
						"type": "string",
						"defaultValue": "weiyin.leow@asggroup.com.au"
					},
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Market Info Dimensions.xlsx"
					}
				},
				"variables": {
					"WorksheetName": {
						"type": "String",
						"defaultValue": "Delivery Point"
					},
					"WorksheetRange": {
						"type": "String",
						"defaultValue": "A8:B999"
					},
					"GenerateBatchDate": {
						"type": "String"
					},
					"MasterUtcTag": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktMasterDimIndicator_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MasterUtcTag",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "MasterUtcTag",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyWorksheetToCsvFile",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "MoveFIleFromFileshareToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Indicator_Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Indicator_Code",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Indicator_Desc",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Indicator_Desc",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@variables('WorksheetName')",
										"type": "Expression"
									},
									"Range": {
										"value": "@variables('WorksheetRange')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CSVgenericWithParameter_ds",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "MKTINFO_DIM_INDICATOR_Extract.csv",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "TruncateAuditTable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyWorksheetToCsvFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[audit].[TruncateAuditTable]",
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "Dim_Species_Error",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ProcessDimension",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "TruncateAuditTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktUpdateDimIndicator_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"WorksheetName": {
									"value": "@variables('WorksheetName')",
									"type": "Expression"
								},
								"GeneratedBatchDate": {
									"value": "@variables('GenerateBatchDate')",
									"type": "Expression"
								},
								"MasterPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GenerateBatchDate",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "MasterUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "GenerateBatchDate",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcnow(),'AUS Eastern Standard Time'),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyToSourceArchive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDimension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToSourceArchive_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat(substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CopyToSourceArchiveFailed",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDimension",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToSourceArchive_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat(substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CopyToDataLake",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyToSourceArchive",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToDatalake_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat('manual/',substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteFromSourceLandingScrubbed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyToDataLake",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingScrubbed_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"prefix": {
									"value": "MKTINFO_DIM_DELIVERY_POINT",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingScrubbedFailed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyToSourceArchiveFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingScrubbed_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"prefix": {
									"value": "MKTINFO_DIM_DELIVERY_POINT",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingScrubbed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingRawFailed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingScrubbedFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "UpdateSourceRegisterFailed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingRawFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[SourceRegisterTableInsert]",
							"storedProcedureParameters": {
								"ArchiveContainer": {
									"value": {
										"value": "sourcearchive",
										"type": "Expression"
									},
									"type": "String"
								},
								"Comment": {
									"value": {
										"value": "Pipeline Failed",
										"type": "Expression"
									},
									"type": "String"
								},
								"DatalakeContainer": {
									"value": {
										"value": "nonfinancial",
										"type": "Expression"
									},
									"type": "String"
								},
								"EtlUtcTag": {
									"value": {
										"value": "@variables('MasterUtcTag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputDate": {
									"value": {
										"value": "@variables('GenerateBatchDate')",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputMethod": {
									"value": {
										"value": "manual",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": {
										"value": "ABORT",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceContainer": {
									"value": {
										"value": "sourcelandingraw",
										"type": "Expression"
									},
									"type": "String"
								},
								"TargetContainer": {
									"value": {
										"value": "sourcelandingscrubbed",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UpdateSourceRegisterTable",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingRaw",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktUpdateSourceRegister_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": {
									"value": "[[audit].[Dim_Delivery_Point_Error]",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@variables('MasterUtcTag')",
									"type": "Expression"
								},
								"MasterPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"GenerateBatchDate": {
									"value": "@variables('GenerateBatchDate')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendFinalEmail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UpdateSourceRegisterTable",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailOK_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": {
									"value": "[[audit].[Dim_Delivery_Point_Error]",
									"type": "Expression"
								},
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "MoveFIleFromFileshareToBlob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SendMailFileReceivedConfirmation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryDataSourceFileshareMktDataDir_MoveFile_ds",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryDataDestinationBlob_MoveFile_ds",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SendMailFileReceivedConfirmation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GenerateBatchDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailFileReceived_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendFinalFailedMsg",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UpdateSourceRegisterFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailFinalFailedMsg_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendMailMoveFileShareError",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "MoveFIleFromFileshareToBlob",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailCopyFailed_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendMailCopyFailError",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CopyWorksheetToCsvFile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailCopyFailed_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"emailAddress": {
						"type": "string",
						"defaultValue": "weiyin.leow@asggroup.com.au"
					},
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Market Info Dimensions.xlsx"
					}
				},
				"variables": {
					"WorksheetName": {
						"type": "String",
						"defaultValue": "Indicator"
					},
					"WorksheetRange": {
						"type": "String",
						"defaultValue": "A8:B999"
					},
					"GenerateBatchDate": {
						"type": "String"
					},
					"MasterUtcTag": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktMasterDimSpecies_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MasterUtcTag",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "MasterUtcTag",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyWorksheetToCsvFile",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "MoveFIleFromFileshareToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Species_Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Species_Code",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Species_Desc",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Species_Desc",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Genus",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Genus",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Species_Group",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Species_Group",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@variables('WorksheetName')",
										"type": "Expression"
									},
									"Range": {
										"value": "@variables('WorksheetRange')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CSVgenericWithParameter_ds",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "MKTINFO_DIM_SPECIES_Extract.csv",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "TruncateAuditTable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyWorksheetToCsvFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[audit].[TruncateAuditTable]",
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "Dim_Species_Error",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ProcessDimension",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "TruncateAuditTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktUpdateDimSpecies_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"WorksheetName": {
									"value": "@variables('WorksheetName')",
									"type": "Expression"
								},
								"GeneratedBatchDate": {
									"value": "@variables('GenerateBatchDate')",
									"type": "Expression"
								},
								"MasterPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GenerateBatchDate",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "MasterUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "GenerateBatchDate",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcnow(),'AUS Eastern Standard Time'),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyToSourceArchive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDimension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToSourceArchive_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat(substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CopyToSourceArchiveFailed",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDimension",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToSourceArchive_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat(substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CopyToDataLake",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyToSourceArchive",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToDatalake_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat('manual/',substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteFromSourceLandingScrubbed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyToDataLake",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingScrubbed_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"prefix": {
									"value": "MKTINFO_DIM_TYPE",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingScrubbedFailed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyToSourceArchiveFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingScrubbed_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"prefix": {
									"value": "MKTINFO_DIM_TYPE",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingScrubbed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingRawFailed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingScrubbedFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "UpdateSourceRegisterFailed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingRawFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[SourceRegisterTableInsert]",
							"storedProcedureParameters": {
								"ArchiveContainer": {
									"value": {
										"value": "sourcearchive",
										"type": "Expression"
									},
									"type": "String"
								},
								"Comment": {
									"value": {
										"value": "Pipeline Failed",
										"type": "Expression"
									},
									"type": "String"
								},
								"DatalakeContainer": {
									"value": {
										"value": "nonfinancial",
										"type": "Expression"
									},
									"type": "String"
								},
								"EtlUtcTag": {
									"value": {
										"value": "@variables('MasterUtcTag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputDate": {
									"value": {
										"value": "@variables('GenerateBatchDate')",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputMethod": {
									"value": {
										"value": "manual",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": {
										"value": "ABORT",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceContainer": {
									"value": {
										"value": "sourcelandingraw",
										"type": "Expression"
									},
									"type": "String"
								},
								"TargetContainer": {
									"value": {
										"value": "sourcelandingscrubbed",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UpdateSourceRegisterTable",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingRaw",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktUpdateSourceRegister_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": {
									"value": "[[audit].[Dim_Delivery_Point_Error]",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@variables('MasterUtcTag')",
									"type": "Expression"
								},
								"MasterPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"GenerateBatchDate": {
									"value": "@variables('GenerateBatchDate')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendFinalEmail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UpdateSourceRegisterTable",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailOK_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": {
									"value": "[[audit].[Dim_Delivery_Point_Error]",
									"type": "Expression"
								},
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "MoveFIleFromFileshareToBlob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SendEmailFileReceivedConfirmation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryDataSourceFileshareMktDataDir_MoveFile_ds",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryDataDestinationBlob_MoveFile_ds",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SendEmailFileReceivedConfirmation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GenerateBatchDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailFileReceived_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendMailMoveFileFailed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "MoveFIleFromFileshareToBlob",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailCopyFailed_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendMailCopyFileFailed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CopyWorksheetToCsvFile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailCopyFailed_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendMailLoadFailed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UpdateSourceRegisterFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailFinalFailedMsg_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"emailAddress": {
						"type": "string",
						"defaultValue": "weiyin.leow@asggroup.com.au"
					},
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Market Info Dimensions.xlsx"
					}
				},
				"variables": {
					"WorksheetName": {
						"type": "String",
						"defaultValue": "Species"
					},
					"WorksheetRange": {
						"type": "String",
						"defaultValue": "A8:D9999"
					},
					"GenerateBatchDate": {
						"type": "String"
					},
					"MasterUtcTag": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktMasterDimType_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MasterUtcTag",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "MasterUtcTag",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyWorksheetToCsvFile",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "MoveFIleFromFileshareToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Type",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Basis",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Basis",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Price_Point",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Price_Point",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@variables('WorksheetName')",
										"type": "Expression"
									},
									"Range": {
										"value": "@variables('WorksheetRange')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CSVgenericWithParameter_ds",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "MKTINFO_DIM_TYPE_Extract.csv",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "TruncateAuditTable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyWorksheetToCsvFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[audit].[TruncateAuditTable]",
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "Dim_Type_Error",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ProcessDimension",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "TruncateAuditTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktUpdateDimType_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"WorksheetName": {
									"value": "@variables('WorksheetName')",
									"type": "Expression"
								},
								"GeneratedBatchDate": {
									"value": "@variables('GenerateBatchDate')",
									"type": "Expression"
								},
								"MasterPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GenerateBatchDate",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "MasterUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "GenerateBatchDate",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcnow(),'AUS Eastern Standard Time'),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyToSourceArchive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDimension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToSourceArchive_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat(substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CopyToSourceArchiveFailed",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDimension",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToSourceArchive_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat(substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CopyToDataLake",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyToSourceArchive",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToDatalake_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat('manual/',substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteFromSourceLandingScrubbed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyToDataLake",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingScrubbed_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"prefix": {
									"value": "MKTINFO_DIM_TYPE",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingScrubbedFailed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyToSourceArchiveFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingScrubbed_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"prefix": {
									"value": "MKTINFO_DIM_TYPE",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingScrubbed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingRawFailed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingScrubbedFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "UpdateSourceRegisterFailed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingRawFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[SourceRegisterTableInsert]",
							"storedProcedureParameters": {
								"ArchiveContainer": {
									"value": {
										"value": "sourcearchive",
										"type": "Expression"
									},
									"type": "String"
								},
								"Comment": {
									"value": {
										"value": "Pipeline Failed",
										"type": "Expression"
									},
									"type": "String"
								},
								"DatalakeContainer": {
									"value": {
										"value": "nonfinancial",
										"type": "Expression"
									},
									"type": "String"
								},
								"EtlUtcTag": {
									"value": {
										"value": "@variables('MasterUtcTag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputDate": {
									"value": {
										"value": "@variables('GenerateBatchDate')",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputMethod": {
									"value": {
										"value": "manual",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": {
										"value": "ABORT",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceContainer": {
									"value": {
										"value": "sourcelandingraw",
										"type": "Expression"
									},
									"type": "String"
								},
								"TargetContainer": {
									"value": {
										"value": "sourcelandingscrubbed",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UpdateSourceRegisterTable",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingRaw",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktUpdateSourceRegister_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": {
									"value": "[[audit].[Dim_Delivery_Point_Error]",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@variables('MasterUtcTag')",
									"type": "Expression"
								},
								"MasterPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"GenerateBatchDate": {
									"value": "@variables('GenerateBatchDate')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendFinalEmail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UpdateSourceRegisterTable",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailOK_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": {
									"value": "[[audit].[Dim_Delivery_Point_Error]",
									"type": "Expression"
								},
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "MoveFIleFromFileshareToBlob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SendEmailFileReceivedConfirmation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryDataSourceFileshareMktDataDir_MoveFile_ds",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryDataDestinationBlob_MoveFile_ds",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SendEmailFileReceivedConfirmation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GenerateBatchDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailFileReceived_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendMailMoveFileFailed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "MoveFIleFromFileshareToBlob",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailCopyFailed_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendMailCopyFileFailed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CopyWorksheetToCsvFile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailCopyFailed_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendMailLoadFailed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UpdateSourceRegisterFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailFinalFailedMsg_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"emailAddress": {
						"type": "string",
						"defaultValue": "weiyin.leow@asggroup.com.au"
					},
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Market Info Dimensions.xlsx"
					}
				},
				"variables": {
					"WorksheetName": {
						"type": "String",
						"defaultValue": "Type"
					},
					"WorksheetRange": {
						"type": "String",
						"defaultValue": "A8:C9999"
					},
					"GenerateBatchDate": {
						"type": "String"
					},
					"MasterUtcTag": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktMasterDimUom_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MasterUtcTag",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "MasterUtcTag",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyWorksheetToCsvFile",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "MoveFIleFromFileshareToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "UOM_Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UOM_Name",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "UOM_Desc",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UOM_Desc",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "UOM_Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UOM_Type",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@variables('WorksheetName')",
										"type": "Expression"
									},
									"Range": {
										"value": "@variables('WorksheetRange')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CSVgenericWithParameter_ds",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "MKTINFO_DIM_UOM_Extract.csv",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "TruncateAuditTable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyWorksheetToCsvFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[audit].[TruncateAuditTable]",
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "Dim_Uom_Error",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ProcessDimension",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "TruncateAuditTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktUpdateDimType_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"WorksheetName": {
									"value": "@variables('WorksheetName')",
									"type": "Expression"
								},
								"GeneratedBatchDate": {
									"value": "@variables('GenerateBatchDate')",
									"type": "Expression"
								},
								"MasterPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GenerateBatchDate",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "MasterUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "GenerateBatchDate",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcnow(),'AUS Eastern Standard Time'),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyToSourceArchive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDimension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToSourceArchive_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat(substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CopyToSourceArchiveFailed",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDimension",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToSourceArchive_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat(substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CopyToDataLake",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyToSourceArchive",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryToDatalake_ds",
								"type": "DatasetReference",
								"parameters": {
									"path": {
										"value": "@concat('manual/',substring(variables('GenerateBatchDate'),0,4), '/', concat(if(equals(substring(variables('GenerateBatchDate'),5,2),'01'),'JAN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'02'),'FEB',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'03'),'MAR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'04'),'APR',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'05'),'MAY',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'06'),'JUN',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'07'),'JUL',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'08'),'AUG',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'09'),'SEP',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'10'),'OCT',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'11'),'NOV',''),if(equals(substring(variables('GenerateBatchDate'),5,2),'12'),'DEC','')), '/', substring(variables('GenerateBatchDate'),8,2))",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteFromSourceLandingScrubbed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyToDataLake",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingScrubbed_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"prefix": {
									"value": "MKTINFO_DIM_TYPE",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingScrubbedFailed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyToSourceArchiveFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingScrubbed_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"prefix": {
									"value": "MKTINFO_DIM_TYPE",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingScrubbed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "DeleteFromSourceLandingRawFailed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingScrubbedFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryFromSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {
									"file": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "UpdateSourceRegisterFailed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingRawFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[log].[SourceRegisterTableInsert]",
							"storedProcedureParameters": {
								"ArchiveContainer": {
									"value": {
										"value": "sourcearchive",
										"type": "Expression"
									},
									"type": "String"
								},
								"Comment": {
									"value": {
										"value": "Pipeline Failed",
										"type": "Expression"
									},
									"type": "String"
								},
								"DatalakeContainer": {
									"value": {
										"value": "nonfinancial",
										"type": "Expression"
									},
									"type": "String"
								},
								"EtlUtcTag": {
									"value": {
										"value": "@variables('MasterUtcTag')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputDate": {
									"value": {
										"value": "@variables('GenerateBatchDate')",
										"type": "Expression"
									},
									"type": "String"
								},
								"InputMethod": {
									"value": {
										"value": "manual",
										"type": "Expression"
									},
									"type": "String"
								},
								"ProcessName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": {
										"value": "ABORT",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceContainer": {
									"value": {
										"value": "sourcelandingraw",
										"type": "Expression"
									},
									"type": "String"
								},
								"TargetContainer": {
									"value": {
										"value": "sourcelandingscrubbed",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UpdateSourceRegisterTable",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromSourceLandingRaw",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktUpdateSourceRegister_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": {
									"value": "[[audit].[Dim_Delivery_Point_Error]",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@variables('MasterUtcTag')",
									"type": "Expression"
								},
								"MasterPipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"GenerateBatchDate": {
									"value": "@variables('GenerateBatchDate')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendFinalEmail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UpdateSourceRegisterTable",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailOK_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": {
									"value": "[[audit].[Dim_Delivery_Point_Error]",
									"type": "Expression"
								},
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "MoveFIleFromFileshareToBlob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SendEmailFileReceivedConfirmation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryDataSourceFileshareMktDataDir_MoveFile_ds",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryDataDestinationBlob_MoveFile_ds",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SendEmailFileReceivedConfirmation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GenerateBatchDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailFileReceived_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendMailMoveFileFailed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "MoveFIleFromFileshareToBlob",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailCopyFailed_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendMailCopyFileFailed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CopyWorksheetToCsvFile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailCopyFailed_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendMailLoadFailed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "UpdateSourceRegisterFailed",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessMktSendMailFinalFailedMsg_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"ErrorTableName": "None",
								"emailAddress": {
									"value": "@pipeline().parameters.emailAddress",
									"type": "Expression"
								}
							}
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"emailAddress": {
						"type": "string",
						"defaultValue": "weiyin.leow@asggroup.com.au"
					},
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Market Info Dimensions.xlsx"
					}
				},
				"variables": {
					"WorksheetName": {
						"type": "String",
						"defaultValue": "UOM"
					},
					"WorksheetRange": {
						"type": "String",
						"defaultValue": "A8:C9999"
					},
					"GenerateBatchDate": {
						"type": "String"
					},
					"MasterUtcTag": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOpsWorkbookSubMaster_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Sub Master job to orchestrate multiple pipelines run. Each pipeline correspond to one tab in the Excel workbook.",
				"activities": [
					{
						"name": "PipelineOtherSales",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineMajorSevereIncidents",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineRiskOpportunityRegister",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineRelatedPartyTransactions",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineHarvestReconcilliation",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineOperations",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineContracts",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "PipelineStrategicProjects",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "LoadAndUpdateCertificates",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ProcessWorkbookCertifications",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabCertificates_spl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"Certifications": {
									"value": "@pipeline().parameters.Certifications",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ProcessWorkbookTabTimberSales",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractTimberSales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabTimberSales_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"TimberSales": {
									"value": "@pipeline().parameters.TimberSales",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								},
								"MasterPipeline": {
									"value": "@pipeline().parameters.MasterPipeline",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteCertificatesAuditTable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[audit].[DeleteAuditTable]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "OPS_Certification_Error",
										"type": "Expression"
									},
									"type": "String"
								},
								"WorkBookName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DeleteTimberSalesAuditTable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[audit].[DeleteAuditTable]",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "OPS_Timber_Sales_Error",
										"type": "Expression"
									},
									"type": "String"
								},
								"WorkBookName": {
									"value": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQLdbConnection",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadTimberSales",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ProcessWorkbookTabTimberSales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabTimberSales_spl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"TimberSales": {
									"value": "@pipeline().parameters.TimberSales",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExtractCertifications",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DeleteCertificatesAuditTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Asset_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fund_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Reporting_Period",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Certification_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Validation Flag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Validation_Flag"
										}
									},
									{
										"source": {
											"name": "Certification Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_Type"
										}
									},
									{
										"source": {
											"name": "Certification Number",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_Number"
										}
									},
									{
										"source": {
											"name": "Next Audit Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Next_Audit_Date"
										}
									},
									{
										"source": {
											"name": "Certifying Body",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certifying_Body"
										}
									},
									{
										"source": {
											"name": "Certification Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_Date"
										}
									},
									{
										"source": {
											"name": "Certification End Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certification_End_Date"
										}
									},
									{
										"source": {
											"name": "Certified Entity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Certified_Entity"
										}
									},
									{
										"source": {
											"name": "Number of Open Minor CARS",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Number_of_Open_Minor_CARS"
										}
									},
									{
										"source": {
											"name": "Number of Open Major CARS",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Number_of_Open_Major_CARS"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@pipeline().parameters.Certifications",
										"type": "Expression"
									},
									"Range": {
										"value": "@pipeline().parameters.CertificationsRange",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference",
								"parameters": {
									"ParquetFile": {
										"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.Certifications,'_',pipeline().parameters.CurrentQuarterDate,'_Extract')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ProcessWorkbookCertifications",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExtractCertifications",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessOpsWorkbookTabCertificates_pl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"WorkbookName": {
									"value": "@pipeline().parameters.WorkbookName",
									"type": "Expression"
								},
								"CurrentQuarterDate": {
									"value": "@pipeline().parameters.CurrentQuarterDate",
									"type": "Expression"
								},
								"Certifications": {
									"value": "@pipeline().parameters.Certifications",
									"type": "Expression"
								},
								"CurrentRunDateTime": {
									"value": "@pipeline().parameters.CurrentRunDateTime",
									"type": "Expression"
								},
								"MasterUtcTag": {
									"value": "@pipeline().parameters.MasterUtcTag",
									"type": "Expression"
								},
								"MasterPipeline": {
									"value": "@pipeline().parameters.MasterPipeline",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExtractTimberSales",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DeleteTimberSalesAuditTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Asset_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Asset_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Fund_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fund_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Reporting_Period",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Reporting_Period",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Validation Flag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Validation_Flag"
										}
									},
									{
										"source": {
											"name": "Customer",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Domestic or Export",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Domestic_or_Export"
										}
									},
									{
										"source": {
											"name": "Species",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Species",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Product Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product_Type"
										}
									},
									{
										"source": {
											"name": "Delivery Point",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Delivery_Point"
										}
									},
									{
										"source": {
											"name": "Price Point",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Price_Point"
										}
									},
									{
										"source": {
											"name": "Sales Unit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales_Unit"
										}
									},
									{
										"source": {
											"name": "Sales Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales_Quantity"
										}
									},
									{
										"source": {
											"name": "Average Sales Price",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Average_Sales_Price"
										}
									},
									{
										"source": {
											"name": "Sales Revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales_Revenue"
										}
									},
									{
										"source": {
											"name": "Production Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Production_Cost"
										}
									},
									{
										"source": {
											"name": "Stumpage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Stumpage",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Unit Stumpage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Unit_Stumpage"
										}
									},
									{
										"source": {
											"name": "Currency",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Currency",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Month",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Month",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Budget Sales Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Sales_Quantity"
										}
									},
									{
										"source": {
											"name": "Budget Sales Revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Sales_Revenue"
										}
									},
									{
										"source": {
											"name": "Budget Production Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Production_Cost"
										}
									},
									{
										"source": {
											"name": "Budget Unit Stumpage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Budget_Unit_Stumpage"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ExcelWorkbook_AllTabs_ds",
								"type": "DatasetReference",
								"parameters": {
									"WorkbookName": {
										"value": "@pipeline().parameters.WorkbookName",
										"type": "Expression"
									},
									"TabName": {
										"value": "@pipeline().parameters.TimberSales",
										"type": "Expression"
									},
									"Range": {
										"value": "@pipeline().parameters.TimberSalesRange",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference",
								"parameters": {
									"ParquetFile": {
										"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.TimberSales,'_',pipeline().parameters.CurrentQuarterDate,'_Extract')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"concurrency": 15,
				"parameters": {
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Wenita Forestry Products Q4 FY20 V2.xlsx"
					},
					"CurrentQuarterDate": {
						"type": "string",
						"defaultValue": "2020-06-30"
					},
					"OtherSales": {
						"type": "string",
						"defaultValue": "Other Sales"
					},
					"MajorSevereIncidents": {
						"type": "string",
						"defaultValue": "Major Severe Incidents"
					},
					"RiskOpportunityRegister": {
						"type": "string",
						"defaultValue": "Risk Opportunity Register"
					},
					"Certifications": {
						"type": "string",
						"defaultValue": "Certifications"
					},
					"RelatedPartyTransactions": {
						"type": "string",
						"defaultValue": "Related Party Transactions"
					},
					"TimberSales": {
						"type": "string",
						"defaultValue": "Timber Sales"
					},
					"HarvestReconcilliation": {
						"type": "string",
						"defaultValue": "Harvest Reconcilliation"
					},
					"Operations": {
						"type": "string",
						"defaultValue": "Operations"
					},
					"Contracts": {
						"type": "string",
						"defaultValue": "Contracts"
					},
					"StrategicProjects": {
						"type": "string",
						"defaultValue": "Strategic Projects"
					},
					"CurrentRunDateTime": {
						"type": "string",
						"defaultValue": "2020-08-01"
					},
					"MasterUtcTag": {
						"type": "string",
						"defaultValue": "2020-08-28T06:05:53.4181322Z"
					},
					"MasterPipeline": {
						"type": "string",
						"defaultValue": "ProcessOpsWorkbookMaster_pl"
					},
					"OtherSalesRange": {
						"type": "string"
					},
					"MajorSevereIncidentsRange": {
						"type": "string"
					},
					"RiskOpportunityRegisterRange": {
						"type": "string"
					},
					"CertificationsRange": {
						"type": "string",
						"defaultValue": "A6:N99999"
					},
					"RelatedPartyTransactionsRange": {
						"type": "string"
					},
					"TimberSalesRange": {
						"type": "string",
						"defaultValue": "A6:W99999"
					},
					"HarvestReconcilliationRange": {
						"type": "string"
					},
					"OperationsRange": {
						"type": "string"
					},
					"ContractsRange": {
						"type": "string"
					},
					"StrategicProjectsRange": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}