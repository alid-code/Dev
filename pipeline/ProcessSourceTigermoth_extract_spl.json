{
	"name": "ProcessSourceTigermoth_extract_spl",
	"properties": {
		"activities": [
			{
				"name": "GetUnprocessedForecastAsset",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "SetEtlUtcTag",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT [Fund_ID]\n      ,[Asset_ID]\n      ,[DatabaseName]\n      ,[Group_ID]\n      ,[Attribute_id]\n      ,[Origin_id]\n      ,[Asset_Offset]\n      ,[Version_name]\n      ,[IsProcessed]\n\t  ,'sp_FSOPConsolidated' AS sp_FSOPConsolidated\n\t  ,'sp_FSOPEstate' AS sp_FSOPEstate\n\t  ,'sp_FSOPOther' AS sp_FSOPOther\n      ,CONCAT('TGR_', Fund_ID, '_', Asset_ID, '_', DatabaseName, '_spFSOPConsolidated_', FORMAT(START_DATETIME,'yyyyMMdd'),'.csv') AS TargetFileName_spFSOPConsolidated\n      ,CONCAT('TGR_', Fund_ID, '_', Asset_ID, '_', DatabaseName, '_spFSOPEstate_', FORMAT(START_DATETIME,'yyyyMMdd'),'.csv') AS TargetFileName_spFSOPEstate\n      ,CONCAT('TGR_', Fund_ID, '_', Asset_ID, '_', DatabaseName, '_spFSOPOther_', FORMAT(START_DATETIME,'yyyyMMdd'),'.csv') AS TargetFileName_spFSOPOther\nFROM [relational].[Forecast_Asset_reference]\nWHERE record_deleted_flag = 0 AND IsProcessed = 0"
					},
					"dataset": {
						"referenceName": "SQLrelationfctrefasset_ds",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ExtractFromSP",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetUnprocessedForecastAsset",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetUnprocessedForecastAsset').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "ExtractFromSPtoBlob",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"sqlReaderStoredProcedureName": {
										"value": "@{item().sp_FSOPConsolidated}",
										"type": "Expression"
									},
									"storedProcedureParameters": {
										"AttributeID": {
											"type": "Int16",
											"value": {
												"value": "@{item().Attribute_id}",
												"type": "Expression"
											}
										},
										"GroupID": {
											"type": "Int16",
											"value": {
												"value": "@{item().Group_ID}",
												"type": "Expression"
											}
										},
										"OriginID": {
											"type": "Int16",
											"value": {
												"value": "@{item().Origin_id}",
												"type": "Expression"
											}
										}
									}
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "Tigermoth_DB_jao_ds",
									"type": "DatasetReference",
									"parameters": {
										"dbname": {
											"value": "@{item().DatabaseName}",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DelimitedText_sourcelandingraw_ds",
									"type": "DatasetReference"
								}
							]
						}
					]
				}
			},
			{
				"name": "SetEtlUtcTag",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "Etl_Utc_Tag",
					"value": {
						"value": "@utcnow()",
						"type": "Expression"
					}
				}
			},
			{
				"name": "SendPipelineMailSuccess",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "ExtractFromSP",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "PipelineSendMail_pl",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Parent_DataFactory": {
							"value": "@pipeline().DataFactory",
							"type": "Expression"
						},
						"Parent_Pipeline": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"Success_Fail_Header": "***SUCCESS***",
						"Etl_Utc_Tag": {
							"value": "@variables('Etl_Utc_Tag')",
							"type": "Expression"
						},
						"File_Pattern": "MAS_MNL_FCTREFASSET_%"
					}
				}
			},
			{
				"name": "SendPipelineMailFail",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "ExtractFromSP",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "PipelineSendMail_pl",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Parent_DataFactory": {
							"value": "@pipeline().DataFactory",
							"type": "Expression"
						},
						"Parent_Pipeline": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"Success_Fail_Header": "!!!FAILED!!!",
						"Etl_Utc_Tag": {
							"value": "@variables('Etl_Utc_Tag')",
							"type": "Expression"
						},
						"File_Pattern": "MAS_MNL_FCTREFASSET_%"
					}
				}
			}
		],
		"variables": {
			"Success_Fail_Header": {
				"type": "String",
				"defaultValue": "***SUCCESS***"
			},
			"Etl_Utc_Tag": {
				"type": "String",
				"defaultValue": "2019-10-22"
			}
		},
		"annotations": []
	}
}